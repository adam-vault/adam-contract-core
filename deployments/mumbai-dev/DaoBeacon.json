{
  "address": "0xB35C125f147F804dd9BEbDe2332a9446D409Fb4b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "contractName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "impl",
              "type": "address"
            }
          ],
          "internalType": "struct DaoBeacon.ContractImpl[]",
          "name": "_contractImpl",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DaoImplementationNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "InvalidContract",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "contractName",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "impl",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct DaoBeacon.ContractImpl[]",
          "name": "contractImpl",
          "type": "tuple[]"
        }
      ],
      "name": "DaoBeaconInit",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a277120be5c5fddba0119e514c0b0a19cdf90798b576de81ea32bb6eefdfe3e",
  "receipt": {
    "to": null,
    "from": "0x2d61d2ea8c296305C4AF461f12a172cF1d0af599",
    "contractAddress": "0xB35C125f147F804dd9BEbDe2332a9446D409Fb4b",
    "transactionIndex": 7,
    "gasUsed": "407724",
    "logsBloom": "0x
    "blockHash": "0xd7f71a1bfb426514a5b1daee0a11aa574190ebf6c3a7254a1e2f8baa1460ff1e",
    "transactionHash": "0x8a277120be5c5fddba0119e514c0b0a19cdf90798b576de81ea32bb6eefdfe3e",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 32599604,
        "transactionHash": "0x8a277120be5c5fddba0119e514c0b0a19cdf90798b576de81ea32bb6eefdfe3e",
        "address": "0xB35C125f147F804dd9BEbDe2332a9446D409Fb4b",
        "topics": [
          "0x19982cc81119a92a351f7a682ca08587eca685ca92bf46cf91c9aeb0271e2e5c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000676332e302e30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070eb5315aabe0b67a4ffbc3e46ecabf1b111df8b819059d7bd494e073ea45e5c40000000000000000000000006e7e0d81e77acedd26adba7a391d29995512a2475c4ee0e3f89f17d0a72534b567bc6571190c655da657329132a489e6ea1f93af0000000000000000000000008d7df815fb19055a66a0b44ca91a5ebdc0bb876eca3a9c7f8591a529395becbf849567b04ba8a1f97b6270590de1ca40f157eee800000000000000000000000080b5aee59a67275d7371ab65d8dd9766ed90b6e7d519f8c75060dd6624d6648c54d628a13d6dfe0f64aa76e627cd2bca2927828c000000000000000000000000ce7b705834152c21be125cdb7505285df2bbd48764925d0d84562fd361a302a2b1baa73c4b1fbf4060c4447ff115e0dfb1e93f1100000000000000000000000043d45ce27481034f6bc9dce1ed29eaadf7aaaab039b2998f6ab406431314b35392869ac97b78118c44110010e2794d01a8a4bd51000000000000000000000000a6a22a9032e01341d7bac0d48bd08fc1a6a3d767091c6f8af1bbed44714810e84f12698ca9a61882d939204b4fd71435d0a8e06900000000000000000000000007840a24f5cbeb26227d3d77c4ab00dc66e9061b",
        "logIndex": 13,
        "blockHash": "0xd7f71a1bfb426514a5b1daee0a11aa574190ebf6c3a7254a1e2f8baa1460ff1e"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 32599604,
        "transactionHash": "0x8a277120be5c5fddba0119e514c0b0a19cdf90798b576de81ea32bb6eefdfe3e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d61d2ea8c296305c4af461f12a172cf1d0af599",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000022c3bf6479400000000000000000000000000000000000000000000000000041e1920ea5912bb0000000000000000000000000000000000000000000002d909ab226ec6cdbebd000000000000000000000000000000000000000000000000041bece4f4117ebb0000000000000000000000000000000000000000000002d909ad4eaabd1552bd",
        "logIndex": 14,
        "blockHash": "0xd7f71a1bfb426514a5b1daee0a11aa574190ebf6c3a7254a1e2f8baa1460ff1e"
      }
    ],
    "blockNumber": 32599604,
    "cumulativeGasUsed": "1659270",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "v3.0.0",
    [
      [
        "0x0eb5315aabe0b67a4ffbc3e46ecabf1b111df8b819059d7bd494e073ea45e5c4",
        "0x6E7E0D81e77aCEdd26adbA7a391d29995512a247"
      ],
      [
        "0x5c4ee0e3f89f17d0a72534b567bc6571190c655da657329132a489e6ea1f93af",
        "0x8d7df815Fb19055A66a0B44Ca91A5ebdc0bb876e"
      ],
      [
        "0xca3a9c7f8591a529395becbf849567b04ba8a1f97b6270590de1ca40f157eee8",
        "0x80B5aEE59A67275d7371Ab65D8DD9766ED90B6E7"
      ],
      [
        "0xd519f8c75060dd6624d6648c54d628a13d6dfe0f64aa76e627cd2bca2927828c",
        "0xCe7b705834152C21be125cDb7505285df2BbD487"
      ],
      [
        "0x64925d0d84562fd361a302a2b1baa73c4b1fbf4060c4447ff115e0dfb1e93f11",
        "0x43D45ce27481034F6bC9dCe1Ed29eAAdF7aAAAb0"
      ],
      [
        "0x39b2998f6ab406431314b35392869ac97b78118c44110010e2794d01a8a4bd51",
        "0xA6A22A9032E01341D7baC0d48Bd08FC1a6A3d767"
      ],
      [
        "0x091c6f8af1bbed44714810e84f12698ca9a61882d939204b4fd71435d0a8e069",
        "0x07840a24F5CBEB26227D3D77c4AB00dC66E9061b"
      ]
    ]
  ],
  "numDeployments": 4,
  "solcInputHash": "5fc3db6744f3ddd0f1dd7c5e591b869e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"internalType\":\"struct DaoBeacon.ContractImpl[]\",\"name\":\"_contractImpl\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DaoImplementationNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct DaoBeacon.ContractImpl[]\",\"name\":\"contractImpl\",\"type\":\"tuple[]\"}],\"name\":\"DaoBeaconInit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DaoBeacon.sol\":\"DaoBeacon\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/DaoBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./lib/Constant.sol\\\";\\n\\n\\ncontract DaoBeacon {\\n    using Address for address;\\n\\n    string public name;\\n    mapping(bytes32 => address) public implementation;\\n\\n    struct ContractImpl {\\n        bytes32 contractName;\\n        address impl;\\n    }\\n\\n    event DaoBeaconInit(string name, ContractImpl[] contractImpl);\\n    error InvalidContract(address _contract);\\n    error DaoImplementationNotExist();\\n    constructor(string memory _name, ContractImpl[] memory _contractImpl) {\\n        name = _name;\\n        for (uint256 i; i < _contractImpl.length; i++) {\\n            ContractImpl memory _ci = _contractImpl[i];\\n            address _impl = _ci.impl;\\n            if (!_impl.isContract()) {\\n                revert InvalidContract(_impl);\\n            }\\n            implementation[_ci.contractName] = _impl;\\n        }\\n        if (implementation[Constant.BEACON_NAME_DAO] == address(0)) {\\n            revert DaoImplementationNotExist();\\n        }\\n        emit DaoBeaconInit(name, _contractImpl);\\n    }\\n}\\n\",\"keccak256\":\"0xbe19de4bed91af7b2066522f7e404a9fbd6f75877fb71fa42ec0f8a840d0b94b\",\"license\":\"GPL-3.0\"},\"contracts/lib/Constant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Constant {\\n    bytes32 public constant BEACON_NAME_DAO = bytes32(keccak256(\\\"adam.dao\\\"));\\n    bytes32 public constant BEACON_NAME_MEMBERSHIP = bytes32(keccak256(\\\"adam.dao.membership\\\"));\\n    bytes32 public constant BEACON_NAME_MEMBER_TOKEN = bytes32(keccak256(\\\"adam.dao.member_token\\\"));\\n    bytes32 public constant BEACON_NAME_LIQUID_POOL = bytes32(keccak256(\\\"adam.dao.liquid_pool\\\"));\\n    bytes32 public constant BEACON_NAME_GOVERN = bytes32(keccak256(\\\"adam.dao.govern\\\"));\\n    bytes32 public constant BEACON_NAME_TEAM = bytes32(keccak256(\\\"adam.dao.team\\\"));\\n    bytes32 public constant BEACON_NAME_ACCOUNTING_SYSTEM = bytes32(keccak256(\\\"adam.dao.accounting_system\\\"));\\n\\n    address public constant UNISWAP_ROUTER = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n    address public constant FEED_REGISTRY = 0xe74B6321545aD397E08AdB12d83983eB8e6F4062;\\n    address public constant BRIDGE_CURRENCY = 0x0000000000000000000000000000000000000348;\\n    address public constant NATIVE_TOKEN = 0x0000000000000000000000000000000000001010;\\n    address public constant WRAP_NATIVE_TOKEN = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889;\\n    address public constant WETH_ADDRESS = 0x0000000000000000000000000000000000000000;\\n    \\n    uint public constant STALE_PRICE_DELAY = 86400;\\n}\\n\",\"keccak256\":\"0x035fd62c4abd188ad2b3eb4920c762c3ee15fc22c31e07932e4ebee7e545c1c6\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161080538038061080583398101604081905261002f91610317565b81516100429060009060208501906101bf565b5060005b81518110156100fd576000828281518110610063576100636105b4565b60200260200101519050600081602001519050610092816001600160a01b03166101b060201b6101281760201c565b6100be57604051633b00592160e21b81526001600160a01b038216600482015260240160405180910390fd5b9051600090815260016020526040902080546001600160a01b0319166001600160a01b03909216919091179055806100f58161058b565b915050610046565b507f0eb5315aabe0b67a4ffbc3e46ecabf1b111df8b819059d7bd494e073ea45e5c460005260016020527fd89dcb31020833a635dbddcbb75c24957db8abb9f7e89cab13a81f9db06151bb546001600160a01b031661016f576040516316f1166560e01b815260040160405180910390fd5b7f19982cc81119a92a351f7a682ca08587eca685ca92bf46cf91c9aeb0271e2e5c6000826040516101a192919061043c565b60405180910390a150506105e0565b6001600160a01b03163b151590565b8280546101cb90610550565b90600052602060002090601f0160209004810192826101ed5760008555610233565b82601f1061020657805160ff1916838001178555610233565b82800160010185558215610233579182015b82811115610233578251825591602001919060010190610218565b5061023f929150610243565b5090565b5b8082111561023f5760008155600101610244565b600082601f83011261026957600080fd5b815160206001600160401b03821115610284576102846105ca565b610292818360051b01610520565b80838252828201915082860187848660061b89010111156102b257600080fd5b60005b8581101561030a57604080838b0312156102ce57600080fd5b6102d66104f8565b83518152868401516001600160a01b03811681146102f357600080fd5b8188015285529385019391909101906001016102b5565b5090979650505050505050565b6000806040838503121561032a57600080fd5b82516001600160401b038082111561034157600080fd5b818501915085601f83011261035557600080fd5b815181811115610367576103676105ca565b602061037b601f8301601f19168201610520565b828152888284870101111561038f57600080fd5b60005b838110156103ad578581018301518282018401528201610392565b838111156103be5760008385840101525b5090870151909550925050808211156103d657600080fd5b506103e385828601610258565b9150509250929050565b600081518084526020808501945080840160005b83811015610431578151805188528301516001600160a01b03168388015260409096019590820190600101610401565b509495945050505050565b60408152600080845481600182811c91508083168061045c57607f831692505b602080841082141561047c57634e487b7160e01b86526022600452602486fd5b604088018490526060880182801561049b57600181146104ac576104d7565b60ff198716825282820197506104d7565b60008c81526020902060005b878110156104d1578154848201529086019084016104b8565b83019850505b50508786038189015250505050506104ef81856103ed565b95945050505050565b604080519081016001600160401b038111828210171561051a5761051a6105ca565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610548576105486105ca565b604052919050565b600181811c9082168061056457607f821691505b6020821081141561058557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156105ad57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610216806105ef6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806353c41dea14610059575b600080fd5b61004361009a565b6040516100509190610150565b60405180910390f35b610082610067366004610137565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610050565b600080546100a7906101a5565b80601f01602080910402602001604051908101604052809291908181526020018280546100d3906101a5565b80156101205780601f106100f557610100808354040283529160200191610120565b820191906000526020600020905b81548152906001019060200180831161010357829003601f168201915b505050505081565b6001600160a01b03163b151590565b60006020828403121561014957600080fd5b5035919050565b600060208083528351808285015260005b8181101561017d57858101830151858201604001528201610161565b8181111561018f576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806101b957607f821691505b602082108114156101da57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122007d166338ee44e06fc0ea58e021bda7f7c6f2e1e11b35b1af3fad22671ce198064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806353c41dea14610059575b600080fd5b61004361009a565b6040516100509190610150565b60405180910390f35b610082610067366004610137565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610050565b600080546100a7906101a5565b80601f01602080910402602001604051908101604052809291908181526020018280546100d3906101a5565b80156101205780601f106100f557610100808354040283529160200191610120565b820191906000526020600020905b81548152906001019060200180831161010357829003601f168201915b505050505081565b6001600160a01b03163b151590565b60006020828403121561014957600080fd5b5035919050565b600060208083528351808285015260005b8181101561017d57858101830151858201604001528201610161565b8181111561018f576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806101b957607f821691505b602082108114156101da57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122007d166338ee44e06fc0ea58e021bda7f7c6f2e1e11b35b1af3fad22671ce198064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13440,
        "contract": "contracts/DaoBeacon.sol:DaoBeacon",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 13444,
        "contract": "contracts/DaoBeacon.sol:DaoBeacon",
        "label": "implementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}