{
  "address": "0x03b67A950C0ea9399cFF3C76A52B923e154147c4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "assetDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetUSDPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "derivedAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        }
      ],
      "name": "isSupportedPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        }
      ],
      "name": "usdAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71fbef505853ba6e06f3aae38e0883b389dc6e433b6115400d2304db260a459e",
  "receipt": {
    "to": null,
    "from": "0x2d61d2ea8c296305C4AF461f12a172cF1d0af599",
    "contractAddress": "0x03b67A950C0ea9399cFF3C76A52B923e154147c4",
    "transactionIndex": 1,
    "gasUsed": "1145219",
    "logsBloom": "0x
    "blockHash": "0x9762eb2bb68222d76c384c720e7f3ee39d607988f1f0c4f4636aad4ed2b41312",
    "transactionHash": "0x71fbef505853ba6e06f3aae38e0883b389dc6e433b6115400d2304db260a459e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4857808,
        "transactionHash": "0x71fbef505853ba6e06f3aae38e0883b389dc6e433b6115400d2304db260a459e",
        "address": "0x03b67A950C0ea9399cFF3C76A52B923e154147c4",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x9762eb2bb68222d76c384c720e7f3ee39d607988f1f0c4f4636aad4ed2b41312"
      }
    ],
    "blockNumber": 4857808,
    "cumulativeGasUsed": "1145219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3f664844ced2cb498657d1fff7b71bf7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"derivedAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"isSupportedPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"usdAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assetPrice(address,address,uint256)\":{\"details\":\"For those outside contract , Please used this as the entry pointthis Function will help to route the calculate to other cal function,Please do not directly call the below cal function\",\"params\":{\"amount\":\"the amount of asset, in asset decimal\",\"asset\":\"the asset token address, support ETH , WETH and other ERC20\",\"base\":\"the base token address, support ETH , WETH and other ERC20\"},\"returns\":{\"_0\":\"uint256 the Asset Price in term of base token in base token decimal\"}},\"assetUSDPrice(address,uint256)\":{\"details\":\"Get the rate in Chainlink and scale the Price to decimal 8\",\"params\":{\"amount\":\"Asset Amount in term of asset's decimal\",\"asset\":\"the asset token address, support ETH , WETH and other ERC20\"},\"returns\":{\"_0\":\"uint256 the Asset Price in term of USD with hardcoded decimal 8\"}},\"isSupportedPair(address,address)\":{\"details\":\"Custom price gateway is allowed, but need to implement priceGateway.sol and set by govern\",\"params\":{\"asset\":\"the asset token address, support ETH , WETH and other ERC20\",\"base\":\"the base token address, support ETH , WETH and other ERC20\"},\"returns\":{\"_0\":\"boolean Is support or not\"}},\"usdAssetPrice(address,uint256)\":{\"details\":\"Get the rate in Chainlink and scale the Price to asset decimal\",\"params\":{\"asset\":\"the asset token address, support ETH , WETH and other ERC20, used as base token address\",\"usdAmount\":\"Usd Amount with 8 decimal (arbitrum)\"},\"returns\":{\"_0\":\"uint256 the price by using asset as base with assets decimal\"}}},\"stateVariables\":{\"name\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetPrice(address,address,uint256)\":{\"notice\":\"inherited from PriceGateway, to cal the asset price base on different token\"},\"assetUSDPrice(address,uint256)\":{\"notice\":\"Get Asset Price in Term of USD\"},\"isSupportedPair(address,address)\":{\"notice\":\"inherited from PriceGateway, help to check the imported pair support or not\"},\"usdAssetPrice(address,uint256)\":{\"notice\":\"Get USD Price in term of Asset\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArbitrumChainlinkPriceGateway.sol\":\"ArbitrumChainlinkPriceGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(address base, address quote) external view returns (uint8);\\n\\n  function description(address base, address quote) external view returns (string memory);\\n\\n  function version(address base, address quote) external view returns (uint256);\\n\\n  function latestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (int256 answer);\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (uint256 timestamp);\\n\\n  // Registry getters\\n\\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (Phase memory phase);\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 previousRoundId);\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 nextRoundId);\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(address base, address quote)\\n    external\\n    view\\n    returns (AggregatorV2V3Interface proposedAggregator);\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\",\"keccak256\":\"0xa783cf3434bd5b5153fe876c37d5d5cb78d4e198f01f184b60ed3392401ddc0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/ArbitrumChainlinkPriceGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\n\\nimport \\\"./base/PriceGateway.sol\\\";\\nimport \\\"./lib/Constant.sol\\\";\\n\\ncontract ArbitrumChainlinkPriceGateway is Initializable, PriceGateway {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    string public constant override name = \\\"Arbitrum Chainlink Price Gateway\\\";\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice inherited from PriceGateway, help to check the imported pair support or not\\n    /// @dev Custom price gateway is allowed, but need to implement priceGateway.sol and set by govern\\n    /// @param asset the asset token address, support ETH , WETH and other ERC20\\n    /// @param base the base token address, support ETH , WETH and other ERC20\\n    /// @return boolean Is support or not\\n    function isSupportedPair(address asset, address base)\\n        public\\n        virtual\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return canResolvePrice(asset) && canResolvePrice(base);\\n    }\\n\\n    /// @notice inherited from PriceGateway, to cal the asset price base on different token\\n    /// @dev For those outside contract , Please used this as the entry point\\n    /// @dev this Function will help to route the calculate to other cal function,\\n    /// @dev Please do not directly call the below cal function\\n    /// @param asset the asset token address, support ETH , WETH and other ERC20\\n    /// @param base the base token address, support ETH , WETH and other ERC20\\n    /// @param amount the amount of asset, in asset decimal\\n    /// @return uint256 the Asset Price in term of base token in base token decimal\\n    function assetPrice(\\n        address asset,\\n        address base,\\n        uint256 amount\\n    ) public view virtual override returns (uint256) {\\n        asset = asset == _WETH9() ? Denominations.ETH : asset;\\n        base = base == _WETH9() ? Denominations.ETH : base;\\n        // Feed Registry doesn't provide any WETH Price Feed, redirect to ETH case here\\n\\n        if (asset == base) return amount;\\n\\n        if (base == Denominations.USD) {\\n            return assetUSDPrice(asset, amount);\\n        }\\n\\n        if (asset == Denominations.USD) {\\n            return usdAssetPrice(base, amount);\\n        }\\n\\n        return derivedAssetPrice(asset, base, amount);\\n    }\\n\\n    /// @notice Get Asset Price in Term of USD\\n    /// @dev Get the rate in Chainlink and scale the Price to decimal 8\\n    /// @param asset the asset token address, support ETH , WETH and other ERC20\\n    /// @param amount Asset Amount in term of asset's decimal\\n    /// @return uint256 the Asset Price in term of USD with hardcoded decimal 8\\n    function assetUSDPrice(address asset, uint256 amount)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (asset == Denominations.USD) return amount;\\n        asset = asset == _WETH9() ? Denominations.ETH : asset;\\n\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            ,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        ) = FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(\\n                asset,\\n                Denominations.USD\\n            );\\n        uint8 priceDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY)\\n            .decimals(asset, Denominations.USD);\\n\\n\\n        require(answeredInRound >= roundID, \\\"Stale price in Chainlink\\\");\\n        require(\\n            block.timestamp <= updatedAt + Constant.STALE_PRICE_DELAY,\\n            \\\"Stale price in Chainlink 113\\\"\\n        );\\n\\n        price = scalePrice(\\n            price,\\n            priceDecimals,\\n            8 /* USD decimals */\\n        );\\n\\n        if (price > 0) {\\n            // return price with decimal = price Decimal (8) + amount decimal (Asset decimal) - Asset decimal = price decimal(8)\\n            return\\n                (uint256(price) * amount) /\\n                10**assetDecimals(asset);\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @notice Get USD Price in term of Asset\\n    /// @dev Get the rate in Chainlink and scale the Price to asset decimal\\n    /// @param asset the asset token address, support ETH , WETH and other ERC20, used as base token address\\n    /// @param usdAmount Usd Amount with 8 decimal (arbitrum)\\n    /// @return uint256 the price by using asset as base with assets decimal\\n    function usdAssetPrice(address asset, uint256 usdAmount)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (asset == Denominations.USD) return usdAmount;\\n        asset = asset == _WETH9() ? Denominations.ETH : asset;\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            ,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        ) = FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(\\n                asset,\\n                Denominations.USD\\n            );\\n        uint8 priceDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY)\\n            .decimals(asset, Denominations.USD);\\n\\n        require(answeredInRound >= roundID, \\\"Stale price in Chainlink\\\");\\n        require(\\n            block.timestamp <= updatedAt + Constant.STALE_PRICE_DELAY,\\n            \\\"Stale price in Chainlink 113\\\"\\n        );\\n\\n        price = scalePrice(\\n            price,\\n            priceDecimals,\\n            8 /* USD decimals */\\n        );\\n        if (price > 0) {\\n            // return price with decimal = 8 + asset Decimal - price Decimal (8) = asset Decimal\\n            return\\n                (usdAmount * (10**assetDecimals(asset))) /\\n                uint256(price);\\n        }\\n\\n        return 0;\\n    }\\n\\n    function derivedAssetPrice(\\n        address asset,\\n        address base,\\n        uint256 amount\\n    ) public view virtual returns (uint256) {\\n        int256 rate = getDerivedPrice(\\n            asset,\\n            base,\\n            18 /* ETH decimals */\\n        );\\n\\n        if (rate > 0) {\\n            return\\n                uint256(\\n                    scalePrice(\\n                        int256(rate) * int256(amount),\\n                        18 + assetDecimals(asset),\\n                        assetDecimals(base)\\n                    )\\n                );\\n        }\\n        return 0;\\n    }\\n\\n    function getDerivedPrice(\\n        address _base,\\n        address _quote,\\n        uint8 _decimals\\n    ) internal view virtual returns (int256) {\\n        require(\\n            _decimals > uint8(0) && _decimals <= uint8(18),\\n            \\\"Invalid _decimals\\\"\\n        );\\n        int256 decimals = int256(10**uint256(_decimals));\\n        (\\n            uint80 _baseRoundID,\\n            int256 basePrice,\\n            ,\\n            uint256 _baseUpdatedAt,\\n            uint80 _baseAnsweredInRound\\n        ) = FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(\\n                _base,\\n                Denominations.USD\\n            );\\n\\n        require(\\n            _baseAnsweredInRound >= _baseRoundID,\\n            \\\"Stale price in Chainlink 104\\\"\\n        );\\n        require(\\n            block.timestamp <= _baseUpdatedAt + Constant.STALE_PRICE_DELAY,\\n            \\\"Stale price in Chainlink 105\\\"\\n        );\\n\\n        uint8 baseDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY)\\n            .decimals(_base, Denominations.USD);\\n        basePrice = scalePrice(basePrice, baseDecimals, _decimals);\\n        (\\n            uint80 _quoteRoundID,\\n            int256 quotePrice,\\n            ,\\n            uint256 _quoteUpdatedAt,\\n            uint80 _quoteAnsweredInRound\\n        ) = FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(\\n                _quote,\\n                Denominations.USD\\n            );\\n        require(\\n            _quoteAnsweredInRound >= _quoteRoundID,\\n            \\\"Stale price in Chainlink 112\\\"\\n        );\\n        require(\\n            block.timestamp <= _quoteUpdatedAt + Constant.STALE_PRICE_DELAY,\\n            \\\"Stale price in Chainlink 113\\\"\\n        );\\n\\n        uint8 quoteDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY)\\n            .decimals(_quote, Denominations.USD);\\n        quotePrice = scalePrice(quotePrice, quoteDecimals, _decimals);\\n\\n        return (basePrice * decimals) / quotePrice;\\n    }\\n\\n    function scalePrice(\\n        int256 _price,\\n        uint8 _priceDecimals,\\n        uint8 _decimals\\n    ) internal pure virtual returns (int256) {\\n        \\n        if (_priceDecimals < _decimals) {\\n            return _price * int256(10**uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / int256(10**uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n    function canResolvePrice(address asset) internal view returns (bool) {\\n        if (asset == Denominations.USD) return true;\\n\\n        if (asset == _WETH9()) {\\n            // Feed Registry doesn't provide any WETH Price Feed, redirect to ETH case here\\n            asset = Denominations.ETH;\\n        }\\n\\n        try\\n            FeedRegistryInterface(Constant.FEED_REGISTRY).getFeed(\\n                asset,\\n                Denominations.USD\\n            )\\n        {\\n            return true;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    function assetDecimals(address asset) public view virtual returns (uint8) {\\n        if (asset == Denominations.ETH) return 18;\\n        if (asset == Denominations.USD) return 8;\\n        try IERC20Metadata(asset).decimals() returns (uint8 _decimals) {\\n            return _decimals;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function _WETH9() internal pure returns (address) {\\n        return Constant.WETH_ADDRESS;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x269efd9fddd00b5eaf2f2950576de64ba508cacc8b37a9f404a0fa0cb29f0da5\",\"license\":\"GPL-3.0\"},\"contracts/base/PriceGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nabstract contract PriceGateway {\\n    function isSupportedPair(address asset, address base)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {}\\n\\n    function assetPrice(\\n        address asset,\\n        address base,\\n        uint256 amount\\n    ) public view virtual returns (uint256) {}\\n \\n    function name() external virtual returns (string memory);\\n    \\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xdf2e6b5b18498ad3197cc3b2fdd8ed3d3613b6bd72c2a55096ca462a26185869\",\"license\":\"GPL-3.0\"},\"contracts/lib/Constant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Constant {\\n    address public constant WETH_ADDRESS = 0xCDa739D69067333974cD73A722aB92E5e0ad8a4F;\\n    address public constant UNISWAP_ROUTER = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n    address public constant FEED_REGISTRY = 0x33C3D797c37d1f0955f0Aa5C928d2354e0b98F3D;\\n    address public constant BRIDGE_CURRENCY = 0x0000000000000000000000000000000000000348;\\n    uint public constant BLOCK_NUMBER_IN_SECOND = 6;\\n    uint public constant STALE_PRICE_DELAY = 86400;\\n}\\n\",\"keccak256\":\"0x74ec5fcb725ae2063b70ebe9a558370b3cf3a09005dad6f66c99aefe7ec34789\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "assetPrice(address,address,uint256)": {
        "details": "For those outside contract , Please used this as the entry pointthis Function will help to route the calculate to other cal function,Please do not directly call the below cal function",
        "params": {
          "amount": "the amount of asset, in asset decimal",
          "asset": "the asset token address, support ETH , WETH and other ERC20",
          "base": "the base token address, support ETH , WETH and other ERC20"
        },
        "returns": {
          "_0": "uint256 the Asset Price in term of base token in base token decimal"
        }
      },
      "assetUSDPrice(address,uint256)": {
        "details": "Get the rate in Chainlink and scale the Price to decimal 8",
        "params": {
          "amount": "Asset Amount in term of asset's decimal",
          "asset": "the asset token address, support ETH , WETH and other ERC20"
        },
        "returns": {
          "_0": "uint256 the Asset Price in term of USD with hardcoded decimal 8"
        }
      },
      "isSupportedPair(address,address)": {
        "details": "Custom price gateway is allowed, but need to implement priceGateway.sol and set by govern",
        "params": {
          "asset": "the asset token address, support ETH , WETH and other ERC20",
          "base": "the base token address, support ETH , WETH and other ERC20"
        },
        "returns": {
          "_0": "boolean Is support or not"
        }
      },
      "usdAssetPrice(address,uint256)": {
        "details": "Get the rate in Chainlink and scale the Price to asset decimal",
        "params": {
          "asset": "the asset token address, support ETH , WETH and other ERC20, used as base token address",
          "usdAmount": "Usd Amount with 8 decimal (arbitrum)"
        },
        "returns": {
          "_0": "uint256 the price by using asset as base with assets decimal"
        }
      }
    },
    "stateVariables": {
      "name": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetPrice(address,address,uint256)": {
        "notice": "inherited from PriceGateway, to cal the asset price base on different token"
      },
      "assetUSDPrice(address,uint256)": {
        "notice": "Get Asset Price in Term of USD"
      },
      "isSupportedPair(address,address)": {
        "notice": "inherited from PriceGateway, help to check the imported pair support or not"
      },
      "usdAssetPrice(address,uint256)": {
        "notice": "Get USD Price in term of Asset"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3115,
        "contract": "contracts/ArbitrumChainlinkPriceGateway.sol:ArbitrumChainlinkPriceGateway",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3118,
        "contract": "contracts/ArbitrumChainlinkPriceGateway.sol:ArbitrumChainlinkPriceGateway",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18321,
        "contract": "contracts/ArbitrumChainlinkPriceGateway.sol:ArbitrumChainlinkPriceGateway",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11071,
        "contract": "contracts/ArbitrumChainlinkPriceGateway.sol:ArbitrumChainlinkPriceGateway",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}