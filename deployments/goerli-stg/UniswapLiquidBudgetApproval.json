{
  "address": "0xa4DA4f285299d646F213d4a5198D5BE3c4b0FF20",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AllowAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AllowAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AllowToToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AllowToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "ApproveTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum CommonBudgetApproval.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreateTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "ExecuteTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecuteUniswapInTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecuteUniswapOutTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecuteWETH9Transaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RevokeTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "SetApprover",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RECIPIENT_EXECUTEE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECIPIENT_UNISWAP_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH9",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "afterInitialized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowAllToTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowAnyAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowUnlimitedUsageCount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "approveTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approverTeamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        }
      ],
      "name": "approversMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetBaseCurrencyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetEthPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrencyDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "canResolvePrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_isExecute",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "createTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rawData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "decodeUniswapMulticall",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData[]",
          "name": "multicalData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "decodeWETH9Call",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "ethAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IV3SwapRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IV3SwapRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IV3SwapRouter.ExactOutputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutput",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IV3SwapRouter.ExactOutputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutputSingle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeParams",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executorTeamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fromTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fromTokensMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executorTeamId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "approvers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "approverTeamId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minApproval",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "text",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "transactionType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "allowUnlimitedUsageCount",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "usageCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "team",
              "type": "address"
            }
          ],
          "internalType": "struct CommonBudgetApproval.InitializeParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_fromTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_allowAllToTokens",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_toTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_allowAnyAmount",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_amountPercentage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_baseCurrency",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minApproval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "revokeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "selfPermit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweepToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "team",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "toTokensMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum CommonBudgetApproval.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "approvedCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrapWETH9",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usageCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9cad7ba2044fcd1d67ce84a0d199ef7ece5d5ef3ca498e0396baed857e9b661",
  "receipt": {
    "to": null,
    "from": "0x2d61d2ea8c296305C4AF461f12a172cF1d0af599",
    "contractAddress": "0xa4DA4f285299d646F213d4a5198D5BE3c4b0FF20",
    "transactionIndex": 91,
    "gasUsed": "5087195",
    "logsBloom": "0x
    "blockHash": "0xf4dc815d97734197b81ed9bc205e820404792ef5146e7342f74b2e0459ba7b30",
    "transactionHash": "0xc9cad7ba2044fcd1d67ce84a0d199ef7ece5d5ef3ca498e0396baed857e9b661",
    "logs": [
      {
        "transactionIndex": 91,
        "blockNumber": 7892931,
        "transactionHash": "0xc9cad7ba2044fcd1d67ce84a0d199ef7ece5d5ef3ca498e0396baed857e9b661",
        "address": "0xa4DA4f285299d646F213d4a5198D5BE3c4b0FF20",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 156,
        "blockHash": "0xf4dc815d97734197b81ed9bc205e820404792ef5146e7342f74b2e0459ba7b30"
      }
    ],
    "blockNumber": 7892931,
    "cumulativeGasUsed": "27452825",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4b98e5055db14f8560fc91c3aa0c12de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AllowAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AllowAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AllowToToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AllowToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"ApproveTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CommonBudgetApproval.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecuteUniswapInTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecuteUniswapOutTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecuteWETH9Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RevokeTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"SetApprover\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RECIPIENT_EXECUTEE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECIPIENT_UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAllToTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAnyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowUnlimitedUsageCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"approveTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approverTeamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"}],\"name\":\"approversMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetBaseCurrencyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrencyDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"canResolvePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_isExecute\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"createTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rawData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"decodeUniswapMulticall\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData[]\",\"name\":\"multicalData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeWETH9Call\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ethAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeParams\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorTeamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fromTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTokensMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executorTeamId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"approvers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"approverTeamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minApproval\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transactionType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowUnlimitedUsageCount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usageCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"internalType\":\"struct CommonBudgetApproval.InitializeParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_fromTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowAllToTokens\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_toTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowAnyAmount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_amountPercentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_baseCurrency\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"revokeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTokensMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum CommonBudgetApproval.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"approvedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetBaseCurrencyPrice(address,uint256)\":{\"notice\":\"This function is imported by other contract, thus cannot be external\"},\"canResolvePrice(address)\":{\"notice\":\"This function is imported by other contract, thus cannot be external\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapLiquidBudgetApproval.sol\":\"UniswapLiquidBudgetApproval\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(address base, address quote) external view returns (uint8);\\n\\n  function description(address base, address quote) external view returns (string memory);\\n\\n  function version(address base, address quote) external view returns (uint256);\\n\\n  function latestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (int256 answer);\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (uint256 timestamp);\\n\\n  // Registry getters\\n\\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (Phase memory phase);\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 previousRoundId);\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 nextRoundId);\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(address base, address quote)\\n    external\\n    view\\n    returns (AggregatorV2V3Interface proposedAggregator);\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\",\"keccak256\":\"0xa783cf3434bd5b5153fe876c37d5d5cb78d4e198f01f184b60ed3392401ddc0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@uniswap/swap-router-contracts/contracts/interfaces/IV3SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniswapLiquidBudgetApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./base/CommonBudgetApproval.sol\\\";\\nimport \\\"./lib/BytesLib.sol\\\";\\nimport \\\"./dex/UniswapSwapper.sol\\\";\\nimport \\\"./lib/Constant.sol\\\";\\n\\nimport \\\"./base/PriceResolver.sol\\\";\\nimport \\\"./interface/IBudgetApprovalExecutee.sol\\\";\\n\\ncontract UniswapLiquidBudgetApproval is CommonBudgetApproval, UniswapSwapper, PriceResolver {\\n\\n    using BytesLib for bytes;\\n\\n    event AllowToToken(address token);\\n    event ExecuteUniswapInTransaction(uint256 indexed id, address indexed executor, address indexed toAddress, address token, uint256 amount);\\n    event ExecuteUniswapOutTransaction(uint256 indexed id, address indexed executor, address indexed toAddress, address token, uint256 amount);\\n    event ExecuteWETH9Transaction(uint256 indexed id, address indexed executor, address indexed toAddress, address tokenIn, address tokenOut, uint256 amount);\\n\\n    string public constant override name = \\\"Uniswap Liquid Budget Approval\\\";\\n\\n    address[] public fromTokens;\\n    mapping(address => bool) public fromTokensMapping;\\n    bool public allowAnyAmount;\\n    uint256 public totalAmount;\\n    uint8 public amountPercentage;\\n    bool public allowAllToTokens;\\n    mapping(address => bool) public toTokensMapping;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _tokenInAmountOfTransaction;\\n    mapping(uint256 => address[]) private _tokenInOfTransaction;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n      _disableInitializers();\\n    }\\n\\n    function initialize(\\n        InitializeParams calldata params,\\n        address[] memory _fromTokens,\\n        bool _allowAllToTokens,\\n        address[] calldata _toTokens,\\n        bool _allowAnyAmount,\\n        uint256 _totalAmount,\\n        uint8 _amountPercentage,\\n        address _baseCurrency\\n    ) external initializer {\\n        __BudgetApproval_init(params);\\n        \\n        for(uint i = 0; i < _fromTokens.length; i++) {\\n            _addFromToken(_fromTokens[i]);\\n        }\\n\\n        allowAllToTokens = _allowAllToTokens;\\n        for(uint i = 0; i < _toTokens.length; i++) {\\n            _addToToken(_toTokens[i]);\\n        }\\n\\n        allowAnyAmount = _allowAnyAmount;\\n        totalAmount = _totalAmount;\\n        amountPercentage = _amountPercentage;\\n\\n        __PriceResolver_init(_baseCurrency);\\n\\n    }\\n\\n    function afterInitialized() external override onlyExecutee {\\n        bytes memory data = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", Constant.UNISWAP_ROUTER, type(uint256).max);\\n        address _executee = executee();\\n        uint _fromTokenLength = fromTokens.length;\\n\\n        for(uint i = 0; i < _fromTokenLength; i++) {\\n            address _fromToken = fromTokens[i];\\n\\n            if(_fromToken != Denominations.ETH) {\\n                IBudgetApprovalExecutee(_executee).executeByBudgetApproval(_fromToken, data, 0);\\n            }\\n        }\\n    }\\n\\n    function executeParams() external pure override returns (string[] memory) {\\n        string[] memory arr = new string[](3);\\n        arr[0] = \\\"address to\\\";\\n        arr[1] = \\\"bytes data\\\";\\n        arr[2] = \\\"uint256 value\\\";\\n        return arr;\\n    }\\n\\n    function _execute(\\n        uint256 transactionId, \\n        bytes memory data\\n    ) internal override {\\n        (address to, bytes memory executeData, uint256 value) = abi.decode(data,(address, bytes, uint256));\\n        \\n        if (to == Constant.UNISWAP_ROUTER) {\\n            _executeUniswapCall(transactionId, to, executeData, value);\\n        } else if (to == WETH9()) {\\n            _executeWETH9Call(transactionId, to, executeData, value);\\n        } else {\\n            revert(\\\"Invalid target address\\\");\\n        }\\n    }\\n\\n    function _executeUniswapCall(uint256 transactionId, address to, bytes memory executeData, uint256 value) private {\\n        uint256 priceBefore = _fromTokensPrice();\\n        address __executee = executee();\\n\\n        bytes memory response = IBudgetApprovalExecutee(__executee).executeByBudgetApproval(to, executeData, value);\\n        MulticallData[] memory mDataArr = this.decodeUniswapMulticall(executeData, value, response);\\n\\n        address[] storage _tokenIn = _tokenInOfTransaction[transactionId];\\n        mapping(address => uint256) storage _tokenInAmountMapping = _tokenInAmountOfTransaction[transactionId];\\n\\n        for (uint i = 0; i < mDataArr.length; i++) {\\n            MulticallData memory mData = mDataArr[i];\\n\\n            require(mData.recipient == address(0) || \\n                mData.recipient == RECIPIENT_EXECUTEE || \\n                mData.recipient == RECIPIENT_UNISWAP_ROUTER || \\n                mData.recipient == __executee, \\\"Recipient not whitelisted\\\");\\n\\n            uint256 _tokenInAmount = _tokenInAmountMapping[mData.tokenIn];\\n\\n            if (mData.amountIn > 0) {\\n                require(fromTokensMapping[mData.tokenIn], \\\"Source token not whitelisted\\\");\\n\\n                if (_tokenInAmount == 0) {\\n                    _tokenIn.push(mData.tokenIn);\\n                }\\n                _tokenInAmountMapping[mData.tokenIn] = _tokenInAmount + mData.amountIn;\\n\\n                emit ExecuteUniswapInTransaction(transactionId, msg.sender, Constant.UNISWAP_ROUTER, mData.tokenIn, mData.amountIn);\\n            }\\n\\n            if (mData.amountOut > 0 && (mData.recipient == RECIPIENT_EXECUTEE || mData.recipient == __executee)) {\\n                require(allowAllToTokens || toTokensMapping[mData.tokenOut], \\\"Target token not whitelisted\\\");\\n\\n                emit ExecuteUniswapOutTransaction(transactionId, msg.sender, Constant.UNISWAP_ROUTER, mData.tokenOut, mData.amountOut);\\n            }\\n        }\\n\\n        bool _allowAnyAmount = allowAnyAmount;\\n        uint256 _totalAmount = totalAmount;\\n\\n        if (!_allowAnyAmount || amountPercentage < 100) {\\n            uint256 amountInPrice;\\n            uint _tokenInLength = _tokenIn.length;\\n\\n            for (uint i = 0; i < _tokenInLength; i++) {\\n                address tokenIn = _tokenIn[i];\\n                amountInPrice += assetBaseCurrencyPrice(tokenIn, _tokenInAmountMapping[tokenIn]);\\n            }\\n            require(amountInPrice > 0 , \\\"Swap amount should not be zero\\\");\\n            require(_allowAnyAmount || amountInPrice <= _totalAmount, \\\"Exceeded max amount\\\");\\n            require(_checkAmountPercentageValid(priceBefore, amountInPrice), \\\"Exceeded percentage\\\");     \\n                        \\n            if(!allowAnyAmount) {\\n                totalAmount = _totalAmount - amountInPrice;\\n            }           \\n        }\\n\\n    }\\n\\n    function _executeWETH9Call(uint256 transactionId, address to, bytes memory executeData, uint256 value) private {\\n        uint256 priceBefore = _fromTokensPrice();\\n        bool _allowAnyAmount = allowAnyAmount;\\n        uint256 _totalAmount = totalAmount;\\n\\n        IBudgetApprovalExecutee(executee()).executeByBudgetApproval(to, executeData, value);\\n        (\\n            address tokenIn,\\n            address tokenOut,\\n            uint256 amount\\n        ) = this.decodeWETH9Call(executeData, value);\\n\\n        uint256 amountInPrice = assetBaseCurrencyPrice(tokenIn, amount);\\n        require(fromTokensMapping[tokenIn], \\\"Source token not whitelisted\\\");\\n        require(allowAllToTokens || toTokensMapping[tokenOut], \\\"Target token not whitelisted\\\");\\n        require(amountInPrice > 0 , \\\"Transfer amount should not be zero\\\");\\n        require(_allowAnyAmount || amountInPrice <= _totalAmount, \\\"Exceeded max amount\\\");\\n        require(_checkAmountPercentageValid(priceBefore, amountInPrice), \\\"Exceeded percentage\\\");\\n        \\n        if(!_allowAnyAmount) {\\n            totalAmount = _totalAmount - amountInPrice;\\n        }\\n\\n        emit ExecuteWETH9Transaction(transactionId, msg.sender, WETH9(), tokenIn, tokenOut, amount);\\n    }\\n\\n    function _fromTokensPrice() private view returns (uint256 totalBalance) {\\n        uint _fromTokenLength = fromTokens.length;\\n        address _executee = executee();\\n\\n        for (uint i = 0; i < _fromTokenLength; i++) {\\n            address _fromToken = fromTokens[i];\\n            if (_fromToken == Denominations.ETH) {\\n                totalBalance += assetBaseCurrencyPrice(Denominations.ETH, _executee.balance);\\n            } else {\\n                totalBalance += assetBaseCurrencyPrice(_fromToken, IERC20(_fromToken).balanceOf(_executee));\\n            }\\n        }\\n    }\\n\\n    function _checkAmountPercentageValid(uint256 totalBalance, uint256 amount) private view returns (bool) {\\n        uint8 _amountPercentage = amountPercentage;\\n\\n        if (_amountPercentage == 100) return true;\\n\\n        if (totalBalance == 0) return false;\\n\\n        return amount <= totalBalance * _amountPercentage / 100;\\n    }\\n\\n    function _addFromToken(address token) private {\\n        require(!fromTokensMapping[token], \\\"Duplicated token\\\");\\n        require(canResolvePrice(token), \\\"Unresolvable token\\\");\\n        fromTokens.push(token);\\n        fromTokensMapping[token] = true;\\n        emit AllowToken(token);\\n    }\\n\\n    function _addToToken(address token) private {\\n        require(!toTokensMapping[token], \\\"Duplicated token\\\");\\n        toTokensMapping[token] = true;\\n        emit AllowToToken(token);\\n    }\\n\\n}\",\"keccak256\":\"0x634f22f603bfab61a22a1f9a065c70723da87d6ea7111ef81c5fdee77b2f6a81\",\"license\":\"GPL-3.0\"},\"contracts/base/CommonBudgetApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"../lib/BytesLib.sol\\\";\\n\\nimport \\\"../interface/ITeam.sol\\\";\\nimport \\\"../interface/IBudgetApprovalExecutee.sol\\\";\\n\\nabstract contract CommonBudgetApproval is Initializable {\\n\\n    using Counters for Counters.Counter;\\n    using BytesLib for bytes;\\n\\n    enum Status {\\n        Pending,\\n        Approved,\\n        Completed,\\n        Cancelled\\n    }\\n\\n    struct Transaction {\\n        uint256 id;\\n        bytes[] data;\\n        Status status;\\n        uint32 deadline;\\n        bool isExist;\\n        uint256 approvedCount;\\n        mapping(address => bool) approved;\\n    }\\n\\n    event CreateTransaction(uint256 indexed id, bytes[] data, uint256 deadline, Status status, string comment, address creator);\\n    event ApproveTransaction(uint256 indexed id, address approver, string comment);\\n    event ExecuteTransaction(uint256 indexed id, bytes[] data, address _executor);\\n    event RevokeTransaction(uint256 indexed id);\\n    event AllowAddress(address target);\\n    event AllowToken(address token);\\n    event AllowAmount(uint256 amount);\\n    event SetApprover(address approver);\\n\\n    Counters.Counter private _transactionIds;\\n\\n    mapping(uint256 => Transaction) public transactions;\\n\\n    address private _executor;\\n    uint256 private _executorTeamId;\\n    address private _executee; // Must be BudgetApprovalExecutee\\n\\n    mapping(address => bool) private _approversMapping;\\n    uint256 private _approverTeamId;\\n    uint256 private _minApproval;\\n\\n    string private _text;\\n    string private _transactionType;\\n\\n    bool private _allowUnlimitedUsageCount;\\n    uint256 private _usageCount;\\n\\n    uint256 private _startTime;\\n    uint256 private _endTime;\\n\\n    address private _team;\\n\\n    struct InitializeParams {\\n        address executor;\\n        uint256 executorTeamId;\\n        address[] approvers;\\n        uint256 approverTeamId;\\n        uint256 minApproval;\\n        string text;\\n        string transactionType;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool allowUnlimitedUsageCount;\\n        uint256 usageCount;\\n        address team; // TODO: Get team from IBudgetApprovalExecutee\\n    }\\n\\n    modifier onlyExecutee() {\\n        require(msg.sender == executee(), \\\"Executee not whitelisted in budget\\\");\\n        _;\\n    }\\n\\n    modifier matchStatus(uint256 id, Status status) {\\n        require(transactions[id].status == status, \\\"Transaction status invalid\\\");\\n        _;\\n    }\\n\\n    modifier checkTime(uint256 id) {\\n        require(block.timestamp <= transactions[id].deadline, \\\"Transaction expired\\\");\\n        require(block.timestamp >= startTime(), \\\"Budget usage period not started\\\");\\n\\n        uint256 __endtime = endTime();\\n        if (__endtime != 0) {\\n            require(block.timestamp < __endtime, \\\"Budget usage period has ended\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyApprover() {\\n        require(\\n          approversMapping(msg.sender) ||\\n          ITeam(team()).balanceOf(msg.sender, approverTeamId()) > 0, \\\"Approver not whitelisted in budget\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(msg.sender == executor() ||\\n          ITeam(team()).balanceOf(msg.sender, executorTeamId()) > 0, \\\"Executor not whitelisted in budget\\\"\\n        );\\n        _;\\n    }\\n\\n     /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n      _disableInitializers();\\n    }\\n\\n    function executor() public view returns (address) {\\n        return _executor;\\n    }\\n    function executorTeamId() public view returns (uint256) {\\n        return _executorTeamId;\\n    }\\n    function executee() public view returns (address) {\\n        return _executee;\\n    }\\n    function approversMapping(address eoa) public view returns (bool) {\\n        return _approversMapping[eoa];\\n    }\\n    function approverTeamId() public view returns (uint256) {\\n        return _approverTeamId;\\n    }\\n    function minApproval() public view returns (uint256) {\\n        return _minApproval;\\n    }\\n    function text() public view returns (string memory) {\\n        return _text;\\n    }\\n    function transactionType() public view returns (string memory) {\\n        return _transactionType;\\n    }\\n    function allowUnlimitedUsageCount() public view returns (bool) {\\n        return _allowUnlimitedUsageCount;\\n    }\\n    function usageCount() public view returns (uint256) {\\n        return _usageCount;\\n    }\\n    function startTime() public view returns (uint256) {\\n        return _startTime;\\n    }\\n    function endTime() public view returns (uint256) {\\n        return _endTime;\\n    }\\n    function team() public view returns (address) {\\n        return _team;\\n    }\\n\\n    function __BudgetApproval_init(\\n        InitializeParams calldata params\\n        ) internal onlyInitializing {\\n\\n        require(\\n          params.approverTeamId > 0 || (params.minApproval <= params.approvers.length),\\n          \\\"Invalid approver list\\\"\\n        );\\n\\n        _executee = msg.sender;\\n        _executor = params.executor;\\n        _text = params.text;\\n        _transactionType = params.transactionType;\\n\\n        _minApproval = params.minApproval;\\n        _startTime = params.startTime;\\n        _endTime = params.endTime;\\n\\n        _allowUnlimitedUsageCount = params.allowUnlimitedUsageCount;\\n        _usageCount = params.usageCount;\\n\\n        _team = params.team;\\n        _executorTeamId = params.executorTeamId;\\n        _approverTeamId = params.approverTeamId;\\n\\n        for (uint i = 0; i < params.approvers.length; i++) {\\n            _approversMapping[params.approvers[i]] = true;\\n            emit SetApprover(params.approvers[i]);\\n        }\\n    }\\n\\n    function afterInitialized() virtual external onlyExecutee {}\\n\\n    function executeTransaction(uint256 id) public matchStatus(id, Status.Approved) checkTime(id) onlyExecutor {\\n        bool unlimited = allowUnlimitedUsageCount();\\n        uint256 count = usageCount();\\n        bytes[] memory data = transactions[id].data;\\n\\n        for (uint i = 0; i < data.length; i++) {\\n            require(unlimited || count > 0, \\\"Exceeded budget usage limit\\\");\\n            if (!unlimited) {\\n                count--;\\n            }\\n            _execute(id, data[i]);\\n        }\\n\\n        _usageCount = count;\\n        transactions[id].status = Status.Completed;\\n        emit ExecuteTransaction(id, data, msg.sender);\\n    }\\n\\n    function createTransaction(bytes[] memory _data, uint32 _deadline, bool _isExecute, string calldata comment) external onlyExecutor returns (uint256) {\\n        _transactionIds.increment();\\n        uint256 id = _transactionIds.current();\\n\\n        // workaround when have mapping in Struct\\n        Transaction storage newTransaction = transactions[id];\\n        newTransaction.id = id;\\n        newTransaction.data = _data;\\n        newTransaction.deadline = _deadline;\\n        newTransaction.isExist = true;\\n\\n        if (minApproval() == 0) {\\n            transactions[id].status = Status.Approved;\\n        } else {\\n            transactions[id].status = Status.Pending;\\n        }\\n\\n        emit CreateTransaction(id, _data, _deadline,  newTransaction.status, comment, msg.sender);\\n\\n        if (_isExecute) {\\n            executeTransaction(id);\\n        }\\n        return id;\\n    }\\n\\n    function approveTransaction(uint256 id, string calldata comment) external onlyApprover {\\n        require(_transactionIds.current() >= id, \\\"Invaild TransactionId\\\");\\n\\n        Status _transactionStatus = transactions[id].status;\\n        uint256 _transactionApprovedCount = transactions[id].approvedCount + 1;\\n\\n        require(_transactionStatus == Status.Pending\\n            || _transactionStatus == Status.Approved,\\n            \\\"Unexpected transaction status\\\");\\n        require(!transactions[id].approved[msg.sender], \\\"Transaction has been approved before\\\");\\n\\n        transactions[id].approved[msg.sender] = true;\\n        transactions[id].approvedCount = _transactionApprovedCount;\\n\\n        if(_transactionApprovedCount >= minApproval()) {\\n            transactions[id].status = Status.Approved;\\n        }\\n\\n        emit ApproveTransaction(id, msg.sender, comment);\\n    }\\n\\n    function revokeTransaction(uint256 id) external onlyExecutor {\\n        require(_transactionIds.current() >= id, \\\"Invaild TransactionId\\\");\\n        require(transactions[id].status != Status.Completed, \\\"Transaction has been completed before\\\");\\n        transactions[id].status = Status.Cancelled;\\n\\n        emit RevokeTransaction(id);\\n    }\\n\\n    function _execute(uint256, bytes memory) internal virtual;\\n    function executeParams() external pure virtual returns (string[] memory);\\n    function name() external virtual returns (string memory);\\n\\n    uint256[50] private __gap;\\n\\n}\",\"keccak256\":\"0x38caab04ecb8918c6100c3b62f1514b2acf20ec5e1b5d5eff3341bb455169aec\",\"license\":\"GPL-3.0\"},\"contracts/base/PriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../lib/Constant.sol\\\";\\n\\ncontract PriceResolver is Initializable {\\n    address private _baseCurrency;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n      _disableInitializers();\\n    }\\n\\n    function __PriceResolver_init(address __baseCurrency) internal onlyInitializing {\\n        _baseCurrency = __baseCurrency;\\n    }\\n\\n    function baseCurrency() public view virtual returns (address) {\\n        return _baseCurrency;\\n    }\\n    function _WETH9() internal pure returns (address) {\\n        return Constant.WETH_ADDRESS;\\n    }\\n\\n    /// @notice This function is imported by other contract, thus cannot be external\\n    function assetBaseCurrencyPrice(address asset, uint256 amount) public view virtual returns (uint256) {\\n        address __baseCurrency = baseCurrency();\\n        if (asset == __baseCurrency)\\n            return amount;\\n        \\n        if(__baseCurrency == Denominations.ETH || __baseCurrency == _WETH9()) {\\n            return assetEthPrice(asset, amount);\\n        }\\n\\n        if(asset == Denominations.ETH || asset == _WETH9()) {\\n            return ethAssetPrice(__baseCurrency, amount);\\n        }\\n\\n        uint8 baseDecimals = baseCurrencyDecimals();\\n        int price = getDerivedPrice(asset, __baseCurrency, 18 /* ETH decimals */);\\n\\n        if (price > 0) {\\n            return uint256(scalePrice(int256(price) * int256(amount), 18 + IERC20Metadata(asset).decimals(), baseDecimals));\\n        }\\n        return 0;\\n    }\\n\\n    function ethAssetPrice(address asset, uint256 ethAmount) public view virtual returns (uint256) {\\n        if (asset == Denominations.ETH || asset == _WETH9())\\n            return ethAmount;\\n\\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = \\n        FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(asset, Denominations.ETH);\\n        uint8 priceDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY).decimals(asset, Denominations.ETH);\\n\\n        require(answeredInRound >= roundID, \\\"Stale price in Chainlink\\\");\\n        require(block.timestamp <= updatedAt + Constant.STALE_PRICE_DELAY, \\\"Stale price in Chainlink\\\");\\n\\n        price = scalePrice(price, priceDecimals, 18 /* ETH decimals */);\\n        if (price > 0) {\\n            return ethAmount * (10 ** IERC20Metadata(asset).decimals()) / uint256(price);\\n        }\\n\\n        return 0;\\n    }\\n\\n    function assetEthPrice(address asset, uint256 amount) public view virtual returns (uint256) {\\n        if (asset == Denominations.ETH || asset == _WETH9())\\n            return amount;\\n\\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = \\n        FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(asset, Denominations.ETH);\\n        uint8 priceDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY).decimals(asset, Denominations.ETH);\\n        \\n        require(answeredInRound >= roundID, \\\"Stale price in Chainlink\\\");\\n        require(block.timestamp <= updatedAt + Constant.STALE_PRICE_DELAY, \\\"Stale price in Chainlink\\\");\\n\\n        price = scalePrice(price, priceDecimals, 18 /* ETH decimals */);\\n\\n        if (price > 0) {\\n            return uint256(price) * amount / 10 ** IERC20Metadata(asset).decimals();\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getDerivedPrice(address _base, address _quote, uint8 _decimals)\\n        internal\\n        view\\n        virtual\\n        returns (int256)\\n    {\\n        require(_decimals > uint8(0) && _decimals <= uint8(18), \\\"Invalid _decimals\\\");\\n        int256 decimals = int256(10 ** uint256(_decimals));\\n        (uint80 _baseRoundID, int basePrice, , uint256 _baseUpdatedAt, uint80 _baseAnsweredInRound) = \\n            FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(_base, Denominations.ETH);\\n\\n        require(_baseAnsweredInRound >= _baseRoundID, \\\"Stale price in Chainlink 104\\\");\\n        require(block.timestamp <= _baseUpdatedAt + Constant.STALE_PRICE_DELAY, \\\"Stale price in Chainlink 105\\\");\\n\\n        uint8 baseDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY).decimals(_base, Denominations.ETH);\\n        basePrice = scalePrice(basePrice, baseDecimals, _decimals);\\n        (uint80 _quoteRoundID, int quotePrice, , uint256 _quoteUpdatedAt, uint80 _quoteAnsweredInRound) = \\n            FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(_quote, Denominations.ETH);\\n        require(_quoteAnsweredInRound >= _quoteRoundID, \\\"Stale price in Chainlink 112\\\");\\n        require(block.timestamp <= _quoteUpdatedAt + Constant.STALE_PRICE_DELAY, \\\"Stale price in Chainlink 113\\\");\\n\\n        uint8 quoteDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY).decimals(_quote, Denominations.ETH);\\n        quotePrice = scalePrice(quotePrice, quoteDecimals, _decimals);\\n\\n        return basePrice * decimals / quotePrice;\\n    }\\n\\n    function scalePrice(int256 _price, uint8 _priceDecimals, uint8 _decimals)\\n        internal\\n        pure\\n        virtual\\n        returns (int256)\\n    {\\n        if (_priceDecimals < _decimals) {\\n            return _price * int256(10 ** uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / int256(10 ** uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n    function baseCurrencyDecimals() public view virtual returns (uint8) {\\n        if (baseCurrency() == Denominations.ETH) return 18;\\n        try IERC20Metadata(baseCurrency()).decimals() returns (uint8 _decimals) {\\n            return _decimals;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is imported by other contract, thus cannot be external\\n    function canResolvePrice(address asset) public view virtual returns (bool) {\\n        if (asset == Denominations.ETH || asset == _WETH9())\\n            return true;\\n        try FeedRegistryInterface(Constant.FEED_REGISTRY).getFeed(asset, Denominations.ETH) {\\n            return true;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x74bb282c21803d8da5d9d3213f7fe08223548aebd61f577c9ba7a70b8268b6c6\",\"license\":\"GPL-3.0\"},\"contracts/dex/UniswapSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\nimport \\\"@uniswap/swap-router-contracts/contracts/interfaces/IV3SwapRouter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\n\\nimport \\\"../lib/BytesLib.sol\\\";\\nimport \\\"../lib/Constant.sol\\\";\\n\\ncontract UniswapSwapper is Initializable {\\n    using BytesLib for bytes;\\n\\n    address public constant RECIPIENT_EXECUTEE = address(1);\\n    address public constant RECIPIENT_UNISWAP_ROUTER = address(2);\\n\\n    enum MulticallResultAttribute { EMPTY, AMOUNT_IN, AMOUNT_OUT }\\n\\n    struct MulticallData {\\n        address recipient;\\n        address tokenIn;\\n        address tokenOut; \\n        uint256 amountIn; \\n        uint256 amountOut; \\n        MulticallResultAttribute resultType;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n      _disableInitializers();\\n    }\\n    \\n    function WETH9() public pure returns (address) {\\n        return Constant.WETH_ADDRESS;\\n    }\\n\\n    function decodeWETH9Call(bytes memory data, uint256 value) external pure returns(address tokenIn, address tokenOut, uint256 amount) {\\n        bytes4 funcSig = data.toBytes4(0);\\n        if (funcSig == bytes4(keccak256(\\\"deposit()\\\"))) {\\n            return (Denominations.ETH, WETH9(), value);\\n        } else if (funcSig == bytes4(keccak256(\\\"withdraw(uint256)\\\"))) {\\n            return (WETH9(), Denominations.ETH, abi.decode(data.slice(4, data.length - 4), (uint256)));\\n        }\\n\\n        revert(\\\"Failed to decode Uniswap bytecode\\\");\\n    }\\n\\n    function decodeUniswapMulticall(bytes memory rawData, uint256 value, bytes memory response) external view returns(MulticallData[] memory multicalData) {\\n        bytes[] memory executions = _decodeMulticall(rawData);\\n        bytes[] memory executionResults;\\n        uint256 remainEth = value;\\n\\n        multicalData = new MulticallData[](executions.length);\\n\\n        if (response.length != 0) {\\n            executionResults = abi.decode(response, (bytes[]));\\n        } \\n\\n        for (uint i = 0; i < executions.length; i++) {\\n            (bool success, bytes memory rawSwapData) = address(this).staticcall(executions[i]);\\n            require(success, \\\"fail to decode uniswap multicall\\\");\\n\\n            MulticallData memory swapData = abi.decode(rawSwapData, (MulticallData));\\n            \\n            if (swapData.tokenIn == WETH9() && remainEth != 0) {\\n                require(swapData.amountIn <= remainEth, \\\"fail to decode WETH swap data\\\");\\n                swapData.tokenIn = Denominations.ETH;\\n                remainEth -= swapData.amountIn;\\n            }\\n            if (executionResults.length != 0) {\\n                if (swapData.resultType == MulticallResultAttribute.AMOUNT_IN) {\\n                    swapData.amountIn = abi.decode(executionResults[i], (uint256));\\n                } else if (swapData.resultType == MulticallResultAttribute.AMOUNT_OUT) {\\n                    swapData.amountOut = abi.decode(executionResults[i], (uint256));\\n                }\\n            }\\n            multicalData[i] = swapData;\\n        }\\n\\n        require(remainEth == 0, \\\"passing too much ETH to uniswap\\\");\\n    }\\n\\n    function _decodeMulticall(bytes memory _data) internal pure returns (bytes[] memory executions) {\\n        bytes4 funcSig = _data.toBytes4(0);\\n        if (funcSig == bytes4(keccak256(\\\"multicall(uint256,bytes[])\\\"))) {\\n            (, executions) = abi.decode(_data.slice(4, _data.length - 4), (uint256, bytes[]));\\n        } else if (funcSig == bytes4(keccak256(\\\"multicall(bytes32,bytes[])\\\"))) {\\n            (, executions) = abi.decode(_data.slice(4, _data.length - 4), (bytes32, bytes[]));\\n        } else {\\n           revert(\\\"Failed to decode Uniswap multicall bytecode\\\");\\n        }\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V3SwapRouter.sol\\n    function exactOutputSingle(\\n        IV3SwapRouter.ExactOutputSingleParams calldata params\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: params.recipient,\\n            tokenIn: params.tokenIn,\\n            tokenOut: params.tokenOut,\\n            amountIn: params.amountInMaximum,\\n            amountOut: params.amountOut,\\n            resultType: MulticallResultAttribute.AMOUNT_IN\\n        });\\n    }\\n    // From Uniswap/swap-router-contracts/contracts/V3SwapRouter.sol\\n    function exactInputSingle(\\n        IV3SwapRouter.ExactInputSingleParams calldata params\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: params.recipient,\\n            tokenIn: params.tokenIn,\\n            tokenOut: params.tokenOut,\\n            amountIn: params.amountIn,\\n            amountOut: params.amountOutMinimum,\\n            resultType: MulticallResultAttribute.AMOUNT_OUT\\n        });\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V3SwapRouter.sol\\n    function exactOutput(\\n        IV3SwapRouter.ExactOutputParams calldata params\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: params.recipient,\\n            tokenIn: params.path.toAddress(0),\\n            tokenOut: params.path.toAddress(params.path.length - 20),\\n            amountIn: params.amountInMaximum,\\n            amountOut: params.amountOut, \\n            resultType: MulticallResultAttribute.AMOUNT_IN\\n        });\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V3SwapRouter.sol\\n    function exactInput(\\n        IV3SwapRouter.ExactInputParams calldata params\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: params.recipient,\\n            tokenIn: params.path.toAddress(0),\\n            tokenOut: params.path.toAddress(params.path.length - 20),\\n            amountIn: params.amountIn,\\n            amountOut: params.amountOutMinimum, \\n            resultType: MulticallResultAttribute.AMOUNT_OUT\\n        });\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V2SwapRouter.sol\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address recipient\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: recipient,\\n            tokenIn: path[0],\\n            tokenOut: path[path.length - 1],\\n            amountIn: amountInMax,\\n            amountOut: amountOut, \\n            resultType: MulticallResultAttribute.AMOUNT_IN\\n        });\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V2SwapRouter.sol\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address recipient\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: recipient,\\n            tokenIn: path[0],\\n            tokenOut: path[path.length - 1],\\n            amountIn: amountIn,\\n            amountOut: amountOutMin, \\n            resultType: MulticallResultAttribute.AMOUNT_OUT\\n        });\\n    }\\n\\n    function unwrapWETH9(\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: recipient,\\n            tokenIn: address(0),\\n            tokenOut: Denominations.ETH,\\n            amountIn: 0,\\n            amountOut: amountMinimum, \\n            resultType: MulticallResultAttribute.EMPTY\\n        });\\n    }\\n\\n    function refundETH() external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: address(0),\\n            tokenIn: address(0),\\n            tokenOut: address(0),\\n            amountIn: 0,\\n            amountOut: 0,\\n            resultType: MulticallResultAttribute.EMPTY\\n        });\\n    }\\n\\n    function selfPermit(\\n        address, uint256, uint256, uint8, bytes32, bytes32\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: address(0),\\n            tokenIn: address(0),\\n            tokenOut: address(0),\\n            amountIn: 0,\\n            amountOut: 0, \\n            resultType: MulticallResultAttribute.EMPTY\\n        });\\n    }\\n\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: recipient,\\n            tokenIn: address(0),\\n            tokenOut: token,\\n            amountIn: 0,\\n            amountOut: amountMinimum, \\n            resultType: MulticallResultAttribute.EMPTY\\n        });\\n    }\\n\\n    uint256[50] private __gap;\\n\\n}\",\"keccak256\":\"0x5732604009da6102f2c11bd84c8a767d3a2ec52cfb3a909cc4c15a3317fdbfab\",\"license\":\"GPL-3.0\"},\"contracts/interface/IBudgetApprovalExecutee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\ninterface IBudgetApprovalExecutee {\\n    function executeByBudgetApproval(address, bytes memory, uint256) external returns (bytes memory);\\n    function createBudgetApprovals(address[] calldata, bytes[] calldata) external;\\n    function team() external view returns (address);\\n}\",\"keccak256\":\"0xb8787fc908a922f0053195024ebfae3c447d6c09a30f13fb2c221c5bb9f3034d\",\"license\":\"GPL-3.0\"},\"contracts/interface/ITeam.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity 0.8.7;\\n\\ninterface ITeam {\\n    event AddMembers(uint256 tokenId, address[] members);\\n    event AddTeam(\\n        uint256 tokenId,\\n        address creator,\\n        address minter,\\n        string name,\\n        string description\\n    );\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n    event BeaconUpgraded(address indexed beacon);\\n    event EditInfo(string name, string description, uint256 tokenId);\\n    event Initialized(uint8 version);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event RemoveMembers(uint256 tokenId, address[] members);\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n    event URI(string value, uint256 indexed id);\\n    event Upgraded(address indexed implementation);\\n\\n    function addMembers(address[] memory members, uint256 tokenId) external;\\n\\n    function addTeam(\\n        string memory name,\\n        address minter,\\n        address[] memory members,\\n        string memory description\\n    ) external returns (uint256);\\n\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function creatorOf(uint256) external view returns (address);\\n\\n    function descriptionOf(uint256) external view returns (string memory);\\n\\n    function initialize() external;\\n\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function minterOf(uint256) external view returns (address);\\n\\n    function nameOf(uint256) external view returns (string memory);\\n\\n    function owner() external view returns (address);\\n\\n    function proxiableUUID() external view returns (bytes32);\\n\\n    function removeMembers(address[] memory members, uint256 tokenId) external;\\n\\n    function renounceOwnership() external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function setInfo(\\n        string memory name,\\n        string memory description,\\n        uint256 tokenId\\n    ) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function upgradeTo(address newImplementation) external;\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data)\\n        external\\n        payable;\\n\\n    function uri(uint256 _id) external view returns (string memory);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"AddMembers\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"creator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"minter\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"AddTeam\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousAdmin\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newAdmin\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AdminChanged\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"ApprovalForAll\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"beacon\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"BeaconUpgraded\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"EditInfo\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnershipTransferred\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"RemoveMembers\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"values\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"TransferBatch\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"TransferSingle\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"URI\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"implementation\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"Upgraded\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"addMembers\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"minter\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"addTeam\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"accounts\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"balanceOfBatch\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"creatorOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"descriptionOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"isApprovedForAll\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"minterOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"nameOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"owner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"proxiableUUID\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"removeMembers\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"renounceOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"safeBatchTransferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"safeTransferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setApprovalForAll\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInfo\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes4\\\",\\\"name\\\":\\\"interfaceId\\\",\\\"type\\\":\\\"bytes4\\\"}],\\\"name\\\":\\\"supportsInterface\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"transferOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newImplementation\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"upgradeTo\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newImplementation\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"upgradeToAndCall\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"uri\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\\n*/\\n\",\"keccak256\":\"0x0ad2d745782bfc7d9f072dccba01e0942607684232f3f4b3f5e81eb53624ddeb\",\"license\":\"GPL-3.0\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity 0.8.7;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes4(bytes memory _bytes, uint256 _start) internal pure returns (bytes4) {\\n        require(_bytes.length >= _start + 4, \\\"toBytes4_outOfBounds\\\");\\n        bytes4 tempBytes4;\\n\\n        assembly {\\n            tempBytes4 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes4;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\",\"keccak256\":\"0x2a8c053fd6fdc1a23ef9a50614500aa9b2438719725e6bd224d2fa090ecbea60\",\"license\":\"Unlicense\"},\"contracts/lib/Constant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Constant {\\n    address public constant WETH_ADDRESS = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6;\\n    address public constant UNISWAP_ROUTER = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n    address public constant FEED_REGISTRY = 0xaBC30D61D30f19de38897EBA18252868B3459664;\\n    uint public constant BLOCK_NUMBER_IN_SECOND = 13;\\n    uint public constant STALE_PRICE_DELAY = 86400;\\n}\\n\",\"keccak256\":\"0x7b3499ca0f09160aa429c1bd2285b0c253414dfcd8666ada7c021b1b921935b1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d65760003560e01c806378e9792511610182578063b49612ba116100e9578063de755e2f116100a2578063ee22610b1161007c578063ee22610b146106b6578063f3995c67146106c9578063f5c03852146106dc578063f961f79a146106ed57600080fd5b8063de755e2f14610693578063df2ab5bb1461069b578063e99dd444146106ae57600080fd5b8063b49612ba14610639578063b858183f1461064c578063bc9c5e901461065f578063c34c08e514610672578063cf26fec614610683578063d96c91961461068b57600080fd5b806392a85fde1161013b57806392a85fde1461056357806397c85a61146105745780639ace38c214610587578063a63cee6d146105e6578063a7d69bd214610609578063b18b32fb1461062c57600080fd5b806378e979251461050f5780637a5a0d13146105175780637af3b84e1461052a5780637cd47d931461053d578063850154371461054557806385f2aef21461055257600080fd5b8063472b43f3116102415780635aaaefad116101fa57806363d727dc116101d457806363d727dc146104ac5780636bdebe5e146104c6578063735631ad146104f2578063765b60321461050757600080fd5b80635aaaefad1461047b5780635ad325021461048e57806360d8bb221461049957600080fd5b8063472b43f3146103ea57806349404b7c146103fd5780634aa4a4fc146104105780634c41e0e31461043e5780635023b4df1461046057806350bd881f1461047357600080fd5b80631a39d8ef116102935780631a39d8ef146103895780631f1bd692146103925780633197cbb61461039a57806331a7bdd9146103a25780633814d251146103b757806342712a67146103d757600080fd5b806303ff90f6146102db57806304e45aaf146102f257806306fdde031461031257806309b813461461035b57806312210e8a1461036e57806314b893f914610376575b600080fd5b6008545b6040519081526020015b60405180910390f35b610305610300366004614ec7565b610726565b6040516102e99190615570565b61034e6040518060400160405280601e81526020017f556e6973776170204c69717569642042756467657420417070726f76616c000081525081565b6040516102e99190615499565b610305610369366004614e93565b6107b5565b61030561088f565b6102df610384366004614b8f565b6108cc565b6102df60aa5481565b61034e610ae7565b600e546102df565b6103aa610b79565b6040516102e99190615392565b6103ca6103c5366004614e0a565b610c77565b6040516102e991906153f4565b6103056103e5366004615086565b610fd5565b6103056103f8366004615086565b611089565b61030561040b36600461500b565b611135565b73b4fbf271143f4fbf7b91a5ded31805e42b2208d65b6040516001600160a01b0390911681526020016102e9565b60ab5461045090610100900460ff1681565b60405190151581526020016102e9565b61030561046e366004614ec7565b6111af565b600c546102df565b6102df610489366004614a91565b61123a565b600b5460ff16610450565b6102df6104a7366004614a91565b6114fb565b6104b46116a7565b60405160ff90911681526020016102e9565b6104506104d43660046149d8565b6001600160a01b031660009081526006602052604090205460ff1690565b610505610500366004614fd9565b611762565b005b610426600181565b600d546102df565b610426610525366004614fd9565b611958565b610505610538366004614ee3565b611982565b61034e611b6b565b60a9546104509060ff1681565b600f546001600160a01b0316610426565b6074546001600160a01b0316610426565b61050561058236600461503b565b611b7a565b6105d5610595366004614fd9565b600260208190526000918252604090912080549181015460039091015460ff8083169263ffffffff61010082041692650100000000009091049091169085565b6040516102e995949392919061557e565b6104506105f43660046149d8565b60a86020526000908152604090205460ff1681565b6104506106173660046149d8565b60ac6020526000908152604090205460ff1681565b60ab546104b49060ff1681565b6102df610647366004614a91565b611eaa565b61030561065a366004614e93565b612148565b61045061066d3660046149d8565b6121dc565b6003546001600160a01b0316610426565b610505612301565b6007546102df565b6004546102df565b6103056106a9366004614abd565b6124c5565b610426600281565b6105056106c4366004614fd9565b612532565b6103056106d7366004614aff565b6129ba565b6005546001600160a01b0316610426565b6107006106fb366004614dc6565b6129fd565b604080516001600160a01b039485168152939092166020840152908201526060016102e9565b61072e614483565b6040805160c081019091528061074a60808501606086016149d8565b6001600160a01b03168152602090810190610767908501856149d8565b6001600160a01b0316815260200183602001602081019061078891906149d8565b6001600160a01b031681526080840135602082015260a0840135604082015260600160025b905292915050565b6107bd614483565b6040518060c001604052808360200160208101906107db91906149d8565b6001600160a01b0316815260200161083560006107f886806155fd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293925050612b279050565b6001600160a01b03168152602001610867601461085286806155fd565b61085d9291506158db565b6107f886806155fd565b6001600160a01b031681526060808501356020830152604080860135908301520160016107ad565b610897614483565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a0820152919050565b60006108e06003546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806109a35750600061090e600f546001600160a01b031690565b6001600160a01b031662fdd58e3361092560045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a19190614ff2565b115b6109c85760405162461bcd60e51b81526004016109bf9061552e565b60405180910390fd5b6109d6600180546001019055565b60006109e160015490565b6000818152600260209081526040909120828155895192935091610a0d916001840191908b01906144b6565b506002810180546501000000000065ffffffffff001990911661010063ffffffff8b160265ff0000000000191617179055600854610a6757600082815260026020819052604090912001805460ff19166001179055610a82565b600082815260026020819052604090912001805460ff191690555b600281015460405183917f8a5186dbaf6f344b2837e11834be94edebb633f05034f422c6b1fe1595b4d0cc91610ac5918c918c9160ff16908b908b903390615337565b60405180910390a28515610adc57610adc82612532565b509695505050505050565b606060098054610af690615958565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2290615958565b8015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b5050505050905090565b6040805160038082526080820190925260609160009190816020015b6060815260200190600190039081610b955790505090506040518060400160405280600a8152602001696164647265737320746f60b01b81525081600081518110610be257610be26159ea565b60200260200101819052506040518060400160405280600a8152602001696279746573206461746160b01b81525081600181518110610c2357610c236159ea565b60200260200101819052506040518060400160405280600d81526020016c75696e743235362076616c756560981b81525081600281518110610c6757610c676159ea565b6020908102919091010152919050565b60606000610c8485612b8c565b90506060600085905082516001600160401b03811115610ca657610ca6615a00565b604051908082528060200260200182016040528015610cdf57816020015b610ccc614483565b815260200190600190039081610cc45790505b5093508451600014610d025784806020019051810190610cff9190614b5b565b91505b60005b8351811015610f7c57600080306001600160a01b0316868481518110610d2d57610d2d6159ea565b6020026020010151604051610d429190615275565b600060405180830381855afa9150503d8060008114610d7d576040519150601f19603f3d011682016040523d82523d6000602084013e610d82565b606091505b509150915081610dd45760405162461bcd60e51b815260206004820181905260248201527f6661696c20746f206465636f646520756e6973776170206d756c746963616c6c60448201526064016109bf565b600081806020019051810190610dea9190614fbd565b60208101519091506001600160a01b031673b4fbf271143f4fbf7b91a5ded31805e42b2208d6148015610e1c57508415155b15610e9b578481606001511115610e755760405162461bcd60e51b815260206004820152601d60248201527f6661696c20746f206465636f646520574554482073776170206461746100000060448201526064016109bf565b600080516020615a3b83398151915260208201526060810151610e9890866158db565b94505b855115610f485760018160a001516002811115610eba57610eba6159d4565b1415610ef757858481518110610ed257610ed26159ea565b6020026020010151806020019051810190610eed9190614ff2565b6060820152610f48565b60028160a001516002811115610f0f57610f0f6159d4565b1415610f4857858481518110610f2757610f276159ea565b6020026020010151806020019051810190610f429190614ff2565b60808201525b80888581518110610f5b57610f5b6159ea565b60200260200101819052505050508080610f749061598d565b915050610d05565b508015610fcb5760405162461bcd60e51b815260206004820152601f60248201527f70617373696e6720746f6f206d7563682045544820746f20756e69737761700060448201526064016109bf565b5050509392505050565b610fdd614483565b6040518060c00160405280836001600160a01b031681526020018585600081811061100a5761100a6159ea565b905060200201602081019061101f91906149d8565b6001600160a01b03168152602001858561103a6001826158db565b818110611049576110496159ea565b905060200201602081019061105e91906149d8565b6001600160a01b03168152602081018790526040810188905260600160015b90529695505050505050565b611091614483565b6040518060c00160405280836001600160a01b03168152602001858560008181106110be576110be6159ea565b90506020020160208101906110d391906149d8565b6001600160a01b0316815260200185856110ee6001826158db565b8181106110fd576110fd6159ea565b905060200201602081019061111291906149d8565b6001600160a01b031681526020810188905260408101879052606001600261107d565b61113d614483565b6040518060c00160405280836001600160a01b0316815260200160006001600160a01b03168152602001600080516020615a3b8339815191526001600160a01b0316815260200160008152602001848152602001600060028111156111a4576111a46159d4565b905290505b92915050565b6111b7614483565b6040805160c08101909152806111d360808501606086016149d8565b6001600160a01b031681526020908101906111f0908501856149d8565b6001600160a01b0316815260200183602001602081019061121191906149d8565b6001600160a01b0316815260a084013560208201526080840135604082015260600160016107ad565b60006001600160a01b038316600080516020615a3b833981519152148061127d57506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b156112895750806111a9565b60008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d88600080516020615a3b8339815191526040518363ffffffff1660e01b81526004016112df929190615291565b60a06040518083038186803b1580156112f757600080fd5b505afa15801561130b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f91906150f0565b945094505093509350600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a889600080516020615a3b8339815191526040518363ffffffff1660e01b815260040161138a929190615291565b60206040518083038186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113da9190615140565b9050846001600160501b0316826001600160501b0316101561140e5760405162461bcd60e51b81526004016109bf906154ac565b61141b62015180846156bd565b42111561143a5760405162461bcd60e51b81526004016109bf906154ac565b61144684826012612c78565b935060008413156114ed57876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561148a57600080fd5b505afa15801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c29190615140565b6114cd90600a61578b565b6114d788866158bc565b6114e19190615728565b955050505050506111a9565b506000979650505050505050565b6000806115106074546001600160a01b031690565b9050806001600160a01b0316846001600160a01b0316141561153557829150506111a9565b6001600160a01b038116600080516020615a3b833981519152148061157657506001600160a01b03811673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b1561158d57611585848461123a565b9150506111a9565b6001600160a01b038416600080516020615a3b83398151915214806115ce57506001600160a01b03841673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b156115dd576115858184611eaa565b60006115e76116a7565b905060006115f786846012612ce9565b9050600081131561169b5761169161160f8683615837565b876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561164857600080fd5b505afa15801561165c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116809190615140565b61168b9060126156d5565b84612c78565b93505050506111a9565b50600095945050505050565b6000600080516020615a3b8339815191526116ca6074546001600160a01b031690565b6001600160a01b031614156116df5750601290565b6074546001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561172357600080fd5b505afa925050508015611753575060408051601f3d908101601f1916820190925261175091810190615140565b60015b61175d5750600090565b919050565b6003546001600160a01b031633148061181f5750600061178a600f546001600160a01b031690565b6001600160a01b031662fdd58e336117a160045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b1580156117e557600080fd5b505afa1580156117f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181d9190614ff2565b115b61183b5760405162461bcd60e51b81526004016109bf9061552e565b8061184560015490565b101561188b5760405162461bcd60e51b8152602060048201526015602482015274125b9d985a5b1908151c985b9cd858dd1a5bdb9259605a1b60448201526064016109bf565b60026000828152600260208190526040909120015460ff1660038111156118b4576118b46159d4565b14156119105760405162461bcd60e51b815260206004820152602560248201527f5472616e73616374696f6e20686173206265656e20636f6d706c65746564206260448201526465666f726560d81b60648201526084016109bf565b6000818152600260208190526040808320909101805460ff191660031790555182917f92a917be073b79ab50f9d997e9514a5d101e052ce04228014947e7883a7c034691a250565b60a7818154811061196857600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff16158080156119a25750600054600160ff909116105b806119bc5750303b1580156119bc575060005460ff166001145b611a1f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109bf565b6000805460ff191660011790558015611a42576000805461ff0019166101001790555b611a4b8a6131af565b60005b8951811015611a8b57611a798a8281518110611a6c57611a6c6159ea565b6020026020010151613439565b80611a838161598d565b915050611a4e565b5060ab805461ff0019166101008a15150217905560005b86811015611aeb57611ad9888883818110611abf57611abf6159ea565b9050602002016020810190611ad491906149d8565b61357a565b80611ae38161598d565b915050611aa2565b5060a9805460ff199081168715151790915560aa85905560ab805490911660ff8516179055611b198261362a565b8015611b5f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b6060600a8054610af690615958565b3360009081526006602052604090205460ff1680611c3c57506000611ba7600f546001600160a01b031690565b6001600160a01b031662fdd58e33611bbe60075490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015611c0257600080fd5b505afa158015611c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3a9190614ff2565b115b611c935760405162461bcd60e51b815260206004820152602260248201527f417070726f766572206e6f742077686974656c697374656420696e2062756467604482015261195d60f21b60648201526084016109bf565b82611c9d60015490565b1015611ce35760405162461bcd60e51b8152602060048201526015602482015274125b9d985a5b1908151c985b9cd858dd1a5bdb9259605a1b60448201526064016109bf565b600083815260026020819052604082209081015460039091015460ff9091169190611d0f9060016156bd565b90506000826003811115611d2557611d256159d4565b1480611d4257506001826003811115611d4057611d406159d4565b145b611d8e5760405162461bcd60e51b815260206004820152601d60248201527f556e6578706563746564207472616e73616374696f6e2073746174757300000060448201526064016109bf565b600085815260026020908152604080832033845260040190915290205460ff1615611e075760405162461bcd60e51b8152602060048201526024808201527f5472616e73616374696f6e20686173206265656e20617070726f766564206265604482015263666f726560e01b60648201526084016109bf565b6000858152600260208181526040808420338552600481018352908420805460ff191660011790559288905252600301819055611e4360085490565b8110611e6757600085815260026020819052604090912001805460ff191660011790555b847f3399030f87676a97e30e211a48f9c46e2ff806d0b4cedf7100782f08c52902c9338686604051611e9b939291906152df565b60405180910390a25050505050565b60006001600160a01b038316600080516020615a3b8339815191521480611eed57506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15611ef95750806111a9565b60008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d88600080516020615a3b8339815191526040518363ffffffff1660e01b8152600401611f4f929190615291565b60a06040518083038186803b158015611f6757600080fd5b505afa158015611f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9f91906150f0565b945094505093509350600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a889600080516020615a3b8339815191526040518363ffffffff1660e01b8152600401611ffa929190615291565b60206040518083038186803b15801561201257600080fd5b505afa158015612026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204a9190615140565b9050846001600160501b0316826001600160501b0316101561207e5760405162461bcd60e51b81526004016109bf906154ac565b61208b62015180846156bd565b4211156120aa5760405162461bcd60e51b81526004016109bf906154ac565b6120b684826012612c78565b935060008413156114ed5783886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fb57600080fd5b505afa15801561210f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121339190615140565b61213e90600a61578b565b6114d790896158bc565b612150614483565b6040518060c0016040528083602001602081019061216e91906149d8565b6001600160a01b0316815260200161218b60006107f886806155fd565b6001600160a01b031681526020016121a8601461085286806155fd565b6001600160a01b0316815260200183604001358152602001836060013581526020016002808111156107ad576107ad6159d4565b60006001600160a01b038216600080516020615a3b833981519152148061221f57506001600160a01b03821673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b1561222c57506001919050565b60405163d2edb6dd60e01b815273abc30d61d30f19de38897eba18252868b34596649063d2edb6dd90612273908590600080516020615a3b83398151915290600401615291565b60206040518083038186803b15801561228b57600080fd5b505afa9250505080156122bb575060408051601f3d908101601f191682019092526122b891810190614e76565b60015b6122f8573d8080156122e9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ee565b606091505b5060009392505050565b50600192915050565b6005546001600160a01b031633146123665760405162461bcd60e51b815260206004820152602260248201527f4578656375746565206e6f742077686974656c697374656420696e2062756467604482015261195d60f21b60648201526084016109bf565b6040517368b3465833fb72a70ecdf485e0e4c7bd8665fc456024820152600019604482015260009060640160408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b179052905060006123d16005546001600160a01b031690565b60a75490915060005b818110156124bf57600060a782815481106123f7576123f76159ea565b6000918252602090912001546001600160a01b03169050600080516020615a3b83398151915281146124ac5760405163d3abc28b60e01b81526001600160a01b0385169063d3abc28b9061245490849089906000906004016152ab565b600060405180830381600087803b15801561246e57600080fd5b505af1158015612482573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124aa9190810190614d92565b505b50806124b78161598d565b9150506123da565b50505050565b6124cd614483565b6040518060c00160405280836001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b031681526020016000815260200184815260200160006002811115612526576125266159d4565b905290505b9392505050565b806001806000838152600260208190526040909120015460ff16600381111561255d5761255d6159d4565b146125aa5760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e2073746174757320696e76616c696400000000000060448201526064016109bf565b600083815260026020819052604090912001548390610100900463ffffffff1642111561260f5760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb88195e1c1a5c9959606a1b60448201526064016109bf565b600d544210156126615760405162461bcd60e51b815260206004820152601f60248201527f42756467657420757361676520706572696f64206e6f7420737461727465640060448201526064016109bf565b600061266c600e5490565b905080156126c3578042106126c35760405162461bcd60e51b815260206004820152601d60248201527f42756467657420757361676520706572696f642068617320656e64656400000060448201526064016109bf565b6003546001600160a01b0316331480612780575060006126eb600f546001600160a01b031690565b6001600160a01b031662fdd58e3361270260045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561274657600080fd5b505afa15801561275a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277e9190614ff2565b115b61279c5760405162461bcd60e51b81526004016109bf9061552e565b60006127aa600b5460ff1690565b905060006127b7600c5490565b9050600060026000898152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561289d57838290600052602060002001805461281090615958565b80601f016020809104026020016040519081016040528092919081815260200182805461283c90615958565b80156128895780601f1061285e57610100808354040283529160200191612889565b820191906000526020600020905b81548152906001019060200180831161286c57829003601f168201915b5050505050815260200190600101906127f1565b50505050905060005b815181101561294f5783806128bb5750600083115b6129075760405162461bcd60e51b815260206004820152601b60248201527f457863656564656420627564676574207573616765206c696d6974000000000060448201526064016109bf565b8361291a578261291681615941565b9350505b61293d89838381518110612930576129306159ea565b6020026020010151613673565b806129478161598d565b9150506128a6565b50600c82905560008881526002602081905260409091208101805460ff19166001830217905550877f9060adf413860c5ab6e376e0aa4269e49a13f0853edb1583fce8129d4c756d7982336040516129a892919061530d565b60405180910390a25050505050505050565b6129c2614483565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a0820152979650505050505050565b6000808080612a0c8682613742565b90506001600160e01b03198116630d0e30db60e41b1415612a5857600080516020615a3b83398151915273b4fbf271143f4fbf7b91a5ded31805e42b2208d68693509350935050612b20565b6001600160e01b03198116632e1a7d4d60e01b1415612ace5773b4fbf271143f4fbf7b91a5ded31805e42b2208d6600080516020615a3b833981519152612aaf6004808a51612aa791906158db565b8a919061379f565b806020019051810190612ac29190614ff2565b93509350935050612b20565b60405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f206465636f646520556e69737761702062797465636f646044820152606560f81b60648201526084016109bf565b9250925092565b6000612b348260146156bd565b83511015612b7c5760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016109bf565b500160200151600160601b900490565b60606000612b9a8382613742565b90506001600160e01b031981166316b9007760e21b1415612beb57612bcf6004808551612bc791906158db565b85919061379f565b806020019051810190612be29190614d4c565b9250612c729050565b6001600160e01b03198116631f0464d160e01b1415612c1657612bcf6004808551612bc791906158db565b60405162461bcd60e51b815260206004820152602b60248201527f4661696c656420746f206465636f646520556e6973776170206d756c7469636160448201526a6c6c2062797465636f646560a81b60648201526084016109bf565b50919050565b60008160ff168360ff161015612cb157612c9283836158f2565b612ca09060ff16600a61577f565b612caa9085615837565b905061252b565b8160ff168360ff161115612ce157612cc982846158f2565b612cd79060ff16600a61577f565b612caa90856156fa565b509192915050565b600060ff821615801590612d015750601260ff831611155b612d415760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964205f646563696d616c7360781b60448201526064016109bf565b6000612d5160ff8416600a61577f565b905060008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8a600080516020615a3b8339815191526040518363ffffffff1660e01b8152600401612da9929190615291565b60a06040518083038186803b158015612dc157600080fd5b505afa158015612dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df991906150f0565b945094505093509350836001600160501b0316816001600160501b03161015612e645760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b203130340000000060448201526064016109bf565b612e7162015180836156bd565b421115612ec05760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b203130350000000060448201526064016109bf565b604051630b1c5a7560e31b815260009073abc30d61d30f19de38897eba18252868b3459664906358e2d3a890612f0a908d90600080516020615a3b83398151915290600401615291565b60206040518083038186803b158015612f2257600080fd5b505afa158015612f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5a9190615140565b9050612f6784828a612c78565b935060008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8e600080516020615a3b8339815191526040518363ffffffff1660e01b8152600401612fbf929190615291565b60a06040518083038186803b158015612fd757600080fd5b505afa158015612feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300f91906150f0565b945094505093509350836001600160501b0316816001600160501b0316101561307a5760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b203131320000000060448201526064016109bf565b61308762015180836156bd565b4211156130d65760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b203131330000000060448201526064016109bf565b600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a88f600080516020615a3b8339815191526040518363ffffffff1660e01b8152600401613128929190615291565b60206040518083038186803b15801561314057600080fd5b505afa158015613154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131789190615140565b905061318584828f612c78565b9350836131928c8b615837565b61319c91906156fa565b9f9e505050505050505050505050505050565b600054610100900460ff166131d65760405162461bcd60e51b81526004016109bf906154e3565b6000816060013511806131fb57506131f160408201826155b4565b9050816080013511155b61323f5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908185c1c1c9bdd995c881b1a5cdd605a1b60448201526064016109bf565b600580546001600160a01b0319163317905561325e60208201826149d8565b600380546001600160a01b0319166001600160a01b039290921691909117905561328b60a08201826155fd565b61329791600991614513565b506132a560c08201826155fd565b6132b191600a91614513565b50608081013560085560e0810135600d55610100810135600e556132dd61014082016101208301614d31565b600b805460ff1916911515919091179055610140810135600c55613309610180820161016083016149d8565b600f80546001600160a01b0319166001600160a01b03929092169190911790556020810135600455606081013560075560005b61334960408301836155b4565b90508110156134355760016006600061336560408601866155b4565b85818110613375576133756159ea565b905060200201602081019061338a91906149d8565b6001600160a01b0316815260208101919091526040908101600020805460ff1916921515929092179091557f4664777dbfbcb27de0f602e1da5d5a259992cd7edf5b29192929c96e8fd50def906133e3908401846155b4565b838181106133f3576133f36159ea565b905060200201602081019061340891906149d8565b6040516001600160a01b03909116815260200160405180910390a18061342d8161598d565b91505061333c565b5050565b6001600160a01b038116600090815260a8602052604090205460ff16156134955760405162461bcd60e51b815260206004820152601060248201526f223ab83634b1b0ba32b2103a37b5b2b760811b60448201526064016109bf565b61349e816121dc565b6134df5760405162461bcd60e51b81526020600482015260126024820152712ab73932b9b7b63b30b13632903a37b5b2b760711b60448201526064016109bf565b60a7805460018082019092557fb68792697ed876af8b4858b316f5b54d81f6861191ad2950c1fde6c3dc7b3dea0180546001600160a01b0319166001600160a01b038416908117909155600081815260a86020908152604091829020805460ff1916909417909355519081527f14009112f2dcb15cad32dab6bf972d6d85286e4ae1178f27323ffe25359459e691015b60405180910390a150565b6001600160a01b038116600090815260ac602052604090205460ff16156135d65760405162461bcd60e51b815260206004820152601060248201526f223ab83634b1b0ba32b2103a37b5b2b760811b60448201526064016109bf565b6001600160a01b038116600081815260ac6020908152604091829020805460ff1916600117905590519182527f0df56a0b46d63ff03be79aa2e27aa9f7d6af565748bac8f4b41d6df16ba9f618910161356f565b600054610100900460ff166136515760405162461bcd60e51b81526004016109bf906154e3565b607480546001600160a01b0319166001600160a01b0392909216919091179055565b60008060008380602001905181019061368c91906149f5565b919450925090506001600160a01b0383167368b3465833fb72a70ecdf485e0e4c7bd8665fc4514156136c9576136c4858484846138ac565b61373b565b6001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d614156136fa576136c485848484613f58565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b60448201526064016109bf565b5050505050565b600061374f8260046156bd565b835110156137965760405162461bcd60e51b8152602060048201526014602482015273746f4279746573345f6f75744f66426f756e647360601b60448201526064016109bf565b50016020015190565b6060816137ad81601f6156bd565b10156137ec5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016109bf565b6137f682846156bd565b8451101561383a5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016109bf565b60608215801561385957604051915060008252602082016040526138a3565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561389257805183526020928301920161387a565b5050858452601f01601f1916604052505b50949350505050565b60006138b66142f4565b905060006138cc6005546001600160a01b031690565b90506000816001600160a01b031663d3abc28b8787876040518463ffffffff1660e01b8152600401613900939291906152ab565b600060405180830381600087803b15801561391a57600080fd5b505af115801561392e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139569190810190614d92565b604051633814d25160e01b81529091506000903090633814d2519061398390899089908790600401615464565b60006040518083038186803b15801561399b57600080fd5b505afa1580156139af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139d79190810190614c8f565b600089815260ae6020908152604080832060ad909252822092935091905b8351811015613da9576000848281518110613a1257613a126159ea565b6020026020010151905060006001600160a01b031681600001516001600160a01b03161480613a4b575080516001600160a01b03166001145b80613a60575080516001600160a01b03166002145b80613a805750866001600160a01b031681600001516001600160a01b0316145b613acc5760405162461bcd60e51b815260206004820152601960248201527f526563697069656e74206e6f742077686974656c69737465640000000000000060448201526064016109bf565b6020808201516001600160a01b03166000908152908490526040902054606082015115613c57576020808301516001600160a01b0316600090815260a8909152604090205460ff16613b605760405162461bcd60e51b815260206004820152601c60248201527f536f7572636520746f6b656e206e6f742077686974656c69737465640000000060448201526064016109bf565b80613b9d57602082810151865460018101885560008881529290922090910180546001600160a01b0319166001600160a01b039092169190911790555b6060820151613bac90826156bd565b84600084602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507368b3465833fb72a70ecdf485e0e4c7bd8665fc456001600160a01b0316336001600160a01b03168e7f6b2315dc82c675e98d173b73a035ea18b30fa040368177ae8dfa90d3cd5a127a85602001518660600151604051613c4e9291906001600160a01b03929092168252602082015260400190565b60405180910390a45b60008260800151118015613c94575081516001600160a01b031660011480613c945750876001600160a01b031682600001516001600160a01b0316145b15613d945760ab54610100900460ff1680613cc957506040808301516001600160a01b0316600090815260ac602052205460ff165b613d155760405162461bcd60e51b815260206004820152601c60248201527f54617267657420746f6b656e206e6f742077686974656c69737465640000000060448201526064016109bf565b7368b3465833fb72a70ecdf485e0e4c7bd8665fc456001600160a01b0316336001600160a01b03168e7ff10ffe9795dc198303bf64c2f1bfec7ed5256325dee3026154df4c82f43c54f085604001518660800151604051613d8b9291906001600160a01b03929092168252602082015260400190565b60405180910390a45b50508080613da19061598d565b9150506139f5565b5060a95460aa5460ff90911690811580613dca575060ab54606460ff909116105b15613f4a578354600090815b81811015613e44576000878281548110613df257613df26159ea565b60009182526020808320909101546001600160a01b031680835290899052604090912054909150613e249082906114fb565b613e2e90856156bd565b9350508080613e3c9061598d565b915050613dd6565b5060008211613e955760405162461bcd60e51b815260206004820152601e60248201527f5377617020616d6f756e742073686f756c64206e6f74206265207a65726f000060448201526064016109bf565b8380613ea15750828211155b613ee35760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b585e08185b5bdd5b9d606a1b60448201526064016109bf565b613eed8a83614434565b613f2f5760405162461bcd60e51b815260206004820152601360248201527245786365656465642070657263656e7461676560681b60448201526064016109bf565b60a95460ff16613f4757613f4382846158db565b60aa555b50505b505050505050505050505050565b6000613f626142f4565b60a95460aa5491925060ff1690613f816005546001600160a01b031690565b6001600160a01b031663d3abc28b8787876040518463ffffffff1660e01b8152600401613fb0939291906152ab565b600060405180830381600087803b158015613fca57600080fd5b505af1158015613fde573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140069190810190614d92565b50604051637cb0fbcd60e11b815260009081908190309063f961f79a90614033908b908b90600401615442565b60606040518083038186803b15801561404b57600080fd5b505afa15801561405f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140839190614a4e565b925092509250600061409584836114fb565b6001600160a01b038516600090815260a8602052604090205490915060ff166141005760405162461bcd60e51b815260206004820152601c60248201527f536f7572636520746f6b656e206e6f742077686974656c69737465640000000060448201526064016109bf565b60ab54610100900460ff168061412e57506001600160a01b038316600090815260ac602052604090205460ff165b61417a5760405162461bcd60e51b815260206004820152601c60248201527f54617267657420746f6b656e206e6f742077686974656c69737465640000000060448201526064016109bf565b600081116141d55760405162461bcd60e51b815260206004820152602260248201527f5472616e7366657220616d6f756e742073686f756c64206e6f74206265207a65604482015261726f60f01b60648201526084016109bf565b85806141e15750848111155b6142235760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b585e08185b5bdd5b9d606a1b60448201526064016109bf565b61422d8782614434565b61426f5760405162461bcd60e51b815260206004820152601360248201527245786365656465642070657263656e7461676560681b60448201526064016109bf565b856142825761427e81866158db565b60aa555b604080516001600160a01b03868116825285166020820152808201849052905173b4fbf271143f4fbf7b91a5ded31805e42b2208d69133918e917ff2600da0d3c22c74870d03f19fbe7663ec5f72616966e884f806a2d44ee7d644919081900360600190a45050505050505050505050565b60a7546000908161430d6005546001600160a01b031690565b905060005b8281101561442e57600060a7828154811061432f5761432f6159ea565b6000918252602090912001546001600160a01b03169050600080516020615a3b83398151915281141561438f5761437e600080516020615a3b833981519152846001600160a01b0316316114fb565b61438890866156bd565b945061441b565b6040516370a0823160e01b81526001600160a01b03848116600483015261440e9183918216906370a082319060240160206040518083038186803b1580156143d657600080fd5b505afa1580156143ea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a79190614ff2565b61441890866156bd565b94505b50806144268161598d565b915050614312565b50505090565b60ab5460009060ff1660648114156144505760019150506111a9565b8361445f5760009150506111a9565b606461446e60ff8316866158bc565b6144789190615728565b909211159392505050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b828054828255906000526020600020908101928215614503579160200282015b8281111561450357825180516144f3918491602090910190614593565b50916020019190600101906144d6565b5061450f929150614607565b5090565b82805461451f90615958565b90600052602060002090601f0160209004810192826145415760008555614587565b82601f1061455a5782800160ff19823516178555614587565b82800160010185558215614587579182015b8281111561458757823582559160200191906001019061456c565b5061450f929150614624565b82805461459f90615958565b90600052602060002090601f0160209004810192826145c15760008555614587565b82601f106145da57805160ff1916838001178555614587565b82800160010185558215614587579182015b828111156145875782518255916020019190600101906145ec565b8082111561450f57600061461b8282614639565b50600101614607565b5b8082111561450f5760008155600101614625565b50805461464590615958565b6000825580601f10614655575050565b601f0160209004906000526020600020908101906146739190614624565b50565b803561175d81615a16565b60008083601f84011261469357600080fd5b5081356001600160401b038111156146aa57600080fd5b6020830191508360208260051b85010111156146c557600080fd5b9250929050565b600082601f8301126146dd57600080fd5b813560206146f26146ed83615673565b615643565b80838252828201915082860187848660051b890101111561471257600080fd5b60005b8581101561473a57813561472881615a16565b84529284019290840190600101614715565b5090979650505050505050565b600082601f83011261475857600080fd5b815160206147686146ed83615673565b80838252828201915082860187848660051b890101111561478857600080fd5b6000805b868110156147ca5782516001600160401b038111156147a9578283fd5b6147b78b88838d0101614839565b865250938501939185019160010161478c565b509198975050505050505050565b8035801515811461175d57600080fd5b600082601f8301126147f957600080fd5b81356148076146ed82615696565b81815284602083860101111561481c57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261484a57600080fd5b81516148586146ed82615696565b81815284602083860101111561486d57600080fd5b61487e826020830160208701615915565b949350505050565b60008083601f84011261489857600080fd5b5081356001600160401b038111156148af57600080fd5b6020830191508360208285010111156146c557600080fd5b600060808284031215612c7257600080fd5b600060e08284031215612c7257600080fd5b60006101808284031215612c7257600080fd5b600060c0828403121561491057600080fd5b60405160c081018181106001600160401b038211171561493257614932615a00565b8060405250809150825161494581615a16565b8152602083015161495581615a16565b6020820152604083015161496881615a16565b80604083015250606083015160608201526080830151608082015260a08301516003811061499557600080fd5b60a0919091015292915050565b803563ffffffff8116811461175d57600080fd5b803561175d81615a2b565b80516001600160501b038116811461175d57600080fd5b6000602082840312156149ea57600080fd5b813561252b81615a16565b600080600060608486031215614a0a57600080fd5b8351614a1581615a16565b60208501519093506001600160401b03811115614a3157600080fd5b614a3d86828701614839565b925050604084015190509250925092565b600080600060608486031215614a6357600080fd5b8351614a6e81615a16565b6020850151909350614a7f81615a16565b80925050604084015190509250925092565b60008060408385031215614aa457600080fd5b8235614aaf81615a16565b946020939093013593505050565b600080600060608486031215614ad257600080fd5b8335614add81615a16565b9250602084013591506040840135614af481615a16565b809150509250925092565b60008060008060008060c08789031215614b1857600080fd5b8635614b2381615a16565b955060208701359450604087013593506060870135614b4181615a2b565b9598949750929560808101359460a0909101359350915050565b600060208284031215614b6d57600080fd5b81516001600160401b03811115614b8357600080fd5b61487e84828501614747565b600080600080600060808688031215614ba757600080fd5b6001600160401b038087351115614bbd57600080fd5b8635870188601f820112614bd057600080fd5b80356020614be06146ed83615673565b8083825282820191508285018d848660051b8801011115614c0057600080fd5b60005b85811015614c3a578782351115614c1957600080fd5b614c288f8684358a01016147e8565b84529284019290840190600101614c03565b5050809a505050614c4c818b016149a2565b9750505050614c5d604088016147d8565b9350606087013581811115614c7157600080fd5b614c7d89828a01614886565b979a9699509497509395949350505050565b60006020808385031215614ca257600080fd5b82516001600160401b03811115614cb857600080fd5b8301601f81018513614cc957600080fd5b8051614cd76146ed82615673565b8181528381019083850160c0808502860187018a1015614cf657600080fd5b600095505b84861015614d2357614d0d8a836148fe565b8452600195909501949286019290810190614cfb565b509098975050505050505050565b600060208284031215614d4357600080fd5b61252b826147d8565b60008060408385031215614d5f57600080fd5b8251915060208301516001600160401b03811115614d7c57600080fd5b614d8885828601614747565b9150509250929050565b600060208284031215614da457600080fd5b81516001600160401b03811115614dba57600080fd5b61487e84828501614839565b60008060408385031215614dd957600080fd5b82356001600160401b03811115614def57600080fd5b614dfb858286016147e8565b95602094909401359450505050565b600080600060608486031215614e1f57600080fd5b83356001600160401b0380821115614e3657600080fd5b614e42878388016147e8565b9450602086013593506040860135915080821115614e5f57600080fd5b50614e6c868287016147e8565b9150509250925092565b600060208284031215614e8857600080fd5b815161252b81615a16565b600060208284031215614ea557600080fd5b81356001600160401b03811115614ebb57600080fd5b61487e848285016148c7565b600060e08284031215614ed957600080fd5b61252b83836148d9565b60008060008060008060008060006101008a8c031215614f0257600080fd5b89356001600160401b0380821115614f1957600080fd5b614f258d838e016148eb565b9a5060208c0135915080821115614f3b57600080fd5b614f478d838e016146cc565b9950614f5560408d016147d8565b985060608c0135915080821115614f6b57600080fd5b50614f788c828d01614681565b9097509550614f8b905060808b016147d8565b935060a08a01359250614fa060c08b016149b6565b9150614fae60e08b01614676565b90509295985092959850929598565b600060c08284031215614fcf57600080fd5b61252b83836148fe565b600060208284031215614feb57600080fd5b5035919050565b60006020828403121561500457600080fd5b5051919050565b6000806040838503121561501e57600080fd5b82359150602083013561503081615a16565b809150509250929050565b60008060006040848603121561505057600080fd5b8335925060208401356001600160401b0381111561506d57600080fd5b61507986828701614886565b9497909650939450505050565b60008060008060006080868803121561509e57600080fd5b853594506020860135935060408601356001600160401b038111156150c257600080fd5b6150ce88828901614681565b90945092505060608601356150e281615a16565b809150509295509295909350565b600080600080600060a0868803121561510857600080fd5b615111866149c1565b9450602086015193506040860151925060608601519150615134608087016149c1565b90509295509295909350565b60006020828403121561515257600080fd5b815161252b81615a2b565b600081518084526020808501808196508360051b8101915082860160005b858110156151a55782840389526151938483516151b2565b9885019893509084019060010161517b565b5091979650505050505050565b600081518084526151ca816020860160208601615915565b601f01601f19169290920160200192915050565b600481106151ee576151ee6159d4565b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0380825116835280602083015116602084015280604083015116604084015250606081015160608301526080810151608083015260a08101516003811061526a5761526a6159d4565b8060a0840152505050565b60008251615287818460208701615915565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03841681526060602082018190526000906152cf908301856151b2565b9050826040830152949350505050565b6001600160a01b038416815260406020820181905260009061530490830184866151f2565b95945050505050565b604081526000615320604083018561515d565b905060018060a01b03831660208301529392505050565b60a08152600061534a60a083018961515d565b63ffffffff8816602084015261536360408401886151de565b82810360608401526153768186886151f2565b91505060018060a01b0383166080830152979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156153e757603f198886030184526153d58583516151b2565b945092850192908501906001016153b9565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156154365761542383855161521b565b9284019260c09290920191600101615410565b50909695505050505050565b60408152600061545560408301856151b2565b90508260208301529392505050565b60608152600061547760608301866151b2565b846020840152828103604084015261548f81856151b2565b9695505050505050565b60208152600061252b60208301846151b2565b60208082526018908201527f5374616c6520707269636520696e20436861696e6c696e6b0000000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526022908201527f4578656375746f72206e6f742077686974656c697374656420696e2062756467604082015261195d60f21b606082015260800190565b60c081016111a9828461521b565b85815260a0810161559260208301876151de565b63ffffffff949094166040820152911515606083015260809091015292915050565b6000808335601e198436030181126155cb57600080fd5b8301803591506001600160401b038211156155e557600080fd5b6020019150600581901b36038213156146c557600080fd5b6000808335601e1984360301811261561457600080fd5b8301803591506001600160401b0382111561562e57600080fd5b6020019150368190038213156146c557600080fd5b604051601f8201601f191681016001600160401b038111828210171561566b5761566b615a00565b604052919050565b60006001600160401b0382111561568c5761568c615a00565b5060051b60200190565b60006001600160401b038211156156af576156af615a00565b50601f01601f191660200190565b600082198211156156d0576156d06159a8565b500190565b600060ff821660ff84168060ff038211156156f2576156f26159a8565b019392505050565b600082615709576157096159be565b600160ff1b821460001984141615615723576157236159a8565b500590565b600082615737576157376159be565b500490565b600181815b8085111561577757816000190482111561575d5761575d6159a8565b8085161561576a57918102915b93841c9390800290615741565b509250929050565b600061252b8383615796565b600061252b60ff8416835b6000826157a5575060016111a9565b816157b2575060006111a9565b81600181146157c857600281146157d2576157ee565b60019150506111a9565b60ff8411156157e3576157e36159a8565b50506001821b6111a9565b5060208310610133831016604e8410600b8410161715615811575081810a6111a9565b61581b838361573c565b806000190482111561582f5761582f6159a8565b029392505050565b60006001600160ff1b038184138284138082168684048611161561585d5761585d6159a8565b600160ff1b600087128281168783058912161561587c5761587c6159a8565b60008712925087820587128484161615615898576158986159a8565b878505871281841616156158ae576158ae6159a8565b505050929093029392505050565b60008160001904831182151516156158d6576158d66159a8565b500290565b6000828210156158ed576158ed6159a8565b500390565b600060ff821660ff84168082101561590c5761590c6159a8565b90039392505050565b60005b83811015615930578181015183820152602001615918565b838111156124bf5750506000910152565b600081615950576159506159a8565b506000190190565b600181811c9082168061596c57607f821691505b60208210811415612c7257634e487b7160e01b600052602260045260246000fd5b60006000198214156159a1576159a16159a8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461467357600080fd5b60ff8116811461467357600080fdfe000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea26469706673582212203c2f9fee4973d628e9466b6a47e72625e7b3bd79ec42ca24dce5a0342d2f511264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetBaseCurrencyPrice(address,uint256)": {
        "notice": "This function is imported by other contract, thus cannot be external"
      },
      "canResolvePrice(address)": {
        "notice": "This function is imported by other contract, thus cannot be external"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3247,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3250,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 29351,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_transactionIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)17310_storage"
      },
      {
        "astId": 29356,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "transactions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Transaction)29295_storage)"
      },
      {
        "astId": 29358,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_executor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 29360,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_executorTeamId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 29362,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_executee",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 29366,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_approversMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29368,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_approverTeamId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 29370,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_minApproval",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 29372,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_text",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 29374,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_transactionType",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 29376,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_allowUnlimitedUsageCount",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 29378,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_usageCount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 29380,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_startTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 29382,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_endTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 29384,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_team",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 30128,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "__gap",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 31480,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "__gap",
        "offset": 0,
        "slot": "66",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30141,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_baseCurrency",
        "offset": 0,
        "slot": "116",
        "type": "t_address"
      },
      {
        "astId": 30765,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "__gap",
        "offset": 0,
        "slot": "117",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28189,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "fromTokens",
        "offset": 0,
        "slot": "167",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 28193,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "fromTokensMapping",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28195,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "allowAnyAmount",
        "offset": 0,
        "slot": "169",
        "type": "t_bool"
      },
      {
        "astId": 28197,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "totalAmount",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 28199,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "amountPercentage",
        "offset": 0,
        "slot": "171",
        "type": "t_uint8"
      },
      {
        "astId": 28201,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "allowAllToTokens",
        "offset": 1,
        "slot": "171",
        "type": "t_bool"
      },
      {
        "astId": 28205,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "toTokensMapping",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28211,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_tokenInAmountOfTransaction",
        "offset": 0,
        "slot": "173",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 28216,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_tokenInOfTransaction",
        "offset": 0,
        "slot": "174",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)29276": {
        "encoding": "inplace",
        "label": "enum CommonBudgetApproval.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)29295_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonBudgetApproval.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)29295_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)17310_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 17309,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)29295_storage": {
        "encoding": "inplace",
        "label": "struct CommonBudgetApproval.Transaction",
        "members": [
          {
            "astId": 29278,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 29281,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 29284,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Status)29276"
          },
          {
            "astId": 29286,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "deadline",
            "offset": 1,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 29288,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "isExist",
            "offset": 5,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 29290,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "approvedCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 29294,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "approved",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}