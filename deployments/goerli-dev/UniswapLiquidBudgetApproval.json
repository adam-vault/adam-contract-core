{
  "address": "0xf7194596fe48132520Bf279c815AB2ee625759E5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ActionDuplicated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BudgetHasEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BudgetNotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BudgetUsageExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "DecodeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecodeWETHDataFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidApproverList",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExecuteeTeam",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "InvalidTransactionId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum CommonBudgetApproval.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "InvalidTransactionStatus",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        }
      ],
      "name": "PairNotSupport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooMuchETH",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "TransactionExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedApprover",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedExecutee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedExecutor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AllowAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AllowAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AllowToToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AllowToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "ApproveTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum CommonBudgetApproval.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreateTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "ExecuteTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecuteUniswapInTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecuteUniswapOutTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecuteWETH9Transaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RevokeTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "SetApprover",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RECIPIENT_EXECUTEE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECIPIENT_UNISWAP_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH9",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountingSystem",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "afterInitialized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowAllToTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowAnyAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowUnlimitedUsageCount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "approveTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approverTeamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        }
      ],
      "name": "approversMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetBaseCurrencyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrencyDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "canResolvePrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_isExecute",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "createTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rawData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "decodeUniswapMulticall",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData[]",
          "name": "multicalData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "decodeWETH9Call",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IV3SwapRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IV3SwapRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IV3SwapRouter.ExactOutputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutput",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IV3SwapRouter.ExactOutputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutputSingle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeParams",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executorTeamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fromTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fromTokensMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executorTeamId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "approvers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "approverTeamId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minApproval",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "text",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "transactionType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "allowUnlimitedUsageCount",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "usageCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonBudgetApproval.InitializeParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_fromTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_allowAllToTokens",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_toTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_allowAnyAmount",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_amountPercentage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "__baseCurrency",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minApproval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "revokeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "selfPermit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweepToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "team",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "toTokensMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum CommonBudgetApproval.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "approvedCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrapWETH9",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "enum UniswapSwapper.MulticallResultAttribute",
              "name": "resultType",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapSwapper.MulticallData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usageCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x008da685cdcd05af9d487cb9d6236befbeba10fa9f1b786645cf2f13903a4059",
  "receipt": {
    "to": null,
    "from": "0x2d61d2ea8c296305C4AF461f12a172cF1d0af599",
    "contractAddress": "0xf7194596fe48132520Bf279c815AB2ee625759E5",
    "transactionIndex": 11,
    "gasUsed": "4302742",
    "logsBloom": "0x
    "blockHash": "0x807b611c297797d5fb878cbfcae5acee9ae338776ea84f30b034edbc0cfdb264",
    "transactionHash": "0x008da685cdcd05af9d487cb9d6236befbeba10fa9f1b786645cf2f13903a4059",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 8449455,
        "transactionHash": "0x008da685cdcd05af9d487cb9d6236befbeba10fa9f1b786645cf2f13903a4059",
        "address": "0xf7194596fe48132520Bf279c815AB2ee625759E5",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 10,
        "blockHash": "0x807b611c297797d5fb878cbfcae5acee9ae338776ea84f30b034edbc0cfdb264"
      }
    ],
    "blockNumber": 8449455,
    "cumulativeGasUsed": "7073435",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e9f5c2c82b7c036751b143f26333d555",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ActionDuplicated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BudgetHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BudgetNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BudgetUsageExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"DecodeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecodeWETHDataFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApproverList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExecuteeTeam\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidTransactionId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum CommonBudgetApproval.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"InvalidTransactionStatus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"PairNotSupport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchETH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TransactionExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedApprover\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedExecutee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedExecutor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AllowAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AllowAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AllowToToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AllowToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"ApproveTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CommonBudgetApproval.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecuteUniswapInTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecuteUniswapOutTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecuteWETH9Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RevokeTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"SetApprover\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RECIPIENT_EXECUTEE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECIPIENT_UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingSystem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAllToTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAnyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowUnlimitedUsageCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"approveTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approverTeamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"}],\"name\":\"approversMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetBaseCurrencyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrencyDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"canResolvePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_isExecute\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"createTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rawData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"decodeUniswapMulticall\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData[]\",\"name\":\"multicalData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeWETH9Call\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeParams\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorTeamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fromTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTokensMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executorTeamId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"approvers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"approverTeamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minApproval\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transactionType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowUnlimitedUsageCount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usageCount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonBudgetApproval.InitializeParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_fromTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowAllToTokens\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_toTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowAnyAmount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_amountPercentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"__baseCurrency\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"revokeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTokensMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum CommonBudgetApproval.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"approvedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapSwapper.MulticallResultAttribute\",\"name\":\"resultType\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapSwapper.MulticallData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetBaseCurrencyPrice(address,uint256)\":{\"notice\":\"This function is imported by other contract, thus cannot be external\"},\"canResolvePrice(address)\":{\"notice\":\"This function is imported by other contract, thus cannot be external\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapLiquidBudgetApproval.sol\":\"UniswapLiquidBudgetApproval\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(address base, address quote) external view returns (uint8);\\n\\n  function description(address base, address quote) external view returns (string memory);\\n\\n  function version(address base, address quote) external view returns (uint256);\\n\\n  function latestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (int256 answer);\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (uint256 timestamp);\\n\\n  // Registry getters\\n\\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (Phase memory phase);\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 previousRoundId);\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 nextRoundId);\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(address base, address quote)\\n    external\\n    view\\n    returns (AggregatorV2V3Interface proposedAggregator);\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\",\"keccak256\":\"0xa783cf3434bd5b5153fe876c37d5d5cb78d4e198f01f184b60ed3392401ddc0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@uniswap/swap-router-contracts/contracts/interfaces/IV3SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniswapLiquidBudgetApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./base/PriceResolver.sol\\\";\\nimport \\\"./base/CommonBudgetApproval.sol\\\";\\nimport \\\"./lib/BytesLib.sol\\\";\\nimport \\\"./lib/Constant.sol\\\";\\nimport \\\"./interface/IBudgetApprovalExecutee.sol\\\";\\nimport \\\"./dex/UniswapSwapper.sol\\\";\\n\\ncontract UniswapLiquidBudgetApproval is CommonBudgetApproval, UniswapSwapper, PriceResolver {\\n\\n    using BytesLib for bytes;\\n\\n    event AllowToToken(address token);\\n    event ExecuteUniswapInTransaction(uint256 indexed id, address indexed executor, address indexed toAddress, address token, uint256 amount);\\n    event ExecuteUniswapOutTransaction(uint256 indexed id, address indexed executor, address indexed toAddress, address token, uint256 amount);\\n    event ExecuteWETH9Transaction(uint256 indexed id, address indexed executor, address indexed toAddress, address tokenIn, address tokenOut, uint256 amount);\\n\\n    string public constant override name = \\\"Uniswap Liquid Budget Approval\\\";\\n\\n    address private _baseCurrency;\\n    address[] public fromTokens;\\n    mapping(address => bool) public fromTokensMapping;\\n    bool public allowAnyAmount;\\n    uint256 public totalAmount;\\n    uint8 public amountPercentage;\\n    bool public allowAllToTokens;\\n    mapping(address => bool) public toTokensMapping;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _tokenInAmountOfTransaction;\\n    mapping(uint256 => address[]) private _tokenInOfTransaction;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n      _disableInitializers();\\n    }\\n\\n    function initialize(\\n        InitializeParams calldata params,\\n        address[] memory _fromTokens,\\n        bool _allowAllToTokens,\\n        address[] calldata _toTokens,\\n        bool _allowAnyAmount,\\n        uint256 _totalAmount,\\n        uint8 _amountPercentage,\\n        address __baseCurrency\\n    ) external initializer {\\n        __BudgetApproval_init(params);\\n\\n        allowAnyAmount = _allowAnyAmount;\\n        totalAmount = _totalAmount;\\n        amountPercentage = _amountPercentage;\\n        _baseCurrency = __baseCurrency;\\n        \\n        for(uint i = 0; i < _fromTokens.length; i++) {\\n            _addFromToken(_fromTokens[i]);\\n        }\\n\\n        allowAllToTokens = _allowAllToTokens;\\n        for(uint i = 0; i < _toTokens.length; i++) {\\n            _addToToken(_toTokens[i]);\\n        }\\n\\n        require(accountingSystem() != address(0), \\\"AccountingSystem is required\\\");\\n    }\\n\\n    function baseCurrency() public view override returns(address) {\\n        return _baseCurrency;\\n    }\\n    function accountingSystem() public view override returns(address) {\\n        return IBudgetApprovalExecutee(executee()).accountingSystem();\\n    }\\n\\n    function afterInitialized() external override onlyExecutee {\\n        bytes memory data = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", Constant.UNISWAP_ROUTER, type(uint256).max);\\n        address _executee = executee();\\n        uint _fromTokenLength = fromTokens.length;\\n\\n        for(uint i = 0; i < _fromTokenLength; i++) {\\n            address _fromToken = fromTokens[i];\\n\\n            if(_fromToken != Denominations.ETH) {\\n                IBudgetApprovalExecutee(_executee).executeByBudgetApproval(_fromToken, data, 0);\\n            }\\n        }\\n    }\\n\\n    function executeParams() external pure override returns (string[] memory) {\\n        string[] memory arr = new string[](3);\\n        arr[0] = \\\"address to\\\";\\n        arr[1] = \\\"bytes data\\\";\\n        arr[2] = \\\"uint256 value\\\";\\n        return arr;\\n    }\\n\\n    function _execute(\\n        uint256 transactionId, \\n        bytes memory data\\n    ) internal override {\\n        (address to, bytes memory executeData, uint256 value) = abi.decode(data,(address, bytes, uint256));\\n        \\n        if (to == Constant.UNISWAP_ROUTER) {\\n            _executeUniswapCall(transactionId, to, executeData, value);\\n        } else if (to == WETH9()) {\\n            _executeWETH9Call(transactionId, to, executeData, value);\\n        } else {\\n            revert(\\\"Invalid target address\\\");\\n        }\\n    }\\n\\n    function _executeUniswapCall(uint256 transactionId, address to, bytes memory executeData, uint256 value) private {\\n        uint256 priceBefore = _fromTokensPrice();\\n        address __executee = executee();\\n\\n        bytes memory response = IBudgetApprovalExecutee(__executee).executeByBudgetApproval(to, executeData, value);\\n        MulticallData[] memory mDataArr = this.decodeUniswapMulticall(executeData, value, response);\\n\\n        address[] storage _tokenIn = _tokenInOfTransaction[transactionId];\\n        mapping(address => uint256) storage _tokenInAmountMapping = _tokenInAmountOfTransaction[transactionId];\\n\\n        for (uint i = 0; i < mDataArr.length; i++) {\\n            MulticallData memory mData = mDataArr[i];\\n\\n            require(mData.recipient == address(0) || \\n                mData.recipient == RECIPIENT_EXECUTEE || \\n                mData.recipient == RECIPIENT_UNISWAP_ROUTER || \\n                mData.recipient == __executee, \\\"Recipient not whitelisted\\\");\\n\\n            uint256 _tokenInAmount = _tokenInAmountMapping[mData.tokenIn];\\n\\n            if (mData.amountIn > 0) {\\n                require(fromTokensMapping[mData.tokenIn], \\\"Source token not whitelisted\\\");\\n\\n                if (_tokenInAmount == 0) {\\n                    _tokenIn.push(mData.tokenIn);\\n                }\\n                _tokenInAmountMapping[mData.tokenIn] = _tokenInAmount + mData.amountIn;\\n\\n                emit ExecuteUniswapInTransaction(transactionId, msg.sender, Constant.UNISWAP_ROUTER, mData.tokenIn, mData.amountIn);\\n            }\\n\\n            if (mData.amountOut > 0 && (mData.recipient == RECIPIENT_EXECUTEE || mData.recipient == __executee)) {\\n                require(allowAllToTokens || toTokensMapping[mData.tokenOut], \\\"Target token not whitelisted\\\");\\n\\n                emit ExecuteUniswapOutTransaction(transactionId, msg.sender, Constant.UNISWAP_ROUTER, mData.tokenOut, mData.amountOut);\\n            }\\n        }\\n\\n        bool _allowAnyAmount = allowAnyAmount;\\n        uint256 _totalAmount = totalAmount;\\n\\n        if (!_allowAnyAmount || amountPercentage < 100) {\\n            uint256 amountInPrice;\\n            uint _tokenInLength = _tokenIn.length;\\n\\n            for (uint i = 0; i < _tokenInLength; i++) {\\n                address tokenIn = _tokenIn[i];\\n                amountInPrice += assetBaseCurrencyPrice(tokenIn, _tokenInAmountMapping[tokenIn]);\\n            }\\n            require(amountInPrice > 0 , \\\"Swap amount should not be zero\\\");\\n            require(_allowAnyAmount || amountInPrice <= _totalAmount, \\\"Exceeded max amount\\\");\\n            require(_checkAmountPercentageValid(priceBefore, amountInPrice), \\\"Exceeded percentage\\\");     \\n                        \\n            if(!allowAnyAmount) {\\n                totalAmount = _totalAmount - amountInPrice;\\n            }           \\n        }\\n\\n    }\\n\\n    function _executeWETH9Call(uint256 transactionId, address to, bytes memory executeData, uint256 value) private {\\n        uint256 priceBefore = _fromTokensPrice();\\n        bool _allowAnyAmount = allowAnyAmount;\\n        uint256 _totalAmount = totalAmount;\\n\\n        IBudgetApprovalExecutee(executee()).executeByBudgetApproval(to, executeData, value);\\n        (\\n            address tokenIn,\\n            address tokenOut,\\n            uint256 amount\\n        ) = this.decodeWETH9Call(executeData, value);\\n\\n        uint256 amountInPrice = assetBaseCurrencyPrice(tokenIn, amount);\\n        require(fromTokensMapping[tokenIn], \\\"Source token not whitelisted\\\");\\n        require(allowAllToTokens || toTokensMapping[tokenOut], \\\"Target token not whitelisted\\\");\\n        require(amountInPrice > 0 , \\\"Transfer amount should not be zero\\\");\\n        require(_allowAnyAmount || amountInPrice <= _totalAmount, \\\"Exceeded max amount\\\");\\n        require(_checkAmountPercentageValid(priceBefore, amountInPrice), \\\"Exceeded percentage\\\");\\n        \\n        if(!_allowAnyAmount) {\\n            totalAmount = _totalAmount - amountInPrice;\\n        }\\n\\n        emit ExecuteWETH9Transaction(transactionId, msg.sender, WETH9(), tokenIn, tokenOut, amount);\\n    }\\n\\n    function _fromTokensPrice() private view returns (uint256 totalBalance) {\\n        uint _fromTokenLength = fromTokens.length;\\n        address _executee = executee();\\n\\n        for (uint i = 0; i < _fromTokenLength; i++) {\\n            address _fromToken = fromTokens[i];\\n            if (_fromToken == Denominations.ETH) {\\n                totalBalance += assetBaseCurrencyPrice(Denominations.ETH, _executee.balance);\\n            } else {\\n                totalBalance += assetBaseCurrencyPrice(_fromToken, IERC20(_fromToken).balanceOf(_executee));\\n            }\\n        }\\n    }\\n\\n    function _checkAmountPercentageValid(uint256 totalBalance, uint256 amount) private view returns (bool) {\\n        uint8 _amountPercentage = amountPercentage;\\n\\n        if (_amountPercentage == 100) return true;\\n\\n        if (totalBalance == 0) return false;\\n\\n        return amount <= totalBalance * _amountPercentage / 100;\\n    }\\n\\n    function _addFromToken(address token) private {\\n        require(!fromTokensMapping[token], \\\"Duplicated token\\\");\\n        require(canResolvePrice(token), \\\"Unresolvable token\\\");\\n        fromTokens.push(token);\\n        fromTokensMapping[token] = true;\\n        emit AllowToken(token);\\n    }\\n\\n    function _addToToken(address token) private {\\n        require(!toTokensMapping[token], \\\"Duplicated token\\\");\\n        toTokensMapping[token] = true;\\n        emit AllowToToken(token);\\n    }\\n\\n}\",\"keccak256\":\"0x37cde81e8c4b573a3bb60e3a297a0293d9725872b9e02228596d991fa86a0671\",\"license\":\"GPL-3.0\"},\"contracts/base/CommonBudgetApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"../lib/BytesLib.sol\\\";\\nimport \\\"../interface/ITeam.sol\\\";\\nimport \\\"../interface/IBudgetApprovalExecutee.sol\\\";\\n\\nabstract contract CommonBudgetApproval is Initializable {\\n\\n    using Counters for Counters.Counter;\\n    using BytesLib for bytes;\\n\\n    enum Status {\\n        Pending,\\n        Approved,\\n        Completed,\\n        Cancelled\\n    }\\n\\n    struct Transaction {\\n        uint256 id;\\n        bytes[] data;\\n        Status status;\\n        uint32 deadline;\\n        bool isExist;\\n        uint256 approvedCount;\\n        mapping(address => bool) approved;\\n    }\\n\\n    event CreateTransaction(\\n        uint256 indexed id,\\n        bytes[] data,\\n        uint256 deadline,\\n        Status status,\\n        string comment,\\n        address creator\\n    );\\n    event ApproveTransaction(\\n        uint256 indexed id,\\n        address approver,\\n        string comment\\n    );\\n    event ExecuteTransaction(\\n        uint256 indexed id,\\n        bytes[] data,\\n        address _executor\\n    );\\n    event RevokeTransaction(uint256 indexed id);\\n    event AllowAddress(address target);\\n    event AllowToken(address token);\\n    event AllowAmount(uint256 amount);\\n    event SetApprover(address approver);\\n\\n    Counters.Counter private _transactionIds;\\n\\n    mapping(uint256 => Transaction) public transactions;\\n\\n    address private _executor;\\n    uint256 private _executorTeamId;\\n    address private _executee; // Must be BudgetApprovalExecutee\\n\\n    mapping(address => bool) private _approversMapping;\\n    uint256 private _approverTeamId;\\n    uint256 private _minApproval;\\n\\n    string private _text;\\n    string private _transactionType;\\n\\n    bool private _allowUnlimitedUsageCount;\\n    uint256 private _usageCount;\\n\\n    uint256 private _startTime;\\n    uint256 private _endTime;\\n\\n\\n    struct InitializeParams {\\n        address executor;\\n        uint256 executorTeamId;\\n        address[] approvers;\\n        uint256 approverTeamId;\\n        uint256 minApproval;\\n        string text;\\n        string transactionType;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool allowUnlimitedUsageCount;\\n        uint256 usageCount;\\n    }\\n\\n    error UnauthorizedExecutee();\\n    error UnauthorizedExecutor();\\n    error UnauthorizedApprover();\\n    error InvalidTransactionStatus(uint256 id, Status status);\\n    error TransactionExpired(uint256 id);\\n    error BudgetNotStarted();\\n    error BudgetHasEnded();\\n    error InvalidApproverList();\\n    error InvalidExecuteeTeam();\\n    error BudgetUsageExceeded();\\n    error InvalidTransactionId(uint256 id);\\n    error ActionDuplicated();\\n\\n    modifier onlyExecutee() {\\n        if (msg.sender != executee()) {\\n            revert UnauthorizedExecutee();\\n        }\\n        _;\\n    }\\n\\n    modifier matchStatus(uint256 id, Status status) {\\n        Status _status = transactions[id].status;\\n        if (_status != status) {\\n            revert InvalidTransactionStatus(id, _status);\\n        }\\n        _;\\n    }\\n\\n    modifier checkTime(uint256 id) {\\n        if (block.timestamp > transactions[id].deadline) {\\n            revert TransactionExpired(id);\\n        }\\n        if (block.timestamp < startTime()) {\\n            revert BudgetNotStarted();\\n        }\\n        if (block.timestamp >= endTime()) {\\n            revert BudgetHasEnded();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyApprover() {\\n        if (!_isApprover(msg.sender)) {\\n            revert UnauthorizedApprover();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        if (!_isExecutor(msg.sender)) {\\n            revert UnauthorizedExecutor();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function executor() public view returns (address) {\\n        return _executor;\\n    }\\n\\n    function _isExecutor(address eoa) internal view virtual returns (bool) {\\n        return eoa == executor() ||\\n            _inTeam(eoa, executorTeamId());\\n    }\\n\\n    function _isApprover(address eoa) internal view virtual returns (bool) {\\n        return approversMapping(eoa) ||\\n                _inTeam(eoa, approverTeamId());\\n    }\\n\\n    function _inTeam(address eoa, uint256 teamId) internal view returns (bool) {\\n        return ITeam(team()).balanceOf(eoa, teamId) > 0;\\n    }\\n\\n    function executorTeamId() public view returns (uint256) {\\n        return _executorTeamId;\\n    }\\n\\n    function executee() public view returns (address) {\\n        return _executee;\\n    }\\n\\n    function approversMapping(address eoa) public view returns (bool) {\\n        return _approversMapping[eoa];\\n    }\\n\\n    function approverTeamId() public view returns (uint256) {\\n        return _approverTeamId;\\n    }\\n\\n    function minApproval() public view returns (uint256) {\\n        return _minApproval;\\n    }\\n\\n    function text() public view returns (string memory) {\\n        return _text;\\n    }\\n\\n    function transactionType() public view returns (string memory) {\\n        return _transactionType;\\n    }\\n\\n    function allowUnlimitedUsageCount() public view returns (bool) {\\n        return _allowUnlimitedUsageCount;\\n    }\\n\\n    function usageCount() public view returns (uint256) {\\n        return _usageCount;\\n    }\\n\\n    function startTime() public view returns (uint256) {\\n        return _startTime;\\n    }\\n\\n    function endTime() public view returns (uint256) {\\n        return _endTime;\\n    }\\n\\n    function team() public view returns (address) {\\n        return IBudgetApprovalExecutee(executee()).team();\\n    }\\n\\n    function __BudgetApproval_init(InitializeParams calldata params)\\n        internal\\n        onlyInitializing\\n    {\\n        if (params.approverTeamId == 0 && (params.minApproval > params.approvers.length)) {\\n            revert InvalidApproverList();\\n        }\\n\\n        _executee = msg.sender;\\n        _executor = params.executor;\\n        _text = params.text;\\n        _transactionType = params.transactionType;\\n\\n        _minApproval = params.minApproval;\\n        _startTime = params.startTime;\\n        _endTime = params.endTime;\\n\\n        _allowUnlimitedUsageCount = params.allowUnlimitedUsageCount;\\n        _usageCount = params.usageCount;\\n\\n        _executorTeamId = params.executorTeamId;\\n        _approverTeamId = params.approverTeamId;\\n\\n        for (uint256 i = 0; i < params.approvers.length; i++) {\\n            _approversMapping[params.approvers[i]] = true;\\n            emit SetApprover(params.approvers[i]);\\n        }\\n\\n        if (team() == address(0)) {\\n            revert InvalidExecuteeTeam();\\n        }\\n    }\\n\\n    function afterInitialized() external virtual onlyExecutee {}\\n\\n    function executeTransaction(uint256 id)\\n        public\\n        virtual\\n        matchStatus(id, Status.Approved)\\n        checkTime(id)\\n        onlyExecutor\\n        payable\\n    {\\n        bool unlimited = allowUnlimitedUsageCount();\\n        uint256 count = usageCount();\\n        bytes[] memory data = transactions[id].data;\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (!unlimited && count == 0) {\\n                revert BudgetUsageExceeded();\\n            }\\n            if (!unlimited) {\\n                count--;\\n            }\\n            _execute(id, data[i]);\\n        }\\n\\n        _usageCount = count;\\n        transactions[id].status = Status.Completed;\\n        emit ExecuteTransaction(id, data, msg.sender);\\n    }\\n\\n    function createTransaction(\\n        bytes[] memory _data,\\n        uint32 _deadline,\\n        bool _isExecute,\\n        string calldata comment\\n    ) external virtual onlyExecutor payable returns (uint256) {\\n        _transactionIds.increment();\\n        uint256 id = _transactionIds.current();\\n\\n        // workaround when have mapping in Struct\\n        Transaction storage newTransaction = transactions[id];\\n        newTransaction.id = id;\\n        newTransaction.data = _data;\\n        newTransaction.deadline = _deadline;\\n        newTransaction.isExist = true;\\n\\n        if (minApproval() == 0) {\\n            transactions[id].status = Status.Approved;\\n        } else {\\n            transactions[id].status = Status.Pending;\\n        }\\n\\n        emit CreateTransaction(\\n            id,\\n            _data,\\n            _deadline,\\n            newTransaction.status,\\n            comment,\\n            msg.sender\\n        );\\n\\n        if (_isExecute) {\\n            executeTransaction(id);\\n        }\\n        return id;\\n    }\\n\\n    function approveTransaction(uint256 id, string calldata comment)\\n        external\\n        virtual\\n        onlyApprover\\n    {\\n        if (_transactionIds.current() < id) {\\n            revert InvalidTransactionId(id);\\n        }\\n\\n        Status _status = transactions[id].status;\\n        uint256 _approvedCount = transactions[id].approvedCount + 1;\\n\\n        if (_status != Status.Pending && _status != Status.Approved) {\\n            revert InvalidTransactionStatus(id, _status);\\n        }\\n        if (transactions[id].approved[msg.sender]) {\\n            revert ActionDuplicated();\\n        }\\n\\n        transactions[id].approved[msg.sender] = true;\\n        transactions[id].approvedCount = _approvedCount;\\n\\n        if (_approvedCount >= minApproval()) {\\n            transactions[id].status = Status.Approved;\\n        }\\n\\n        emit ApproveTransaction(id, msg.sender, comment);\\n    }\\n\\n    function revokeTransaction(uint256 id) external virtual onlyExecutor {\\n        if (_transactionIds.current() < id) {\\n            revert InvalidTransactionId(id);\\n        }\\n\\n        Status _status = transactions[id].status;\\n        if (_status == Status.Completed) {\\n            revert InvalidTransactionStatus(id, _status);\\n        }\\n\\n        transactions[id].status = Status.Cancelled;\\n\\n        emit RevokeTransaction(id);\\n    }\\n\\n    function _execute(uint256, bytes memory) internal virtual;\\n\\n    function executeParams() external pure virtual returns (string[] memory);\\n\\n    function name() external virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0xa89acfcbeb9df899fb31133c3a4de4eeeb1dd5e3eb0784cc8a9535f7b67c541d\",\"license\":\"GPL-3.0\"},\"contracts/base/PriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../interface/IAccountingSystem.sol\\\";\\nimport \\\"../lib/Constant.sol\\\";\\n\\nabstract contract PriceResolver {\\n    error PairNotSupport(address asset, address base);\\n\\n    function baseCurrency() public view virtual returns (address);\\n    function accountingSystem() public view virtual returns (address);\\n\\n    /// @notice This function is imported by other contract, thus cannot be external\\n    function assetBaseCurrencyPrice(address asset, uint256 amount) public  view virtual returns (uint256) {\\n        address _baseCurrency = baseCurrency();\\n        address _accountingSystem = accountingSystem();\\n\\n        if (!IAccountingSystem(accountingSystem()).isSupportedPair(asset, baseCurrency())) {\\n            revert PairNotSupport(asset, baseCurrency());\\n        }\\n        return IAccountingSystem(_accountingSystem).assetPrice(asset, _baseCurrency, amount);\\n    }\\n\\n    function assetPrice(address asset, address base, uint256 amount) public  view virtual returns (uint256) {\\n        address _accountingSystem = accountingSystem();\\n        if (!IAccountingSystem(accountingSystem()).isSupportedPair(asset, base)) {\\n            revert PairNotSupport(asset, base);\\n        }\\n        return IAccountingSystem(_accountingSystem).assetPrice(asset, base, amount);\\n    }\\n\\n    function baseCurrencyDecimals() public view virtual returns (uint8) {\\n        address _baseCurrency = baseCurrency();\\n        if (_baseCurrency == Denominations.ETH) return 18;\\n        try IERC20Metadata(_baseCurrency).decimals() returns (uint8 _decimals) {\\n            return _decimals;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is imported by other contract, thus cannot be external\\n    function canResolvePrice(address asset) public view virtual returns (bool) {\\n       return IAccountingSystem(accountingSystem()).isSupportedPair(asset, baseCurrency());\\n    }\\n}\",\"keccak256\":\"0x99f7a217b6ae1ef2670a3857174f5880357d89217564aaf34d3c80d0838f077a\",\"license\":\"GPL-3.0\"},\"contracts/dex/UniswapSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\nimport \\\"@uniswap/swap-router-contracts/contracts/interfaces/IV3SwapRouter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\n\\nimport \\\"../lib/BytesLib.sol\\\";\\nimport \\\"../lib/Constant.sol\\\";\\n\\ncontract UniswapSwapper is Initializable {\\n    using BytesLib for bytes;\\n\\n    address public constant RECIPIENT_EXECUTEE = address(1);\\n    address public constant RECIPIENT_UNISWAP_ROUTER = address(2);\\n\\n    enum MulticallResultAttribute { EMPTY, AMOUNT_IN, AMOUNT_OUT }\\n\\n    struct MulticallData {\\n        address recipient;\\n        address tokenIn;\\n        address tokenOut; \\n        uint256 amountIn; \\n        uint256 amountOut; \\n        MulticallResultAttribute resultType;\\n    }\\n\\n    error DecodeFailed(bytes result);\\n    error DecodeWETHDataFail();\\n    error TooMuchETH();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n      _disableInitializers();\\n    }\\n    \\n    function WETH9() public pure returns (address) {\\n        return Constant.WETH_ADDRESS;\\n    }\\n\\n    function decodeWETH9Call(bytes memory data, uint256 value) external pure returns(address tokenIn, address tokenOut, uint256 amount) {\\n        bytes4 funcSig = data.toBytes4(0);\\n        if (funcSig == bytes4(keccak256(\\\"deposit()\\\"))) {\\n            return (Denominations.ETH, WETH9(), value);\\n        } else if (funcSig == bytes4(keccak256(\\\"withdraw(uint256)\\\"))) {\\n            return (WETH9(), Denominations.ETH, abi.decode(data.slice(4, data.length - 4), (uint256)));\\n        }\\n\\n        revert(\\\"Failed to decode Uniswap bytecode\\\");\\n    }\\n\\n    function decodeUniswapMulticall(bytes memory rawData, uint256 value, bytes memory response) external view returns(MulticallData[] memory multicalData) {\\n        bytes[] memory executions = _decodeMulticall(rawData);\\n        bytes[] memory executionResults;\\n        uint256 remainEth = value;\\n\\n        multicalData = new MulticallData[](executions.length);\\n\\n        if (response.length != 0) {\\n            executionResults = abi.decode(response, (bytes[]));\\n        } \\n\\n        for (uint i = 0; i < executions.length; i++) {\\n            (bool success, bytes memory rawSwapData) = address(this).staticcall(executions[i]);\\n            if (!success) {\\n                revert DecodeFailed(rawSwapData);\\n            }\\n\\n            MulticallData memory swapData = abi.decode(rawSwapData, (MulticallData));\\n            \\n            if (swapData.tokenIn == WETH9() && remainEth != 0) {\\n                if (swapData.amountIn > remainEth) {\\n                    revert DecodeWETHDataFail();\\n                }\\n                swapData.tokenIn = Denominations.ETH;\\n                remainEth -= swapData.amountIn;\\n            }\\n            if (executionResults.length != 0) {\\n                if (swapData.resultType == MulticallResultAttribute.AMOUNT_IN) {\\n                    swapData.amountIn = abi.decode(executionResults[i], (uint256));\\n                } else if (swapData.resultType == MulticallResultAttribute.AMOUNT_OUT) {\\n                    swapData.amountOut = abi.decode(executionResults[i], (uint256));\\n                }\\n            }\\n            multicalData[i] = swapData;\\n        }\\n        if (remainEth != 0) {\\n            revert TooMuchETH();\\n        }\\n    }\\n\\n    function _decodeMulticall(bytes memory _data) internal pure returns (bytes[] memory executions) {\\n        bytes4 funcSig = _data.toBytes4(0);\\n        if (funcSig == bytes4(keccak256(\\\"multicall(uint256,bytes[])\\\"))) {\\n            (, executions) = abi.decode(_data.slice(4, _data.length - 4), (uint256, bytes[]));\\n        } else if (funcSig == bytes4(keccak256(\\\"multicall(bytes32,bytes[])\\\"))) {\\n            (, executions) = abi.decode(_data.slice(4, _data.length - 4), (bytes32, bytes[]));\\n        } else {\\n           revert(\\\"Failed to decode Uniswap multicall bytecode\\\");\\n        }\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V3SwapRouter.sol\\n    function exactOutputSingle(\\n        IV3SwapRouter.ExactOutputSingleParams calldata params\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: params.recipient,\\n            tokenIn: params.tokenIn,\\n            tokenOut: params.tokenOut,\\n            amountIn: params.amountInMaximum,\\n            amountOut: params.amountOut,\\n            resultType: MulticallResultAttribute.AMOUNT_IN\\n        });\\n    }\\n    // From Uniswap/swap-router-contracts/contracts/V3SwapRouter.sol\\n    function exactInputSingle(\\n        IV3SwapRouter.ExactInputSingleParams calldata params\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: params.recipient,\\n            tokenIn: params.tokenIn,\\n            tokenOut: params.tokenOut,\\n            amountIn: params.amountIn,\\n            amountOut: params.amountOutMinimum,\\n            resultType: MulticallResultAttribute.AMOUNT_OUT\\n        });\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V3SwapRouter.sol\\n    function exactOutput(\\n        IV3SwapRouter.ExactOutputParams calldata params\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: params.recipient,\\n            tokenIn: params.path.toAddress(0),\\n            tokenOut: params.path.toAddress(params.path.length - 20),\\n            amountIn: params.amountInMaximum,\\n            amountOut: params.amountOut, \\n            resultType: MulticallResultAttribute.AMOUNT_IN\\n        });\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V3SwapRouter.sol\\n    function exactInput(\\n        IV3SwapRouter.ExactInputParams calldata params\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: params.recipient,\\n            tokenIn: params.path.toAddress(0),\\n            tokenOut: params.path.toAddress(params.path.length - 20),\\n            amountIn: params.amountIn,\\n            amountOut: params.amountOutMinimum, \\n            resultType: MulticallResultAttribute.AMOUNT_OUT\\n        });\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V2SwapRouter.sol\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address recipient\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: recipient,\\n            tokenIn: path[0],\\n            tokenOut: path[path.length - 1],\\n            amountIn: amountInMax,\\n            amountOut: amountOut, \\n            resultType: MulticallResultAttribute.AMOUNT_IN\\n        });\\n    }\\n\\n    // From Uniswap/swap-router-contracts/contracts/V2SwapRouter.sol\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address recipient\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: recipient,\\n            tokenIn: path[0],\\n            tokenOut: path[path.length - 1],\\n            amountIn: amountIn,\\n            amountOut: amountOutMin, \\n            resultType: MulticallResultAttribute.AMOUNT_OUT\\n        });\\n    }\\n\\n    function unwrapWETH9(\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: recipient,\\n            tokenIn: address(0),\\n            tokenOut: Denominations.ETH,\\n            amountIn: 0,\\n            amountOut: amountMinimum, \\n            resultType: MulticallResultAttribute.EMPTY\\n        });\\n    }\\n\\n    function refundETH() external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: address(0),\\n            tokenIn: address(0),\\n            tokenOut: address(0),\\n            amountIn: 0,\\n            amountOut: 0,\\n            resultType: MulticallResultAttribute.EMPTY\\n        });\\n    }\\n\\n    function selfPermit(\\n        address, uint256, uint256, uint8, bytes32, bytes32\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: address(0),\\n            tokenIn: address(0),\\n            tokenOut: address(0),\\n            amountIn: 0,\\n            amountOut: 0, \\n            resultType: MulticallResultAttribute.EMPTY\\n        });\\n    }\\n\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external pure returns (MulticallData memory) {\\n        return MulticallData({\\n            recipient: recipient,\\n            tokenIn: address(0),\\n            tokenOut: token,\\n            amountIn: 0,\\n            amountOut: amountMinimum, \\n            resultType: MulticallResultAttribute.EMPTY\\n        });\\n    }\\n\\n    uint256[50] private __gap;\\n\\n}\",\"keccak256\":\"0x07bafaf92acd0b2bd545393e552b8a9f91483eab5cf997ff868ec19ad164d547\",\"license\":\"GPL-3.0\"},\"contracts/interface/IAccountingSystem.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity 0.8.7;\\n\\ninterface IAccountingSystem {\\n    error InputLengthNotMatch(uint256 count1, uint256 count2);\\n    error OwnerNotPermit(address priceGateway);\\n    error PairNotSupport(address asset, address base);\\n    error PriceGatewayExist(address priceGateway);\\n    error PriceGatewayOmit(address priceGateway);\\n    event AddPriceGateway(address priceGateway);\\n    event Initialized(uint8 version);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function addPriceGateway(address priceGateway) external;\\n\\n    function assetPrice(\\n        address asset,\\n        address base,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function defaultPriceGateway() external view returns (address);\\n\\n    function initialize(address[] memory _priceGateways) external;\\n\\n    function isSupportedPair(address asset, address base)\\n        external\\n        view\\n        returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function priceGateways(address) external view returns (bool);\\n\\n    function renounceOwnership() external;\\n\\n    function setTokenPairPriceGatewayMap(\\n        address[] memory _assets,\\n        address[] memory _bases,\\n        address priceGateway\\n    ) external;\\n\\n    function tokenPairPriceGatewayMap(address, address)\\n        external\\n        view\\n        returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"count1\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"count2\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"InputLengthNotMatch\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"priceGateway\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnerNotPermit\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"base\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PairNotSupport\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"priceGateway\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PriceGatewayExist\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"priceGateway\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PriceGatewayOmit\\\",\\\"type\\\":\\\"error\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"priceGateway\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AddPriceGateway\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnershipTransferred\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"priceGateway\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"addPriceGateway\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"base\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"assetPrice\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"defaultPriceGateway\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"_priceGateways\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"base\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"isSupportedPair\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"owner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"priceGateways\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"renounceOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"_assets\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"_bases\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"priceGateway\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setTokenPairPriceGatewayMap\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"tokenPairPriceGatewayMap\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"transferOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\\n*/\\n\",\"keccak256\":\"0x924ceea48efb98af443cdf3051dbb1d2e6f7f6e1213ebaacea0239452a0d3de0\",\"license\":\"GPL-3.0\"},\"contracts/interface/IBudgetApprovalExecutee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\ninterface IBudgetApprovalExecutee {\\n    function executeByBudgetApproval(address, bytes memory, uint256) external returns (bytes memory);\\n    function createBudgetApprovals(address[] calldata, bytes[] calldata) external;\\n    function team() external view returns (address);\\n    function accountingSystem() external view returns (address);\\n}\",\"keccak256\":\"0x74422883e34c9578dcc550e37f8fc75028a995e44cdc2705d6a398c3987bd6ed\",\"license\":\"GPL-3.0\"},\"contracts/interface/ITeam.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity 0.8.7;\\n\\ninterface ITeam {\\n    error InvalidAddress(address addr);\\n    error MemberExists(uint256 tokenId, address member);\\n    error MemberNotFound(uint256 tokenId, address member);\\n    error TransferNotAllowed();\\n    error Unauthorized();\\n    event AddMembers(uint256 tokenId, address[] members);\\n    event AddTeam(\\n        uint256 tokenId,\\n        address minter,\\n        string name,\\n        string description\\n    );\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n    event EditInfo(string name, string description, uint256 tokenId);\\n    event Initialized(uint8 version);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event RemoveMembers(uint256 tokenId, address[] members);\\n    event SetMinter(uint256 tokenId, address minter);\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n    event URI(string value, uint256 indexed id);\\n\\n    function addMembers(address[] memory members, uint256 tokenId) external;\\n\\n    function addTeam(\\n        string memory name,\\n        address minter,\\n        address[] memory members,\\n        string memory description\\n    ) external returns (uint256);\\n\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function descriptionOf(uint256) external view returns (string memory);\\n\\n    function initialize() external;\\n\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function minterOf(uint256) external view returns (address);\\n\\n    function nameOf(uint256) external view returns (string memory);\\n\\n    function owner() external view returns (address);\\n\\n    function removeMembers(address[] memory members, uint256 tokenId) external;\\n\\n    function renounceOwnership() external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function setInfo(\\n        string memory name,\\n        string memory description,\\n        uint256 tokenId\\n    ) external;\\n\\n    function setMinter(address minter, uint256 tokenId) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function uri(uint256 _id) external view returns (string memory);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"addr\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"InvalidAddress\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"member\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"MemberExists\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"member\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"MemberNotFound\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"TransferNotAllowed\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"Unauthorized\\\",\\\"type\\\":\\\"error\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"AddMembers\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"minter\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"AddTeam\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"ApprovalForAll\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"EditInfo\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnershipTransferred\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"RemoveMembers\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"minter\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SetMinter\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"values\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"TransferBatch\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"TransferSingle\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"URI\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"addMembers\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"minter\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"addTeam\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"accounts\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"balanceOfBatch\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"descriptionOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"isApprovedForAll\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"minterOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"nameOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"owner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"removeMembers\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"renounceOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"safeBatchTransferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"safeTransferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setApprovalForAll\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInfo\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"minter\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setMinter\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes4\\\",\\\"name\\\":\\\"interfaceId\\\",\\\"type\\\":\\\"bytes4\\\"}],\\\"name\\\":\\\"supportsInterface\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"transferOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"uri\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\\n*/\\n\",\"keccak256\":\"0xc4ec98060a144a17b5fcb5215301b165b96fe3e541e1c744610fbdd5e952d302\",\"license\":\"GPL-3.0\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity 0.8.7;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes4(bytes memory _bytes, uint256 _start) internal pure returns (bytes4) {\\n        require(_bytes.length >= _start + 4, \\\"toBytes4_outOfBounds\\\");\\n        bytes4 tempBytes4;\\n\\n        assembly {\\n            tempBytes4 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes4;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\",\"keccak256\":\"0x2a8c053fd6fdc1a23ef9a50614500aa9b2438719725e6bd224d2fa090ecbea60\",\"license\":\"Unlicense\"},\"contracts/lib/Constant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Constant {\\n    bytes32 public constant BEACON_NAME_DAO = bytes32(keccak256(\\\"adam.dao\\\"));\\n    bytes32 public constant BEACON_NAME_MEMBERSHIP = bytes32(keccak256(\\\"adam.dao.membership\\\"));\\n    bytes32 public constant BEACON_NAME_MEMBER_TOKEN = bytes32(keccak256(\\\"adam.dao.member_token\\\"));\\n    bytes32 public constant BEACON_NAME_LIQUID_POOL = bytes32(keccak256(\\\"adam.dao.liquid_pool\\\"));\\n    bytes32 public constant BEACON_NAME_GOVERN = bytes32(keccak256(\\\"adam.dao.govern\\\"));\\n    bytes32 public constant BEACON_NAME_TEAM = bytes32(keccak256(\\\"adam.dao.team\\\"));\\n    bytes32 public constant BEACON_NAME_ACCOUNTING_SYSTEM = bytes32(keccak256(\\\"adam.dao.accounting_system\\\"));\\n\\n    address public constant WETH_ADDRESS = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6;\\n    address public constant UNISWAP_ROUTER = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n    address public constant FEED_REGISTRY = 0xaBC30D61D30f19de38897EBA18252868B3459664;\\n    address public constant BRIDGE_CURRENCY = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint public constant STALE_PRICE_DELAY = 86400;\\n}\\n\",\"keccak256\":\"0x09ebd8c64dc4142424b90cc41e536ffe457b082258a30722ee6106b076aa9427\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000036565b6200002662000036565b6200003062000036565b620000f8565b600054610100900460ff1615620000a35760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000f6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b614c6180620001086000396000f3fe6080604052600436106102c95760003560e01c806378e9792511610175578063bc9c5e90116100dc578063e019c23c11610095578063ee22610b1161006f578063ee22610b146108de578063f3995c67146108f1578063f5c0385214610911578063f961f79a1461092f57600080fd5b8063e019c23c14610889578063e99dd444146108a9578063ec3ca875146108be57600080fd5b8063bc9c5e90146107ec578063c34c08e51461080c578063cf26fec61461082a578063d96c91961461083f578063de755e2f14610854578063df2ab5bb1461086957600080fd5b806397c85a611161012e57806397c85a61146106c65780639ace38c2146106e6578063a63cee6d14610752578063a7d69bd214610782578063b18b32fb146107b2578063b858183f146107cc57600080fd5b806378e979251461062f5780637a5a0d13146106445780637cd47d9314610664578063850154371461067957806385f2aef21461069357806392a85fde146106a857600080fd5b8063472b43f3116102345780635ad32502116101ed57806363d727dc116101c757806363d727dc146105985780636bdebe5e146105bf578063735631ad146105f8578063765b60321461061a57600080fd5b80635ad325021461054b578063608e09121461056357806360d8bb221461057857600080fd5b8063472b43f31461046c57806349404b7c1461048c5780634aa4a4fc146104ac5780634c41e0e3146104e75780635023b4df1461051657806350bd881f1461053657600080fd5b80631a39d8ef116102865780631a39d8ef146103bd5780631f1bd692146103d35780633197cbb6146103e857806331a7bdd9146103fd5780633814d2511461041f57806342712a671461044c57600080fd5b806303ff90f6146102ce57806304e45aaf146102f257806306fdde031461031f57806309b813461461037557806312210e8a1461039557806314b893f9146103aa575b600080fd5b3480156102da57600080fd5b506008545b6040519081526020015b60405180910390f35b3480156102fe57600080fd5b5061031261030d3660046143a7565b61095e565b6040516102e9919061493d565b34801561032b57600080fd5b506103686040518060400160405280601e81526020017f556e6973776170204c69717569642042756467657420417070726f76616c000081525081565b6040516102e991906148d3565b34801561038157600080fd5b50610312610390366004614373565b6109ed565b3480156103a157600080fd5b50610312610ac7565b6102df6103b836600461406d565b610b04565b3480156103c957600080fd5b506102df60455481565b3480156103df57600080fd5b50610368610c4b565b3480156103f457600080fd5b50600e546102df565b34801561040957600080fd5b50610412610cdd565b6040516102e99190614823565b34801561042b57600080fd5b5061043f61043a366004614307565b610ddb565b6040516102e99190614885565b34801561045857600080fd5b50610312610467366004614566565b6110bd565b34801561047857600080fd5b50610312610487366004614566565b611171565b34801561049857600080fd5b506103126104a73660046144eb565b61121d565b3480156104b857600080fd5b5073b4fbf271143f4fbf7b91a5ded31805e42b2208d65b6040516001600160a01b0390911681526020016102e9565b3480156104f357600080fd5b5060465461050690610100900460ff1681565b60405190151581526020016102e9565b34801561052257600080fd5b506103126105313660046143a7565b61129d565b34801561054257600080fd5b50600c546102df565b34801561055757600080fd5b50600b5460ff16610506565b34801561056f57600080fd5b506104cf611328565b34801561058457600080fd5b506102df610593366004613f6f565b6113b1565b3480156105a457600080fd5b506105ad611547565b60405160ff90911681526020016102e9565b3480156105cb57600080fd5b506105066105da366004613e58565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561060457600080fd5b506106186106133660046144b9565b611604565b005b34801561062657600080fd5b506104cf600181565b34801561063b57600080fd5b50600d546102df565b34801561065057600080fd5b506104cf61065f3660046144b9565b6116ec565b34801561067057600080fd5b50610368611716565b34801561068557600080fd5b506044546105069060ff1681565b34801561069f57600080fd5b506104cf611725565b3480156106b457600080fd5b506041546001600160a01b03166104cf565b3480156106d257600080fd5b506106186106e136600461451b565b611771565b3480156106f257600080fd5b506107416107013660046144b9565b600260208190526000918252604090912080549181015460039091015460ff8083169263ffffffff61010082041692650100000000009091049091169085565b6040516102e995949392919061495f565b34801561075e57600080fd5b5061050661076d366004613e58565b60436020526000908152604090205460ff1681565b34801561078e57600080fd5b5061050661079d366004613e58565b60476020526000908152604090205460ff1681565b3480156107be57600080fd5b506046546105ad9060ff1681565b3480156107d857600080fd5b506103126107e7366004614373565b611928565b3480156107f857600080fd5b50610506610807366004613e58565b6119bc565b34801561081857600080fd5b506003546001600160a01b03166104cf565b34801561083657600080fd5b50610618611a65565b34801561084b57600080fd5b506007546102df565b34801561086057600080fd5b506004546102df565b34801561087557600080fd5b50610312610884366004613f9b565b611bf5565b34801561089557600080fd5b506102df6108a4366004613eeb565b611c62565b3480156108b557600080fd5b506104cf600281565b3480156108ca57600080fd5b506106186108d93660046143c3565b611d5a565b6106186108ec3660046144b9565b611fb6565b3480156108fd57600080fd5b5061031261090c366004613fdd565b6122a3565b34801561091d57600080fd5b506005546001600160a01b03166104cf565b34801561093b57600080fd5b5061094f61094a3660046142c3565b6122e6565b6040516102e993929190614721565b610966613921565b6040805160c08101909152806109826080850160608601613e58565b6001600160a01b0316815260209081019061099f90850185613e58565b6001600160a01b031681526020018360200160208101906109c09190613e58565b6001600160a01b031681526080840135602082015260a0840135604082015260600160025b905292915050565b6109f5613921565b6040518060c00160405280836020016020810190610a139190613e58565b6001600160a01b03168152602001610a6d6000610a3086806149de565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061241c9050565b6001600160a01b03168152602001610a9f6014610a8a86806149de565b610a95929150614af7565b610a3086806149de565b6001600160a01b031681526060808501356020830152604080860135908301520160016109e5565b610acf613921565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a0820152919050565b6000610b0f33612481565b610b2c576040516341c8302160e11b815260040160405180910390fd5b610b3a600180546001019055565b6000610b4560015490565b6000818152600260209081526040909120828155895192935091610b71916001840191908b0190613954565b506002810180546501000000000065ffffffffff001990911661010063ffffffff8b160265ff0000000000191617179055600854610bcb57600082815260026020819052604090912001805460ff19166001179055610be6565b600082815260026020819052604090912001805460ff191690555b600281015460405183917f8a5186dbaf6f344b2837e11834be94edebb633f05034f422c6b1fe1595b4d0cc91610c29918c918c9160ff16908b908b9033906147c8565b60405180910390a28515610c4057610c4082611fb6565b509695505050505050565b606060098054610c5a90614b51565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8690614b51565b8015610cd35780601f10610ca857610100808354040283529160200191610cd3565b820191906000526020600020905b815481529060010190602001808311610cb657829003601f168201915b5050505050905090565b6040805160038082526080820190925260609160009190816020015b6060815260200190600190039081610cf95790505090506040518060400160405280600a8152602001696164647265737320746f60b01b81525081600081518110610d4657610d46614bcd565b60200260200101819052506040518060400160405280600a8152602001696279746573206461746160b01b81525081600181518110610d8757610d87614bcd565b60200260200101819052506040518060400160405280600d81526020016c75696e743235362076616c756560981b81525081600281518110610dcb57610dcb614bcd565b6020908102919091010152919050565b60606000610de8856124c1565b90506060600085905082516001600160401b03811115610e0a57610e0a614be3565b604051908082528060200260200182016040528015610e4357816020015b610e30613921565b815260200190600190039081610e285790505b5093508451600014610e665784806020019051810190610e639190614039565b91505b60005b835181101561109357600080306001600160a01b0316868481518110610e9157610e91614bcd565b6020026020010151604051610ea69190614705565b600060405180830381855afa9150503d8060008114610ee1576040519150601f19603f3d011682016040523d82523d6000602084013e610ee6565b606091505b509150915081610f1457806040516354be790560e01b8152600401610f0b91906148d3565b60405180910390fd5b600081806020019051810190610f2a919061449d565b60208101519091506001600160a01b031673b4fbf271143f4fbf7b91a5ded31805e42b2208d6148015610f5c57508415155b15610fb2578481606001511115610f8657604051630384a1ed60e31b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60208201526060810151610faf9086614af7565b94505b85511561105f5760018160a001516002811115610fd157610fd1614bb7565b141561100e57858481518110610fe957610fe9614bcd565b602002602001015180602001905181019061100491906144d2565b606082015261105f565b60028160a00151600281111561102657611026614bb7565b141561105f5785848151811061103e5761103e614bcd565b602002602001015180602001905181019061105991906144d2565b60808201525b8088858151811061107257611072614bcd565b6020026020010181905250505050808061108b90614b86565b915050610e69565b5080156110b357604051632dc2279b60e11b815260040160405180910390fd5b5050509392505050565b6110c5613921565b6040518060c00160405280836001600160a01b03168152602001858560008181106110f2576110f2614bcd565b90506020020160208101906111079190613e58565b6001600160a01b031681526020018585611122600182614af7565b81811061113157611131614bcd565b90506020020160208101906111469190613e58565b6001600160a01b03168152602081018790526040810188905260600160015b90529695505050505050565b611179613921565b6040518060c00160405280836001600160a01b03168152602001858560008181106111a6576111a6614bcd565b90506020020160208101906111bb9190613e58565b6001600160a01b0316815260200185856111d6600182614af7565b8181106111e5576111e5614bcd565b90506020020160208101906111fa9190613e58565b6001600160a01b0316815260208101889052604081018790526060016002611165565b611225613921565b6040518060c00160405280836001600160a01b0316815260200160006001600160a01b0316815260200173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168152602001600081526020018481526020016000600281111561129257611292614bb7565b905290505b92915050565b6112a5613921565b6040805160c08101909152806112c16080850160608601613e58565b6001600160a01b031681526020908101906112de90850185613e58565b6001600160a01b031681526020018360200160208101906112ff9190613e58565b6001600160a01b0316815260a084013560208201526080840135604082015260600160016109e5565b600061133c6005546001600160a01b031690565b6001600160a01b031663608e09126040518163ffffffff1660e01b815260040160206040518083038186803b15801561137457600080fd5b505afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190613e75565b905090565b6000806113c66041546001600160a01b031690565b905060006113d2611328565b90506113dc611328565b6001600160a01b031663ce58da33866113fd6041546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b919061422c565b6114be57846114926041546001600160a01b031690565b604051633d487fe560e11b81526001600160a01b03928316600482015291166024820152604401610f0b565b604051633806708f60e21b81526001600160a01b0382169063e019c23c906114ee90889086908990600401614721565b60206040518083038186803b15801561150657600080fd5b505afa15801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e91906144d2565b95945050505050565b60008061155c6041546001600160a01b031690565b90506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561158b57601291505090565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c457600080fd5b505afa9250505080156115f4575060408051601f3d908101601f191682019092526115f1918101906145d0565b60015b61129757600091505090565b5090565b61160d33612481565b61162a576040516341c8302160e11b815260040160405180910390fd5b8061163460015490565b101561165657604051630761edaf60e51b815260048101829052602401610f0b565b600081815260026020819052604090912081015460ff169081600381111561168057611680614bb7565b14156116a3578181604051637006f4f960e11b8152600401610f0b92919061494b565b6000828152600260208190526040808320909101805460ff191660031790555183917f92a917be073b79ab50f9d997e9514a5d101e052ce04228014947e7883a7c034691a25050565b604281815481106116fc57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600a8054610c5a90614b51565b60006117396005546001600160a01b031690565b6001600160a01b03166385f2aef26040518163ffffffff1660e01b815260040160206040518083038186803b15801561137457600080fd5b61177a336125ad565b611797576040516321d9821d60e01b815260040160405180910390fd5b826117a160015490565b10156117c357604051630761edaf60e51b815260048101849052602401610f0b565b600083815260026020819052604082209081015460039091015460ff90911691906117ef906001614a9e565b9050600082600381111561180557611805614bb7565b141580156118255750600182600381111561182257611822614bb7565b14155b15611847578482604051637006f4f960e11b8152600401610f0b92919061494b565b600085815260026020908152604080832033845260040190915290205460ff161561188557604051634b1a897d60e01b815260040160405180910390fd5b6000858152600260208181526040808420338552600481018352908420805460ff1916600117905592889052526003018190556118c160085490565b81106118e557600085815260026020819052604090912001805460ff191660011790555b847f3399030f87676a97e30e211a48f9c46e2ff806d0b4cedf7100782f08c52902c933868660405161191993929190614779565b60405180910390a25050505050565b611930613921565b6040518060c0016040528083602001602081019061194e9190613e58565b6001600160a01b0316815260200161196b6000610a3086806149de565b6001600160a01b031681526020016119886014610a8a86806149de565b6001600160a01b0316815260200183604001358152602001836060013581526020016002808111156109e5576109e5614bb7565b60006119c6611328565b6001600160a01b031663ce58da33836119e76041546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015611a2d57600080fd5b505afa158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611297919061422c565b6005546001600160a01b03163314611a905760405163668faa7560e01b815260040160405180910390fd5b6040517368b3465833fb72a70ecdf485e0e4c7bd8665fc456024820152600019604482015260009060640160408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b17905290506000611afb6005546001600160a01b031690565b60425490915060005b81811015611bef57600060428281548110611b2157611b21614bcd565b6000918252602090912001546001600160a01b0316905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8114611bdc5760405163d3abc28b60e01b81526001600160a01b0385169063d3abc28b90611b849084908990600090600401614745565b600060405180830381600087803b158015611b9e57600080fd5b505af1158015611bb2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bda919081019061428f565b505b5080611be781614b86565b915050611b04565b50505050565b611bfd613921565b6040518060c00160405280836001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b031681526020016000815260200184815260200160006002811115611c5657611c56614bb7565b905290505b9392505050565b600080611c6d611328565b9050611c77611328565b60405163ce58da3360e01b81526001600160a01b0387811660048301528681166024830152919091169063ce58da339060440160206040518083038186803b158015611cc257600080fd5b505afa158015611cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfa919061422c565b611d2a57604051633d487fe560e11b81526001600160a01b03808716600483015285166024820152604401610f0b565b604051633806708f60e21b81526001600160a01b0382169063e019c23c906114ee90889088908890600401614721565b600054610100900460ff1615808015611d7a5750600054600160ff909116105b80611d945750303b158015611d94575060005460ff166001145b611df75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610f0b565b6000805460ff191660011790558015611e1a576000805461ff0019166101001790555b611e238a6125dc565b6044805460ff199081168715151790915560458590556046805490911660ff8516179055604180546001600160a01b0319166001600160a01b03841617905560005b8951811015611ea257611e908a8281518110611e8357611e83614bcd565b6020026020010151612882565b80611e9a81614b86565b915050611e65565b506046805461ff0019166101008a15150217905560005b86811015611f0257611ef0888883818110611ed657611ed6614bcd565b9050602002016020810190611eeb9190613e58565b6129c3565b80611efa81614b86565b915050611eb9565b506000611f0d611328565b6001600160a01b03161415611f645760405162461bcd60e51b815260206004820152601c60248201527f4163636f756e74696e6753797374656d206973207265717569726564000000006044820152606401610f0b565b8015611faa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b60008181526002602081905260409091200154819060019060ff1681816003811115611fe457611fe4614bb7565b14612006578281604051637006f4f960e11b8152600401610f0b92919061494b565b600084815260026020819052604090912001548490610100900463ffffffff1642111561204957604051636634e92360e01b815260048101829052602401610f0b565b600d5442101561206c576040516319b9482d60e31b815260040160405180910390fd5b600e54421061208d576040516268af4b60e91b815260040160405180910390fd5b61209633612481565b6120b3576040516341c8302160e11b815260040160405180910390fd5b60006120c1600b5460ff1690565b905060006120ce600c5490565b9050600060026000898152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b828210156121b457838290600052602060002001805461212790614b51565b80601f016020809104026020016040519081016040528092919081815260200182805461215390614b51565b80156121a05780601f10612175576101008083540402835291602001916121a0565b820191906000526020600020905b81548152906001019060200180831161218357829003601f168201915b505050505081526020019060010190612108565b50505050905060005b815181101561223857831580156121d2575082155b156121f05760405163a5be600560e01b815260040160405180910390fd5b8361220357826121ff81614b3a565b9350505b6122268983838151811061221957612219614bcd565b6020026020010151612a73565b8061223081614b86565b9150506121bd565b50600c82905560008881526002602081905260409091208101805460ff19166001830217905550877f9060adf413860c5ab6e376e0aa4269e49a13f0853edb1583fce8129d4c756d79823360405161229192919061479e565b60405180910390a25050505050505050565b6122ab613921565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a0820152979650505050505050565b60008080806122f58682612b42565b90506001600160e01b03198116630d0e30db60e41b14156123475773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73b4fbf271143f4fbf7b91a5ded31805e42b2208d68693509350935050612415565b6001600160e01b03198116632e1a7d4d60e01b14156123c35773b4fbf271143f4fbf7b91a5ded31805e42b2208d673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6123a46004808a5161239c9190614af7565b8a9190612b9f565b8060200190518101906123b791906144d2565b93509350935050612415565b60405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f206465636f646520556e69737761702062797465636f646044820152606560f81b6064820152608401610f0b565b9250925092565b6000612429826014614a9e565b835110156124715760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610f0b565b500160200151600160601b900490565b60006124956003546001600160a01b031690565b6001600160a01b0316826001600160a01b031614806112975750611297826124bc60045490565b612cac565b606060006124cf8382612b42565b90506001600160e01b031981166316b9007760e21b14156125205761250460048085516124fc9190614af7565b859190612b9f565b8060200190518101906125179190614249565b92506125a79050565b6001600160e01b03198116631f0464d160e01b141561254b5761250460048085516124fc9190614af7565b60405162461bcd60e51b815260206004820152602b60248201527f4661696c656420746f206465636f646520556e6973776170206d756c7469636160448201526a6c6c2062797465636f646560a81b6064820152608401610f0b565b50919050565b6001600160a01b03811660009081526006602052604081205460ff16806112975750611297826124bc60075490565b600054610100900460ff166126475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f0b565b606081013515801561266a57506126616040820182614995565b90508160800135115b1561268857604051635039c6e160e01b815260040160405180910390fd5b600580546001600160a01b031916331790556126a76020820182613e58565b600380546001600160a01b0319166001600160a01b03929092169190911790556126d460a08201826149de565b6126e0916009916139ad565b506126ee60c08201826149de565b6126fa91600a916139ad565b50608081013560085560e0810135600d55610100810135600e556127266101408201610120830161420f565b600b805460ff1916911515919091179055610140810135600c556020810135600455606081013560075560005b6127606040830183614995565b905081101561284c5760016006600061277c6040860186614995565b8581811061278c5761278c614bcd565b90506020020160208101906127a19190613e58565b6001600160a01b0316815260208101919091526040908101600020805460ff1916921515929092179091557f4664777dbfbcb27de0f602e1da5d5a259992cd7edf5b29192929c96e8fd50def906127fa90840184614995565b8381811061280a5761280a614bcd565b905060200201602081019061281f9190613e58565b6040516001600160a01b03909116815260200160405180910390a18061284481614b86565b915050612753565b506000612857611725565b6001600160a01b0316141561287f576040516309ec7e6960e41b815260040160405180910390fd5b50565b6001600160a01b03811660009081526043602052604090205460ff16156128de5760405162461bcd60e51b815260206004820152601060248201526f223ab83634b1b0ba32b2103a37b5b2b760811b6044820152606401610f0b565b6128e7816119bc565b6129285760405162461bcd60e51b81526020600482015260126024820152712ab73932b9b7b63b30b13632903a37b5b2b760711b6044820152606401610f0b565b6042805460018082019092557f38dfe4635b27babeca8be38d3b448cb5161a639b899a14825ba9c8d7892eb8c30180546001600160a01b0319166001600160a01b038416908117909155600081815260436020908152604091829020805460ff1916909417909355519081527f14009112f2dcb15cad32dab6bf972d6d85286e4ae1178f27323ffe25359459e691015b60405180910390a150565b6001600160a01b03811660009081526047602052604090205460ff1615612a1f5760405162461bcd60e51b815260206004820152601060248201526f223ab83634b1b0ba32b2103a37b5b2b760811b6044820152606401610f0b565b6001600160a01b038116600081815260476020908152604091829020805460ff1916600117905590519182527f0df56a0b46d63ff03be79aa2e27aa9f7d6af565748bac8f4b41d6df16ba9f61891016129b8565b600080600083806020019051810190612a8c9190613e92565b919450925090506001600160a01b0383167368b3465833fb72a70ecdf485e0e4c7bd8665fc451415612ac957612ac485848484612d3f565b612b3b565b6001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d61415612afa57612ac4858484846133eb565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b6044820152606401610f0b565b5050505050565b6000612b4f826004614a9e565b83511015612b965760405162461bcd60e51b8152602060048201526014602482015273746f4279746573345f6f75744f66426f756e647360601b6044820152606401610f0b565b50016020015190565b606081612bad81601f614a9e565b1015612bec5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610f0b565b612bf68284614a9e565b84511015612c3a5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610f0b565b606082158015612c595760405191506000825260208201604052612ca3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612c92578051835260209283019201612c7a565b5050858452601f01601f1916604052505b50949350505050565b600080612cb7611725565b604051627eeac760e11b81526001600160a01b03868116600483015260248201869052919091169062fdd58e9060440160206040518083038186803b158015612cff57600080fd5b505afa158015612d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3791906144d2565b119392505050565b6000612d49613786565b90506000612d5f6005546001600160a01b031690565b90506000816001600160a01b031663d3abc28b8787876040518463ffffffff1660e01b8152600401612d9393929190614745565b600060405180830381600087803b158015612dad57600080fd5b505af1158015612dc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612de9919081019061428f565b604051633814d25160e01b81529091506000903090633814d25190612e1690899089908790600401614908565b60006040518083038186803b158015612e2e57600080fd5b505afa158015612e42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e6a919081019061416d565b60008981526049602090815260408083206048909252822092935091905b835181101561323c576000848281518110612ea557612ea5614bcd565b6020026020010151905060006001600160a01b031681600001516001600160a01b03161480612ede575080516001600160a01b03166001145b80612ef3575080516001600160a01b03166002145b80612f135750866001600160a01b031681600001516001600160a01b0316145b612f5f5760405162461bcd60e51b815260206004820152601960248201527f526563697069656e74206e6f742077686974656c6973746564000000000000006044820152606401610f0b565b6020808201516001600160a01b031660009081529084905260409020546060820151156130ea576020808301516001600160a01b031660009081526043909152604090205460ff16612ff35760405162461bcd60e51b815260206004820152601c60248201527f536f7572636520746f6b656e206e6f742077686974656c6973746564000000006044820152606401610f0b565b8061303057602082810151865460018101885560008881529290922090910180546001600160a01b0319166001600160a01b039092169190911790555b606082015161303f9082614a9e565b84600084602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507368b3465833fb72a70ecdf485e0e4c7bd8665fc456001600160a01b0316336001600160a01b03168e7f6b2315dc82c675e98d173b73a035ea18b30fa040368177ae8dfa90d3cd5a127a856020015186606001516040516130e19291906001600160a01b03929092168252602082015260400190565b60405180910390a45b60008260800151118015613127575081516001600160a01b0316600114806131275750876001600160a01b031682600001516001600160a01b0316145b1561322757604654610100900460ff168061315c57506040808301516001600160a01b031660009081526047602052205460ff165b6131a85760405162461bcd60e51b815260206004820152601c60248201527f54617267657420746f6b656e206e6f742077686974656c6973746564000000006044820152606401610f0b565b7368b3465833fb72a70ecdf485e0e4c7bd8665fc456001600160a01b0316336001600160a01b03168e7ff10ffe9795dc198303bf64c2f1bfec7ed5256325dee3026154df4c82f43c54f08560400151866080015160405161321e9291906001600160a01b03929092168252602082015260400190565b60405180910390a45b5050808061323490614b86565b915050612e88565b5060445460455460ff9091169081158061325d5750604654606460ff909116105b156133dd578354600090815b818110156132d757600087828154811061328557613285614bcd565b60009182526020808320909101546001600160a01b0316808352908990526040909120549091506132b79082906113b1565b6132c19085614a9e565b93505080806132cf90614b86565b915050613269565b50600082116133285760405162461bcd60e51b815260206004820152601e60248201527f5377617020616d6f756e742073686f756c64206e6f74206265207a65726f00006044820152606401610f0b565b83806133345750828211155b6133765760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b585e08185b5bdd5b9d606a1b6044820152606401610f0b565b6133808a836138d2565b6133c25760405162461bcd60e51b815260206004820152601360248201527245786365656465642070657263656e7461676560681b6044820152606401610f0b565b60445460ff166133da576133d68284614af7565b6045555b50505b505050505050505050505050565b60006133f5613786565b60445460455491925060ff16906134146005546001600160a01b031690565b6001600160a01b031663d3abc28b8787876040518463ffffffff1660e01b815260040161344393929190614745565b600060405180830381600087803b15801561345d57600080fd5b505af1158015613471573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613499919081019061428f565b50604051637cb0fbcd60e11b815260009081908190309063f961f79a906134c6908b908b906004016148e6565b60606040518083038186803b1580156134de57600080fd5b505afa1580156134f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135169190613f2c565b925092509250600061352884836113b1565b6001600160a01b03851660009081526043602052604090205490915060ff166135935760405162461bcd60e51b815260206004820152601c60248201527f536f7572636520746f6b656e206e6f742077686974656c6973746564000000006044820152606401610f0b565b604654610100900460ff16806135c157506001600160a01b03831660009081526047602052604090205460ff165b61360d5760405162461bcd60e51b815260206004820152601c60248201527f54617267657420746f6b656e206e6f742077686974656c6973746564000000006044820152606401610f0b565b600081116136685760405162461bcd60e51b815260206004820152602260248201527f5472616e7366657220616d6f756e742073686f756c64206e6f74206265207a65604482015261726f60f01b6064820152608401610f0b565b85806136745750848111155b6136b65760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b585e08185b5bdd5b9d606a1b6044820152606401610f0b565b6136c087826138d2565b6137025760405162461bcd60e51b815260206004820152601360248201527245786365656465642070657263656e7461676560681b6044820152606401610f0b565b85613715576137118186614af7565b6045555b73b4fbf271143f4fbf7b91a5ded31805e42b2208d66001600160a01b0316336001600160a01b03168c7ff2600da0d3c22c74870d03f19fbe7663ec5f72616966e884f806a2d44ee7d64487878760405161377193929190614721565b60405180910390a45050505050505050505050565b6042546000908161379f6005546001600160a01b031690565b905060005b828110156138cc576000604282815481106137c1576137c1614bcd565b6000918252602090912001546001600160a01b0316905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81141561382d5761381c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee846001600160a01b0316316113b1565b6138269086614a9e565b94506138b9565b6040516370a0823160e01b81526001600160a01b0384811660048301526138ac9183918216906370a082319060240160206040518083038186803b15801561387457600080fd5b505afa158015613888573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059391906144d2565b6138b69086614a9e565b94505b50806138c481614b86565b9150506137a4565b50505090565b60465460009060ff1660648114156138ee576001915050611297565b836138fd576000915050611297565b606461390c60ff831686614ad8565b6139169190614ab6565b909211159392505050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b8280548282559060005260206000209081019282156139a1579160200282015b828111156139a15782518051613991918491602090910190613a2d565b5091602001919060010190613974565b50611600929150613aa1565b8280546139b990614b51565b90600052602060002090601f0160209004810192826139db5760008555613a21565b82601f106139f45782800160ff19823516178555613a21565b82800160010185558215613a21579182015b82811115613a21578235825591602001919060010190613a06565b50611600929150613abe565b828054613a3990614b51565b90600052602060002090601f016020900481019282613a5b5760008555613a21565b82601f10613a7457805160ff1916838001178555613a21565b82800160010185558215613a21579182015b82811115613a21578251825591602001919060010190613a86565b80821115611600576000613ab58282613ad3565b50600101613aa1565b5b808211156116005760008155600101613abf565b508054613adf90614b51565b6000825580601f10613aef575050565b601f01602090049060005260206000209081019061287f9190613abe565b8035613b1881614bf9565b919050565b60008083601f840112613b2f57600080fd5b5081356001600160401b03811115613b4657600080fd5b6020830191508360208260051b8501011115613b6157600080fd5b9250929050565b600082601f830112613b7957600080fd5b81356020613b8e613b8983614a54565b614a24565b80838252828201915082860187848660051b8901011115613bae57600080fd5b60005b85811015613bd6578135613bc481614bf9565b84529284019290840190600101613bb1565b5090979650505050505050565b600082601f830112613bf457600080fd5b81516020613c04613b8983614a54565b80838252828201915082860187848660051b8901011115613c2457600080fd5b6000805b86811015613c665782516001600160401b03811115613c45578283fd5b613c538b88838d0101613cd0565b8652509385019391850191600101613c28565b509198975050505050505050565b8035613b1881614c0e565b600082601f830112613c9057600080fd5b8135613c9e613b8982614a77565b818152846020838601011115613cb357600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613ce157600080fd5b8151613cef613b8982614a77565b818152846020838601011115613d0457600080fd5b613d15826020830160208701614b0e565b949350505050565b60008083601f840112613d2f57600080fd5b5081356001600160401b03811115613d4657600080fd5b602083019150836020828501011115613b6157600080fd5b6000608082840312156125a757600080fd5b600060e082840312156125a757600080fd5b600061016082840312156125a757600080fd5b600060c08284031215613da757600080fd5b60405160c081018181106001600160401b0382111715613dc957613dc9614be3565b80604052508091508251613ddc81614bf9565b81526020830151613dec81614bf9565b60208201526040830151613dff81614bf9565b80604083015250606083015160608201526080830151608082015260a083015160038110613e2c57600080fd5b60a0919091015292915050565b803563ffffffff81168114613b1857600080fd5b8035613b1881614c1c565b600060208284031215613e6a57600080fd5b8135611c5b81614bf9565b600060208284031215613e8757600080fd5b8151611c5b81614bf9565b600080600060608486031215613ea757600080fd5b8351613eb281614bf9565b60208501519093506001600160401b03811115613ece57600080fd5b613eda86828701613cd0565b925050604084015190509250925092565b600080600060608486031215613f0057600080fd5b8335613f0b81614bf9565b92506020840135613f1b81614bf9565b929592945050506040919091013590565b600080600060608486031215613f4157600080fd5b8351613f4c81614bf9565b6020850151909350613f5d81614bf9565b80925050604084015190509250925092565b60008060408385031215613f8257600080fd5b8235613f8d81614bf9565b946020939093013593505050565b600080600060608486031215613fb057600080fd5b8335613fbb81614bf9565b9250602084013591506040840135613fd281614bf9565b809150509250925092565b60008060008060008060c08789031215613ff657600080fd5b863561400181614bf9565b95506020870135945060408701359350606087013561401f81614c1c565b9598949750929560808101359460a0909101359350915050565b60006020828403121561404b57600080fd5b81516001600160401b0381111561406157600080fd5b613d1584828501613be3565b60008060008060006080868803121561408557600080fd5b6001600160401b03808735111561409b57600080fd5b8635870188601f8201126140ae57600080fd5b803560206140be613b8983614a54565b8083825282820191508285018d848660051b88010111156140de57600080fd5b60005b858110156141185787823511156140f757600080fd5b6141068f8684358a0101613c7f565b845292840192908401906001016140e1565b5050809a50505061412a818b01613e39565b975050505061413b60408801613c74565b935060608701358181111561414f57600080fd5b61415b89828a01613d1d565b979a9699509497509395949350505050565b6000602080838503121561418057600080fd5b82516001600160401b0381111561419657600080fd5b8301601f810185136141a757600080fd5b80516141b5613b8982614a54565b8181528381019083850160c0808502860187018a10156141d457600080fd5b600095505b84861015614201576141eb8a83613d95565b84526001959095019492860192908101906141d9565b509098975050505050505050565b60006020828403121561422157600080fd5b8135611c5b81614c0e565b60006020828403121561423e57600080fd5b8151611c5b81614c0e565b6000806040838503121561425c57600080fd5b8251915060208301516001600160401b0381111561427957600080fd5b61428585828601613be3565b9150509250929050565b6000602082840312156142a157600080fd5b81516001600160401b038111156142b757600080fd5b613d1584828501613cd0565b600080604083850312156142d657600080fd5b82356001600160401b038111156142ec57600080fd5b6142f885828601613c7f565b95602094909401359450505050565b60008060006060848603121561431c57600080fd5b83356001600160401b038082111561433357600080fd5b61433f87838801613c7f565b945060208601359350604086013591508082111561435c57600080fd5b5061436986828701613c7f565b9150509250925092565b60006020828403121561438557600080fd5b81356001600160401b0381111561439b57600080fd5b613d1584828501613d5e565b600060e082840312156143b957600080fd5b611c5b8383613d70565b60008060008060008060008060006101008a8c0312156143e257600080fd5b89356001600160401b03808211156143f957600080fd5b6144058d838e01613d82565b9a5060208c013591508082111561441b57600080fd5b6144278d838e01613b68565b995061443560408d01613c74565b985060608c013591508082111561444b57600080fd5b506144588c828d01613b1d565b909750955061446b905060808b01613c74565b935060a08a0135925061448060c08b01613e4d565b915061448e60e08b01613b0d565b90509295985092959850929598565b600060c082840312156144af57600080fd5b611c5b8383613d95565b6000602082840312156144cb57600080fd5b5035919050565b6000602082840312156144e457600080fd5b5051919050565b600080604083850312156144fe57600080fd5b82359150602083013561451081614bf9565b809150509250929050565b60008060006040848603121561453057600080fd5b8335925060208401356001600160401b0381111561454d57600080fd5b61455986828701613d1d565b9497909650939450505050565b60008060008060006080868803121561457e57600080fd5b853594506020860135935060408601356001600160401b038111156145a257600080fd5b6145ae88828901613b1d565b90945092505060608601356145c281614bf9565b809150509295509295909350565b6000602082840312156145e257600080fd5b8151611c5b81614c1c565b600081518084526020808501808196508360051b8101915082860160005b85811015614635578284038952614623848351614642565b9885019893509084019060010161460b565b5091979650505050505050565b6000815180845261465a816020860160208601614b0e565b601f01601f19169290920160200192915050565b6004811061467e5761467e614bb7565b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0380825116835280602083015116602084015280604083015116604084015250606081015160608301526080810151608083015260a0810151600381106146fa576146fa614bb7565b8060a0840152505050565b60008251614717818460208701614b0e565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038416815260606020820181905260009061476990830185614642565b9050826040830152949350505050565b6001600160a01b038416815260406020820181905260009061153e9083018486614682565b6040815260006147b160408301856145ed565b905060018060a01b03831660208301529392505050565b60a0815260006147db60a08301896145ed565b63ffffffff881660208401526147f4604084018861466e565b8281036060840152614807818688614682565b91505060018060a01b0383166080830152979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561487857603f19888603018452614866858351614642565b9450928501929085019060010161484a565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156148c7576148b48385516146ab565b9284019260c092909201916001016148a1565b50909695505050505050565b602081526000611c5b6020830184614642565b6040815260006148f96040830185614642565b90508260208301529392505050565b60608152600061491b6060830186614642565b84602084015282810360408401526149338185614642565b9695505050505050565b60c0810161129782846146ab565b82815260408101611c5b602083018461466e565b85815260a08101614973602083018761466e565b63ffffffff949094166040820152911515606083015260809091015292915050565b6000808335601e198436030181126149ac57600080fd5b8301803591506001600160401b038211156149c657600080fd5b6020019150600581901b3603821315613b6157600080fd5b6000808335601e198436030181126149f557600080fd5b8301803591506001600160401b03821115614a0f57600080fd5b602001915036819003821315613b6157600080fd5b604051601f8201601f191681016001600160401b0381118282101715614a4c57614a4c614be3565b604052919050565b60006001600160401b03821115614a6d57614a6d614be3565b5060051b60200190565b60006001600160401b03821115614a9057614a90614be3565b50601f01601f191660200190565b60008219821115614ab157614ab1614ba1565b500190565b600082614ad357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615614af257614af2614ba1565b500290565b600082821015614b0957614b09614ba1565b500390565b60005b83811015614b29578181015183820152602001614b11565b83811115611bef5750506000910152565b600081614b4957614b49614ba1565b506000190190565b600181811c90821680614b6557607f821691505b602082108114156125a757634e487b7160e01b600052602260045260246000fd5b6000600019821415614b9a57614b9a614ba1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461287f57600080fd5b801515811461287f57600080fd5b60ff8116811461287f57600080fdfea2646970667358221220d3d86457ffa88c728c9e5ba22d8fb5e1fa2ad546c8a55cbdb76f9336a3cc148264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102c95760003560e01c806378e9792511610175578063bc9c5e90116100dc578063e019c23c11610095578063ee22610b1161006f578063ee22610b146108de578063f3995c67146108f1578063f5c0385214610911578063f961f79a1461092f57600080fd5b8063e019c23c14610889578063e99dd444146108a9578063ec3ca875146108be57600080fd5b8063bc9c5e90146107ec578063c34c08e51461080c578063cf26fec61461082a578063d96c91961461083f578063de755e2f14610854578063df2ab5bb1461086957600080fd5b806397c85a611161012e57806397c85a61146106c65780639ace38c2146106e6578063a63cee6d14610752578063a7d69bd214610782578063b18b32fb146107b2578063b858183f146107cc57600080fd5b806378e979251461062f5780637a5a0d13146106445780637cd47d9314610664578063850154371461067957806385f2aef21461069357806392a85fde146106a857600080fd5b8063472b43f3116102345780635ad32502116101ed57806363d727dc116101c757806363d727dc146105985780636bdebe5e146105bf578063735631ad146105f8578063765b60321461061a57600080fd5b80635ad325021461054b578063608e09121461056357806360d8bb221461057857600080fd5b8063472b43f31461046c57806349404b7c1461048c5780634aa4a4fc146104ac5780634c41e0e3146104e75780635023b4df1461051657806350bd881f1461053657600080fd5b80631a39d8ef116102865780631a39d8ef146103bd5780631f1bd692146103d35780633197cbb6146103e857806331a7bdd9146103fd5780633814d2511461041f57806342712a671461044c57600080fd5b806303ff90f6146102ce57806304e45aaf146102f257806306fdde031461031f57806309b813461461037557806312210e8a1461039557806314b893f9146103aa575b600080fd5b3480156102da57600080fd5b506008545b6040519081526020015b60405180910390f35b3480156102fe57600080fd5b5061031261030d3660046143a7565b61095e565b6040516102e9919061493d565b34801561032b57600080fd5b506103686040518060400160405280601e81526020017f556e6973776170204c69717569642042756467657420417070726f76616c000081525081565b6040516102e991906148d3565b34801561038157600080fd5b50610312610390366004614373565b6109ed565b3480156103a157600080fd5b50610312610ac7565b6102df6103b836600461406d565b610b04565b3480156103c957600080fd5b506102df60455481565b3480156103df57600080fd5b50610368610c4b565b3480156103f457600080fd5b50600e546102df565b34801561040957600080fd5b50610412610cdd565b6040516102e99190614823565b34801561042b57600080fd5b5061043f61043a366004614307565b610ddb565b6040516102e99190614885565b34801561045857600080fd5b50610312610467366004614566565b6110bd565b34801561047857600080fd5b50610312610487366004614566565b611171565b34801561049857600080fd5b506103126104a73660046144eb565b61121d565b3480156104b857600080fd5b5073b4fbf271143f4fbf7b91a5ded31805e42b2208d65b6040516001600160a01b0390911681526020016102e9565b3480156104f357600080fd5b5060465461050690610100900460ff1681565b60405190151581526020016102e9565b34801561052257600080fd5b506103126105313660046143a7565b61129d565b34801561054257600080fd5b50600c546102df565b34801561055757600080fd5b50600b5460ff16610506565b34801561056f57600080fd5b506104cf611328565b34801561058457600080fd5b506102df610593366004613f6f565b6113b1565b3480156105a457600080fd5b506105ad611547565b60405160ff90911681526020016102e9565b3480156105cb57600080fd5b506105066105da366004613e58565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561060457600080fd5b506106186106133660046144b9565b611604565b005b34801561062657600080fd5b506104cf600181565b34801561063b57600080fd5b50600d546102df565b34801561065057600080fd5b506104cf61065f3660046144b9565b6116ec565b34801561067057600080fd5b50610368611716565b34801561068557600080fd5b506044546105069060ff1681565b34801561069f57600080fd5b506104cf611725565b3480156106b457600080fd5b506041546001600160a01b03166104cf565b3480156106d257600080fd5b506106186106e136600461451b565b611771565b3480156106f257600080fd5b506107416107013660046144b9565b600260208190526000918252604090912080549181015460039091015460ff8083169263ffffffff61010082041692650100000000009091049091169085565b6040516102e995949392919061495f565b34801561075e57600080fd5b5061050661076d366004613e58565b60436020526000908152604090205460ff1681565b34801561078e57600080fd5b5061050661079d366004613e58565b60476020526000908152604090205460ff1681565b3480156107be57600080fd5b506046546105ad9060ff1681565b3480156107d857600080fd5b506103126107e7366004614373565b611928565b3480156107f857600080fd5b50610506610807366004613e58565b6119bc565b34801561081857600080fd5b506003546001600160a01b03166104cf565b34801561083657600080fd5b50610618611a65565b34801561084b57600080fd5b506007546102df565b34801561086057600080fd5b506004546102df565b34801561087557600080fd5b50610312610884366004613f9b565b611bf5565b34801561089557600080fd5b506102df6108a4366004613eeb565b611c62565b3480156108b557600080fd5b506104cf600281565b3480156108ca57600080fd5b506106186108d93660046143c3565b611d5a565b6106186108ec3660046144b9565b611fb6565b3480156108fd57600080fd5b5061031261090c366004613fdd565b6122a3565b34801561091d57600080fd5b506005546001600160a01b03166104cf565b34801561093b57600080fd5b5061094f61094a3660046142c3565b6122e6565b6040516102e993929190614721565b610966613921565b6040805160c08101909152806109826080850160608601613e58565b6001600160a01b0316815260209081019061099f90850185613e58565b6001600160a01b031681526020018360200160208101906109c09190613e58565b6001600160a01b031681526080840135602082015260a0840135604082015260600160025b905292915050565b6109f5613921565b6040518060c00160405280836020016020810190610a139190613e58565b6001600160a01b03168152602001610a6d6000610a3086806149de565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061241c9050565b6001600160a01b03168152602001610a9f6014610a8a86806149de565b610a95929150614af7565b610a3086806149de565b6001600160a01b031681526060808501356020830152604080860135908301520160016109e5565b610acf613921565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a0820152919050565b6000610b0f33612481565b610b2c576040516341c8302160e11b815260040160405180910390fd5b610b3a600180546001019055565b6000610b4560015490565b6000818152600260209081526040909120828155895192935091610b71916001840191908b0190613954565b506002810180546501000000000065ffffffffff001990911661010063ffffffff8b160265ff0000000000191617179055600854610bcb57600082815260026020819052604090912001805460ff19166001179055610be6565b600082815260026020819052604090912001805460ff191690555b600281015460405183917f8a5186dbaf6f344b2837e11834be94edebb633f05034f422c6b1fe1595b4d0cc91610c29918c918c9160ff16908b908b9033906147c8565b60405180910390a28515610c4057610c4082611fb6565b509695505050505050565b606060098054610c5a90614b51565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8690614b51565b8015610cd35780601f10610ca857610100808354040283529160200191610cd3565b820191906000526020600020905b815481529060010190602001808311610cb657829003601f168201915b5050505050905090565b6040805160038082526080820190925260609160009190816020015b6060815260200190600190039081610cf95790505090506040518060400160405280600a8152602001696164647265737320746f60b01b81525081600081518110610d4657610d46614bcd565b60200260200101819052506040518060400160405280600a8152602001696279746573206461746160b01b81525081600181518110610d8757610d87614bcd565b60200260200101819052506040518060400160405280600d81526020016c75696e743235362076616c756560981b81525081600281518110610dcb57610dcb614bcd565b6020908102919091010152919050565b60606000610de8856124c1565b90506060600085905082516001600160401b03811115610e0a57610e0a614be3565b604051908082528060200260200182016040528015610e4357816020015b610e30613921565b815260200190600190039081610e285790505b5093508451600014610e665784806020019051810190610e639190614039565b91505b60005b835181101561109357600080306001600160a01b0316868481518110610e9157610e91614bcd565b6020026020010151604051610ea69190614705565b600060405180830381855afa9150503d8060008114610ee1576040519150601f19603f3d011682016040523d82523d6000602084013e610ee6565b606091505b509150915081610f1457806040516354be790560e01b8152600401610f0b91906148d3565b60405180910390fd5b600081806020019051810190610f2a919061449d565b60208101519091506001600160a01b031673b4fbf271143f4fbf7b91a5ded31805e42b2208d6148015610f5c57508415155b15610fb2578481606001511115610f8657604051630384a1ed60e31b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60208201526060810151610faf9086614af7565b94505b85511561105f5760018160a001516002811115610fd157610fd1614bb7565b141561100e57858481518110610fe957610fe9614bcd565b602002602001015180602001905181019061100491906144d2565b606082015261105f565b60028160a00151600281111561102657611026614bb7565b141561105f5785848151811061103e5761103e614bcd565b602002602001015180602001905181019061105991906144d2565b60808201525b8088858151811061107257611072614bcd565b6020026020010181905250505050808061108b90614b86565b915050610e69565b5080156110b357604051632dc2279b60e11b815260040160405180910390fd5b5050509392505050565b6110c5613921565b6040518060c00160405280836001600160a01b03168152602001858560008181106110f2576110f2614bcd565b90506020020160208101906111079190613e58565b6001600160a01b031681526020018585611122600182614af7565b81811061113157611131614bcd565b90506020020160208101906111469190613e58565b6001600160a01b03168152602081018790526040810188905260600160015b90529695505050505050565b611179613921565b6040518060c00160405280836001600160a01b03168152602001858560008181106111a6576111a6614bcd565b90506020020160208101906111bb9190613e58565b6001600160a01b0316815260200185856111d6600182614af7565b8181106111e5576111e5614bcd565b90506020020160208101906111fa9190613e58565b6001600160a01b0316815260208101889052604081018790526060016002611165565b611225613921565b6040518060c00160405280836001600160a01b0316815260200160006001600160a01b0316815260200173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168152602001600081526020018481526020016000600281111561129257611292614bb7565b905290505b92915050565b6112a5613921565b6040805160c08101909152806112c16080850160608601613e58565b6001600160a01b031681526020908101906112de90850185613e58565b6001600160a01b031681526020018360200160208101906112ff9190613e58565b6001600160a01b0316815260a084013560208201526080840135604082015260600160016109e5565b600061133c6005546001600160a01b031690565b6001600160a01b031663608e09126040518163ffffffff1660e01b815260040160206040518083038186803b15801561137457600080fd5b505afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190613e75565b905090565b6000806113c66041546001600160a01b031690565b905060006113d2611328565b90506113dc611328565b6001600160a01b031663ce58da33866113fd6041546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b919061422c565b6114be57846114926041546001600160a01b031690565b604051633d487fe560e11b81526001600160a01b03928316600482015291166024820152604401610f0b565b604051633806708f60e21b81526001600160a01b0382169063e019c23c906114ee90889086908990600401614721565b60206040518083038186803b15801561150657600080fd5b505afa15801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e91906144d2565b95945050505050565b60008061155c6041546001600160a01b031690565b90506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561158b57601291505090565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c457600080fd5b505afa9250505080156115f4575060408051601f3d908101601f191682019092526115f1918101906145d0565b60015b61129757600091505090565b5090565b61160d33612481565b61162a576040516341c8302160e11b815260040160405180910390fd5b8061163460015490565b101561165657604051630761edaf60e51b815260048101829052602401610f0b565b600081815260026020819052604090912081015460ff169081600381111561168057611680614bb7565b14156116a3578181604051637006f4f960e11b8152600401610f0b92919061494b565b6000828152600260208190526040808320909101805460ff191660031790555183917f92a917be073b79ab50f9d997e9514a5d101e052ce04228014947e7883a7c034691a25050565b604281815481106116fc57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600a8054610c5a90614b51565b60006117396005546001600160a01b031690565b6001600160a01b03166385f2aef26040518163ffffffff1660e01b815260040160206040518083038186803b15801561137457600080fd5b61177a336125ad565b611797576040516321d9821d60e01b815260040160405180910390fd5b826117a160015490565b10156117c357604051630761edaf60e51b815260048101849052602401610f0b565b600083815260026020819052604082209081015460039091015460ff90911691906117ef906001614a9e565b9050600082600381111561180557611805614bb7565b141580156118255750600182600381111561182257611822614bb7565b14155b15611847578482604051637006f4f960e11b8152600401610f0b92919061494b565b600085815260026020908152604080832033845260040190915290205460ff161561188557604051634b1a897d60e01b815260040160405180910390fd5b6000858152600260208181526040808420338552600481018352908420805460ff1916600117905592889052526003018190556118c160085490565b81106118e557600085815260026020819052604090912001805460ff191660011790555b847f3399030f87676a97e30e211a48f9c46e2ff806d0b4cedf7100782f08c52902c933868660405161191993929190614779565b60405180910390a25050505050565b611930613921565b6040518060c0016040528083602001602081019061194e9190613e58565b6001600160a01b0316815260200161196b6000610a3086806149de565b6001600160a01b031681526020016119886014610a8a86806149de565b6001600160a01b0316815260200183604001358152602001836060013581526020016002808111156109e5576109e5614bb7565b60006119c6611328565b6001600160a01b031663ce58da33836119e76041546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015611a2d57600080fd5b505afa158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611297919061422c565b6005546001600160a01b03163314611a905760405163668faa7560e01b815260040160405180910390fd5b6040517368b3465833fb72a70ecdf485e0e4c7bd8665fc456024820152600019604482015260009060640160408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b17905290506000611afb6005546001600160a01b031690565b60425490915060005b81811015611bef57600060428281548110611b2157611b21614bcd565b6000918252602090912001546001600160a01b0316905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8114611bdc5760405163d3abc28b60e01b81526001600160a01b0385169063d3abc28b90611b849084908990600090600401614745565b600060405180830381600087803b158015611b9e57600080fd5b505af1158015611bb2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bda919081019061428f565b505b5080611be781614b86565b915050611b04565b50505050565b611bfd613921565b6040518060c00160405280836001600160a01b0316815260200160006001600160a01b03168152602001856001600160a01b031681526020016000815260200184815260200160006002811115611c5657611c56614bb7565b905290505b9392505050565b600080611c6d611328565b9050611c77611328565b60405163ce58da3360e01b81526001600160a01b0387811660048301528681166024830152919091169063ce58da339060440160206040518083038186803b158015611cc257600080fd5b505afa158015611cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfa919061422c565b611d2a57604051633d487fe560e11b81526001600160a01b03808716600483015285166024820152604401610f0b565b604051633806708f60e21b81526001600160a01b0382169063e019c23c906114ee90889088908890600401614721565b600054610100900460ff1615808015611d7a5750600054600160ff909116105b80611d945750303b158015611d94575060005460ff166001145b611df75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610f0b565b6000805460ff191660011790558015611e1a576000805461ff0019166101001790555b611e238a6125dc565b6044805460ff199081168715151790915560458590556046805490911660ff8516179055604180546001600160a01b0319166001600160a01b03841617905560005b8951811015611ea257611e908a8281518110611e8357611e83614bcd565b6020026020010151612882565b80611e9a81614b86565b915050611e65565b506046805461ff0019166101008a15150217905560005b86811015611f0257611ef0888883818110611ed657611ed6614bcd565b9050602002016020810190611eeb9190613e58565b6129c3565b80611efa81614b86565b915050611eb9565b506000611f0d611328565b6001600160a01b03161415611f645760405162461bcd60e51b815260206004820152601c60248201527f4163636f756e74696e6753797374656d206973207265717569726564000000006044820152606401610f0b565b8015611faa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b60008181526002602081905260409091200154819060019060ff1681816003811115611fe457611fe4614bb7565b14612006578281604051637006f4f960e11b8152600401610f0b92919061494b565b600084815260026020819052604090912001548490610100900463ffffffff1642111561204957604051636634e92360e01b815260048101829052602401610f0b565b600d5442101561206c576040516319b9482d60e31b815260040160405180910390fd5b600e54421061208d576040516268af4b60e91b815260040160405180910390fd5b61209633612481565b6120b3576040516341c8302160e11b815260040160405180910390fd5b60006120c1600b5460ff1690565b905060006120ce600c5490565b9050600060026000898152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b828210156121b457838290600052602060002001805461212790614b51565b80601f016020809104026020016040519081016040528092919081815260200182805461215390614b51565b80156121a05780601f10612175576101008083540402835291602001916121a0565b820191906000526020600020905b81548152906001019060200180831161218357829003601f168201915b505050505081526020019060010190612108565b50505050905060005b815181101561223857831580156121d2575082155b156121f05760405163a5be600560e01b815260040160405180910390fd5b8361220357826121ff81614b3a565b9350505b6122268983838151811061221957612219614bcd565b6020026020010151612a73565b8061223081614b86565b9150506121bd565b50600c82905560008881526002602081905260409091208101805460ff19166001830217905550877f9060adf413860c5ab6e376e0aa4269e49a13f0853edb1583fce8129d4c756d79823360405161229192919061479e565b60405180910390a25050505050505050565b6122ab613921565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a0820152979650505050505050565b60008080806122f58682612b42565b90506001600160e01b03198116630d0e30db60e41b14156123475773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73b4fbf271143f4fbf7b91a5ded31805e42b2208d68693509350935050612415565b6001600160e01b03198116632e1a7d4d60e01b14156123c35773b4fbf271143f4fbf7b91a5ded31805e42b2208d673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6123a46004808a5161239c9190614af7565b8a9190612b9f565b8060200190518101906123b791906144d2565b93509350935050612415565b60405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f206465636f646520556e69737761702062797465636f646044820152606560f81b6064820152608401610f0b565b9250925092565b6000612429826014614a9e565b835110156124715760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610f0b565b500160200151600160601b900490565b60006124956003546001600160a01b031690565b6001600160a01b0316826001600160a01b031614806112975750611297826124bc60045490565b612cac565b606060006124cf8382612b42565b90506001600160e01b031981166316b9007760e21b14156125205761250460048085516124fc9190614af7565b859190612b9f565b8060200190518101906125179190614249565b92506125a79050565b6001600160e01b03198116631f0464d160e01b141561254b5761250460048085516124fc9190614af7565b60405162461bcd60e51b815260206004820152602b60248201527f4661696c656420746f206465636f646520556e6973776170206d756c7469636160448201526a6c6c2062797465636f646560a81b6064820152608401610f0b565b50919050565b6001600160a01b03811660009081526006602052604081205460ff16806112975750611297826124bc60075490565b600054610100900460ff166126475760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f0b565b606081013515801561266a57506126616040820182614995565b90508160800135115b1561268857604051635039c6e160e01b815260040160405180910390fd5b600580546001600160a01b031916331790556126a76020820182613e58565b600380546001600160a01b0319166001600160a01b03929092169190911790556126d460a08201826149de565b6126e0916009916139ad565b506126ee60c08201826149de565b6126fa91600a916139ad565b50608081013560085560e0810135600d55610100810135600e556127266101408201610120830161420f565b600b805460ff1916911515919091179055610140810135600c556020810135600455606081013560075560005b6127606040830183614995565b905081101561284c5760016006600061277c6040860186614995565b8581811061278c5761278c614bcd565b90506020020160208101906127a19190613e58565b6001600160a01b0316815260208101919091526040908101600020805460ff1916921515929092179091557f4664777dbfbcb27de0f602e1da5d5a259992cd7edf5b29192929c96e8fd50def906127fa90840184614995565b8381811061280a5761280a614bcd565b905060200201602081019061281f9190613e58565b6040516001600160a01b03909116815260200160405180910390a18061284481614b86565b915050612753565b506000612857611725565b6001600160a01b0316141561287f576040516309ec7e6960e41b815260040160405180910390fd5b50565b6001600160a01b03811660009081526043602052604090205460ff16156128de5760405162461bcd60e51b815260206004820152601060248201526f223ab83634b1b0ba32b2103a37b5b2b760811b6044820152606401610f0b565b6128e7816119bc565b6129285760405162461bcd60e51b81526020600482015260126024820152712ab73932b9b7b63b30b13632903a37b5b2b760711b6044820152606401610f0b565b6042805460018082019092557f38dfe4635b27babeca8be38d3b448cb5161a639b899a14825ba9c8d7892eb8c30180546001600160a01b0319166001600160a01b038416908117909155600081815260436020908152604091829020805460ff1916909417909355519081527f14009112f2dcb15cad32dab6bf972d6d85286e4ae1178f27323ffe25359459e691015b60405180910390a150565b6001600160a01b03811660009081526047602052604090205460ff1615612a1f5760405162461bcd60e51b815260206004820152601060248201526f223ab83634b1b0ba32b2103a37b5b2b760811b6044820152606401610f0b565b6001600160a01b038116600081815260476020908152604091829020805460ff1916600117905590519182527f0df56a0b46d63ff03be79aa2e27aa9f7d6af565748bac8f4b41d6df16ba9f61891016129b8565b600080600083806020019051810190612a8c9190613e92565b919450925090506001600160a01b0383167368b3465833fb72a70ecdf485e0e4c7bd8665fc451415612ac957612ac485848484612d3f565b612b3b565b6001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d61415612afa57612ac4858484846133eb565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b6044820152606401610f0b565b5050505050565b6000612b4f826004614a9e565b83511015612b965760405162461bcd60e51b8152602060048201526014602482015273746f4279746573345f6f75744f66426f756e647360601b6044820152606401610f0b565b50016020015190565b606081612bad81601f614a9e565b1015612bec5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610f0b565b612bf68284614a9e565b84511015612c3a5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610f0b565b606082158015612c595760405191506000825260208201604052612ca3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612c92578051835260209283019201612c7a565b5050858452601f01601f1916604052505b50949350505050565b600080612cb7611725565b604051627eeac760e11b81526001600160a01b03868116600483015260248201869052919091169062fdd58e9060440160206040518083038186803b158015612cff57600080fd5b505afa158015612d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3791906144d2565b119392505050565b6000612d49613786565b90506000612d5f6005546001600160a01b031690565b90506000816001600160a01b031663d3abc28b8787876040518463ffffffff1660e01b8152600401612d9393929190614745565b600060405180830381600087803b158015612dad57600080fd5b505af1158015612dc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612de9919081019061428f565b604051633814d25160e01b81529091506000903090633814d25190612e1690899089908790600401614908565b60006040518083038186803b158015612e2e57600080fd5b505afa158015612e42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e6a919081019061416d565b60008981526049602090815260408083206048909252822092935091905b835181101561323c576000848281518110612ea557612ea5614bcd565b6020026020010151905060006001600160a01b031681600001516001600160a01b03161480612ede575080516001600160a01b03166001145b80612ef3575080516001600160a01b03166002145b80612f135750866001600160a01b031681600001516001600160a01b0316145b612f5f5760405162461bcd60e51b815260206004820152601960248201527f526563697069656e74206e6f742077686974656c6973746564000000000000006044820152606401610f0b565b6020808201516001600160a01b031660009081529084905260409020546060820151156130ea576020808301516001600160a01b031660009081526043909152604090205460ff16612ff35760405162461bcd60e51b815260206004820152601c60248201527f536f7572636520746f6b656e206e6f742077686974656c6973746564000000006044820152606401610f0b565b8061303057602082810151865460018101885560008881529290922090910180546001600160a01b0319166001600160a01b039092169190911790555b606082015161303f9082614a9e565b84600084602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507368b3465833fb72a70ecdf485e0e4c7bd8665fc456001600160a01b0316336001600160a01b03168e7f6b2315dc82c675e98d173b73a035ea18b30fa040368177ae8dfa90d3cd5a127a856020015186606001516040516130e19291906001600160a01b03929092168252602082015260400190565b60405180910390a45b60008260800151118015613127575081516001600160a01b0316600114806131275750876001600160a01b031682600001516001600160a01b0316145b1561322757604654610100900460ff168061315c57506040808301516001600160a01b031660009081526047602052205460ff165b6131a85760405162461bcd60e51b815260206004820152601c60248201527f54617267657420746f6b656e206e6f742077686974656c6973746564000000006044820152606401610f0b565b7368b3465833fb72a70ecdf485e0e4c7bd8665fc456001600160a01b0316336001600160a01b03168e7ff10ffe9795dc198303bf64c2f1bfec7ed5256325dee3026154df4c82f43c54f08560400151866080015160405161321e9291906001600160a01b03929092168252602082015260400190565b60405180910390a45b5050808061323490614b86565b915050612e88565b5060445460455460ff9091169081158061325d5750604654606460ff909116105b156133dd578354600090815b818110156132d757600087828154811061328557613285614bcd565b60009182526020808320909101546001600160a01b0316808352908990526040909120549091506132b79082906113b1565b6132c19085614a9e565b93505080806132cf90614b86565b915050613269565b50600082116133285760405162461bcd60e51b815260206004820152601e60248201527f5377617020616d6f756e742073686f756c64206e6f74206265207a65726f00006044820152606401610f0b565b83806133345750828211155b6133765760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b585e08185b5bdd5b9d606a1b6044820152606401610f0b565b6133808a836138d2565b6133c25760405162461bcd60e51b815260206004820152601360248201527245786365656465642070657263656e7461676560681b6044820152606401610f0b565b60445460ff166133da576133d68284614af7565b6045555b50505b505050505050505050505050565b60006133f5613786565b60445460455491925060ff16906134146005546001600160a01b031690565b6001600160a01b031663d3abc28b8787876040518463ffffffff1660e01b815260040161344393929190614745565b600060405180830381600087803b15801561345d57600080fd5b505af1158015613471573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613499919081019061428f565b50604051637cb0fbcd60e11b815260009081908190309063f961f79a906134c6908b908b906004016148e6565b60606040518083038186803b1580156134de57600080fd5b505afa1580156134f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135169190613f2c565b925092509250600061352884836113b1565b6001600160a01b03851660009081526043602052604090205490915060ff166135935760405162461bcd60e51b815260206004820152601c60248201527f536f7572636520746f6b656e206e6f742077686974656c6973746564000000006044820152606401610f0b565b604654610100900460ff16806135c157506001600160a01b03831660009081526047602052604090205460ff165b61360d5760405162461bcd60e51b815260206004820152601c60248201527f54617267657420746f6b656e206e6f742077686974656c6973746564000000006044820152606401610f0b565b600081116136685760405162461bcd60e51b815260206004820152602260248201527f5472616e7366657220616d6f756e742073686f756c64206e6f74206265207a65604482015261726f60f01b6064820152608401610f0b565b85806136745750848111155b6136b65760405162461bcd60e51b8152602060048201526013602482015272115e18d959591959081b585e08185b5bdd5b9d606a1b6044820152606401610f0b565b6136c087826138d2565b6137025760405162461bcd60e51b815260206004820152601360248201527245786365656465642070657263656e7461676560681b6044820152606401610f0b565b85613715576137118186614af7565b6045555b73b4fbf271143f4fbf7b91a5ded31805e42b2208d66001600160a01b0316336001600160a01b03168c7ff2600da0d3c22c74870d03f19fbe7663ec5f72616966e884f806a2d44ee7d64487878760405161377193929190614721565b60405180910390a45050505050505050505050565b6042546000908161379f6005546001600160a01b031690565b905060005b828110156138cc576000604282815481106137c1576137c1614bcd565b6000918252602090912001546001600160a01b0316905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81141561382d5761381c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee846001600160a01b0316316113b1565b6138269086614a9e565b94506138b9565b6040516370a0823160e01b81526001600160a01b0384811660048301526138ac9183918216906370a082319060240160206040518083038186803b15801561387457600080fd5b505afa158015613888573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059391906144d2565b6138b69086614a9e565b94505b50806138c481614b86565b9150506137a4565b50505090565b60465460009060ff1660648114156138ee576001915050611297565b836138fd576000915050611297565b606461390c60ff831686614ad8565b6139169190614ab6565b909211159392505050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b8280548282559060005260206000209081019282156139a1579160200282015b828111156139a15782518051613991918491602090910190613a2d565b5091602001919060010190613974565b50611600929150613aa1565b8280546139b990614b51565b90600052602060002090601f0160209004810192826139db5760008555613a21565b82601f106139f45782800160ff19823516178555613a21565b82800160010185558215613a21579182015b82811115613a21578235825591602001919060010190613a06565b50611600929150613abe565b828054613a3990614b51565b90600052602060002090601f016020900481019282613a5b5760008555613a21565b82601f10613a7457805160ff1916838001178555613a21565b82800160010185558215613a21579182015b82811115613a21578251825591602001919060010190613a86565b80821115611600576000613ab58282613ad3565b50600101613aa1565b5b808211156116005760008155600101613abf565b508054613adf90614b51565b6000825580601f10613aef575050565b601f01602090049060005260206000209081019061287f9190613abe565b8035613b1881614bf9565b919050565b60008083601f840112613b2f57600080fd5b5081356001600160401b03811115613b4657600080fd5b6020830191508360208260051b8501011115613b6157600080fd5b9250929050565b600082601f830112613b7957600080fd5b81356020613b8e613b8983614a54565b614a24565b80838252828201915082860187848660051b8901011115613bae57600080fd5b60005b85811015613bd6578135613bc481614bf9565b84529284019290840190600101613bb1565b5090979650505050505050565b600082601f830112613bf457600080fd5b81516020613c04613b8983614a54565b80838252828201915082860187848660051b8901011115613c2457600080fd5b6000805b86811015613c665782516001600160401b03811115613c45578283fd5b613c538b88838d0101613cd0565b8652509385019391850191600101613c28565b509198975050505050505050565b8035613b1881614c0e565b600082601f830112613c9057600080fd5b8135613c9e613b8982614a77565b818152846020838601011115613cb357600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613ce157600080fd5b8151613cef613b8982614a77565b818152846020838601011115613d0457600080fd5b613d15826020830160208701614b0e565b949350505050565b60008083601f840112613d2f57600080fd5b5081356001600160401b03811115613d4657600080fd5b602083019150836020828501011115613b6157600080fd5b6000608082840312156125a757600080fd5b600060e082840312156125a757600080fd5b600061016082840312156125a757600080fd5b600060c08284031215613da757600080fd5b60405160c081018181106001600160401b0382111715613dc957613dc9614be3565b80604052508091508251613ddc81614bf9565b81526020830151613dec81614bf9565b60208201526040830151613dff81614bf9565b80604083015250606083015160608201526080830151608082015260a083015160038110613e2c57600080fd5b60a0919091015292915050565b803563ffffffff81168114613b1857600080fd5b8035613b1881614c1c565b600060208284031215613e6a57600080fd5b8135611c5b81614bf9565b600060208284031215613e8757600080fd5b8151611c5b81614bf9565b600080600060608486031215613ea757600080fd5b8351613eb281614bf9565b60208501519093506001600160401b03811115613ece57600080fd5b613eda86828701613cd0565b925050604084015190509250925092565b600080600060608486031215613f0057600080fd5b8335613f0b81614bf9565b92506020840135613f1b81614bf9565b929592945050506040919091013590565b600080600060608486031215613f4157600080fd5b8351613f4c81614bf9565b6020850151909350613f5d81614bf9565b80925050604084015190509250925092565b60008060408385031215613f8257600080fd5b8235613f8d81614bf9565b946020939093013593505050565b600080600060608486031215613fb057600080fd5b8335613fbb81614bf9565b9250602084013591506040840135613fd281614bf9565b809150509250925092565b60008060008060008060c08789031215613ff657600080fd5b863561400181614bf9565b95506020870135945060408701359350606087013561401f81614c1c565b9598949750929560808101359460a0909101359350915050565b60006020828403121561404b57600080fd5b81516001600160401b0381111561406157600080fd5b613d1584828501613be3565b60008060008060006080868803121561408557600080fd5b6001600160401b03808735111561409b57600080fd5b8635870188601f8201126140ae57600080fd5b803560206140be613b8983614a54565b8083825282820191508285018d848660051b88010111156140de57600080fd5b60005b858110156141185787823511156140f757600080fd5b6141068f8684358a0101613c7f565b845292840192908401906001016140e1565b5050809a50505061412a818b01613e39565b975050505061413b60408801613c74565b935060608701358181111561414f57600080fd5b61415b89828a01613d1d565b979a9699509497509395949350505050565b6000602080838503121561418057600080fd5b82516001600160401b0381111561419657600080fd5b8301601f810185136141a757600080fd5b80516141b5613b8982614a54565b8181528381019083850160c0808502860187018a10156141d457600080fd5b600095505b84861015614201576141eb8a83613d95565b84526001959095019492860192908101906141d9565b509098975050505050505050565b60006020828403121561422157600080fd5b8135611c5b81614c0e565b60006020828403121561423e57600080fd5b8151611c5b81614c0e565b6000806040838503121561425c57600080fd5b8251915060208301516001600160401b0381111561427957600080fd5b61428585828601613be3565b9150509250929050565b6000602082840312156142a157600080fd5b81516001600160401b038111156142b757600080fd5b613d1584828501613cd0565b600080604083850312156142d657600080fd5b82356001600160401b038111156142ec57600080fd5b6142f885828601613c7f565b95602094909401359450505050565b60008060006060848603121561431c57600080fd5b83356001600160401b038082111561433357600080fd5b61433f87838801613c7f565b945060208601359350604086013591508082111561435c57600080fd5b5061436986828701613c7f565b9150509250925092565b60006020828403121561438557600080fd5b81356001600160401b0381111561439b57600080fd5b613d1584828501613d5e565b600060e082840312156143b957600080fd5b611c5b8383613d70565b60008060008060008060008060006101008a8c0312156143e257600080fd5b89356001600160401b03808211156143f957600080fd5b6144058d838e01613d82565b9a5060208c013591508082111561441b57600080fd5b6144278d838e01613b68565b995061443560408d01613c74565b985060608c013591508082111561444b57600080fd5b506144588c828d01613b1d565b909750955061446b905060808b01613c74565b935060a08a0135925061448060c08b01613e4d565b915061448e60e08b01613b0d565b90509295985092959850929598565b600060c082840312156144af57600080fd5b611c5b8383613d95565b6000602082840312156144cb57600080fd5b5035919050565b6000602082840312156144e457600080fd5b5051919050565b600080604083850312156144fe57600080fd5b82359150602083013561451081614bf9565b809150509250929050565b60008060006040848603121561453057600080fd5b8335925060208401356001600160401b0381111561454d57600080fd5b61455986828701613d1d565b9497909650939450505050565b60008060008060006080868803121561457e57600080fd5b853594506020860135935060408601356001600160401b038111156145a257600080fd5b6145ae88828901613b1d565b90945092505060608601356145c281614bf9565b809150509295509295909350565b6000602082840312156145e257600080fd5b8151611c5b81614c1c565b600081518084526020808501808196508360051b8101915082860160005b85811015614635578284038952614623848351614642565b9885019893509084019060010161460b565b5091979650505050505050565b6000815180845261465a816020860160208601614b0e565b601f01601f19169290920160200192915050565b6004811061467e5761467e614bb7565b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0380825116835280602083015116602084015280604083015116604084015250606081015160608301526080810151608083015260a0810151600381106146fa576146fa614bb7565b8060a0840152505050565b60008251614717818460208701614b0e565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038416815260606020820181905260009061476990830185614642565b9050826040830152949350505050565b6001600160a01b038416815260406020820181905260009061153e9083018486614682565b6040815260006147b160408301856145ed565b905060018060a01b03831660208301529392505050565b60a0815260006147db60a08301896145ed565b63ffffffff881660208401526147f4604084018861466e565b8281036060840152614807818688614682565b91505060018060a01b0383166080830152979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561487857603f19888603018452614866858351614642565b9450928501929085019060010161484a565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156148c7576148b48385516146ab565b9284019260c092909201916001016148a1565b50909695505050505050565b602081526000611c5b6020830184614642565b6040815260006148f96040830185614642565b90508260208301529392505050565b60608152600061491b6060830186614642565b84602084015282810360408401526149338185614642565b9695505050505050565b60c0810161129782846146ab565b82815260408101611c5b602083018461466e565b85815260a08101614973602083018761466e565b63ffffffff949094166040820152911515606083015260809091015292915050565b6000808335601e198436030181126149ac57600080fd5b8301803591506001600160401b038211156149c657600080fd5b6020019150600581901b3603821315613b6157600080fd5b6000808335601e198436030181126149f557600080fd5b8301803591506001600160401b03821115614a0f57600080fd5b602001915036819003821315613b6157600080fd5b604051601f8201601f191681016001600160401b0381118282101715614a4c57614a4c614be3565b604052919050565b60006001600160401b03821115614a6d57614a6d614be3565b5060051b60200190565b60006001600160401b03821115614a9057614a90614be3565b50601f01601f191660200190565b60008219821115614ab157614ab1614ba1565b500190565b600082614ad357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615614af257614af2614ba1565b500290565b600082821015614b0957614b09614ba1565b500390565b60005b83811015614b29578181015183820152602001614b11565b83811115611bef5750506000910152565b600081614b4957614b49614ba1565b506000190190565b600181811c90821680614b6557607f821691505b602082108114156125a757634e487b7160e01b600052602260045260246000fd5b6000600019821415614b9a57614b9a614ba1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461287f57600080fd5b801515811461287f57600080fd5b60ff8116811461287f57600080fdfea2646970667358221220d3d86457ffa88c728c9e5ba22d8fb5e1fa2ad546c8a55cbdb76f9336a3cc148264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetBaseCurrencyPrice(address,uint256)": {
        "notice": "This function is imported by other contract, thus cannot be external"
      },
      "canResolvePrice(address)": {
        "notice": "This function is imported by other contract, thus cannot be external"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3247,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3250,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 31987,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_transactionIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)17376_storage"
      },
      {
        "astId": 31992,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "transactions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Transaction)31931_storage)"
      },
      {
        "astId": 31994,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_executor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 31996,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_executorTeamId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 31998,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_executee",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 32002,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_approversMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 32004,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_approverTeamId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 32006,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_minApproval",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 32008,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_text",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 32010,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_transactionType",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 32012,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_allowUnlimitedUsageCount",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 32014,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_usageCount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 32016,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_startTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 32018,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_endTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 34071,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "__gap",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30365,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_baseCurrency",
        "offset": 0,
        "slot": "65",
        "type": "t_address"
      },
      {
        "astId": 30368,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "fromTokens",
        "offset": 0,
        "slot": "66",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30372,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "fromTokensMapping",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 30374,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "allowAnyAmount",
        "offset": 0,
        "slot": "68",
        "type": "t_bool"
      },
      {
        "astId": 30376,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "totalAmount",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 30378,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "amountPercentage",
        "offset": 0,
        "slot": "70",
        "type": "t_uint8"
      },
      {
        "astId": 30380,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "allowAllToTokens",
        "offset": 1,
        "slot": "70",
        "type": "t_bool"
      },
      {
        "astId": 30384,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "toTokensMapping",
        "offset": 0,
        "slot": "71",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 30390,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_tokenInAmountOfTransaction",
        "offset": 0,
        "slot": "72",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 30395,
        "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
        "label": "_tokenInOfTransaction",
        "offset": 0,
        "slot": "73",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)31912": {
        "encoding": "inplace",
        "label": "enum CommonBudgetApproval.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)31931_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonBudgetApproval.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)31931_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)17376_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 17375,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)31931_storage": {
        "encoding": "inplace",
        "label": "struct CommonBudgetApproval.Transaction",
        "members": [
          {
            "astId": 31914,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31917,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 31920,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Status)31912"
          },
          {
            "astId": 31922,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "deadline",
            "offset": 1,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 31924,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "isExist",
            "offset": 5,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 31926,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "approvedCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 31930,
            "contract": "contracts/UniswapLiquidBudgetApproval.sol:UniswapLiquidBudgetApproval",
            "label": "approved",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}