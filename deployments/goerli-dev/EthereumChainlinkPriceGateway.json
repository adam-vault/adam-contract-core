{
  "address": "0xc15F1745698e9c08d1A46Fc30a70c6056a4B6822",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "InvaildDecimal",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "roundID",
          "type": "uint80"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "name": "StaleRoundId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAtTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "StaleTimestamp",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "assetDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetEthPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "derivedAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "ethAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        }
      ],
      "name": "isSupportedPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7da4e45425b3f1474c4ce4faee246eaf3ac3d22a9dbebb9a0facb4773e8e2f39",
  "receipt": {
    "to": null,
    "from": "0x2d61d2ea8c296305C4AF461f12a172cF1d0af599",
    "contractAddress": "0xc15F1745698e9c08d1A46Fc30a70c6056a4B6822",
    "transactionIndex": 21,
    "gasUsed": "1127874",
    "logsBloom": "0x
    "blockHash": "0x13311e55fed8bd2e8cb32277ad79b60d5709cd2528f6218a13c00ab570839403",
    "transactionHash": "0x7da4e45425b3f1474c4ce4faee246eaf3ac3d22a9dbebb9a0facb4773e8e2f39",
    "logs": [],
    "blockNumber": 8424714,
    "cumulativeGasUsed": "6927278",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "af18ea8043de5ce666898263f5c38e68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"InvaildDecimal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundID\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"name\":\"StaleRoundId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTimeStamp\",\"type\":\"uint256\"}],\"name\":\"StaleTimestamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"derivedAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ethAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"isSupportedPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assetPrice(address,address,uint256)\":{\"details\":\"For those outside contract , Please used this as the entry pointthis Function will help to route the calculate to other cal function,Please do not directly call the below cal function\",\"params\":{\"amount\":\"the amount of asset, in asset decimal\",\"asset\":\"the asset token address, support ETH , WETH and other ERC20\",\"base\":\"the base token address, support ETH , WETH and other ERC20\"},\"returns\":{\"_0\":\"uint256 the Asset Price in term of base token in base token decimal\"}},\"isSupportedPair(address,address)\":{\"details\":\"Custom price gateway is allowed, but need to implement priceGateway.sol and set by govern\",\"params\":{\"asset\":\"the asset token address, support ETH , WETH and other ERC20\",\"base\":\"the base token address, support ETH , WETH and other ERC20\"},\"returns\":{\"_0\":\"boolean Is support or not\"}}},\"stateVariables\":{\"name\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetPrice(address,address,uint256)\":{\"notice\":\"inherited from PriceGateway, to cal the asset price base on different token\"},\"isSupportedPair(address,address)\":{\"notice\":\"inherited from PriceGateway, help to check the imported pair support or not\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthereumChainlinkPriceGateway.sol\":\"EthereumChainlinkPriceGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(address base, address quote) external view returns (uint8);\\n\\n  function description(address base, address quote) external view returns (string memory);\\n\\n  function version(address base, address quote) external view returns (uint256);\\n\\n  function latestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (int256 answer);\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (uint256 timestamp);\\n\\n  // Registry getters\\n\\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (Phase memory phase);\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 previousRoundId);\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 nextRoundId);\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(address base, address quote)\\n    external\\n    view\\n    returns (AggregatorV2V3Interface proposedAggregator);\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\",\"keccak256\":\"0xa783cf3434bd5b5153fe876c37d5d5cb78d4e198f01f184b60ed3392401ddc0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/EthereumChainlinkPriceGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\n\\nimport \\\"./base/PriceGateway.sol\\\";\\nimport \\\"./lib/Constant.sol\\\";\\n\\ncontract EthereumChainlinkPriceGateway is PriceGateway {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    string public constant override name = \\\"Ethereum Chainlink Price Gateway\\\";\\n\\n    error StaleRoundId(uint80 roundID, uint80 answeredInRound);\\n    error StaleTimestamp(uint256 currentTimeStamp, uint256 updatedAtTimeStamp);\\n    error InvaildDecimal(uint8 decimals);\\n    constructor() {\\n    }\\n\\n    /// @notice inherited from PriceGateway, help to check the imported pair support or not\\n    /// @dev Custom price gateway is allowed, but need to implement priceGateway.sol and set by govern\\n    /// @param asset the asset token address, support ETH , WETH and other ERC20\\n    /// @param base the base token address, support ETH , WETH and other ERC20\\n    /// @return boolean Is support or not\\n    function isSupportedPair(address asset, address base)\\n        public\\n        virtual\\n        view\\n        override\\n        returns (bool)\\n    {   \\n        return canResolvePrice(asset) && canResolvePrice(base);\\n    }\\n\\n    /// @notice inherited from PriceGateway, to cal the asset price base on different token\\n    /// @dev For those outside contract , Please used this as the entry point\\n    /// @dev this Function will help to route the calculate to other cal function,\\n    /// @dev Please do not directly call the below cal function\\n    /// @param asset the asset token address, support ETH , WETH and other ERC20\\n    /// @param base the base token address, support ETH , WETH and other ERC20\\n    /// @param amount the amount of asset, in asset decimal\\n    /// @return uint256 the Asset Price in term of base token in base token decimal\\n    function assetPrice(\\n        address asset,\\n        address base,\\n        uint256 amount\\n    ) public virtual view override returns (uint256) {\\n        if (asset == base) return amount;\\n\\n        if (base == Denominations.ETH || base == _WETH9()) {\\n            return assetEthPrice(asset, amount);\\n        }\\n\\n        if (asset == Denominations.ETH || asset == _WETH9()) {\\n            return ethAssetPrice(base, amount);\\n        }\\n\\n        return derivedAssetPrice(asset, base, amount);\\n    }\\n\\n    function assetEthPrice(address asset, uint256 amount)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (asset == Denominations.ETH || asset == _WETH9()) return amount;\\n\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            ,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        ) = FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(\\n                asset,\\n                Denominations.ETH\\n            );\\n        uint8 priceDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY)\\n            .decimals(asset, Denominations.ETH);\\n\\n        if (answeredInRound < roundID) {\\n            revert StaleRoundId(roundID, answeredInRound);\\n        }\\n        if (block.timestamp > updatedAt + Constant.STALE_PRICE_DELAY) {\\n            revert StaleTimestamp(block.timestamp, updatedAt);\\n        }\\n\\n        price = scalePrice(\\n            price,\\n            priceDecimals,\\n            18 /* ETH decimals */\\n        );\\n\\n        if (price > 0) {\\n            return\\n                (uint256(price) * amount) /\\n                10**IERC20Metadata(asset).decimals();\\n        }\\n\\n        return 0;\\n    }\\n\\n    function ethAssetPrice(address asset, uint256 ethAmount)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (asset == Denominations.ETH || asset == _WETH9()) return ethAmount;\\n\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            ,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        ) = FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(\\n                asset,\\n                Denominations.ETH\\n            );\\n        uint8 priceDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY)\\n            .decimals(asset, Denominations.ETH);\\n\\n        if (answeredInRound < roundID) {\\n            revert StaleRoundId(roundID, answeredInRound);\\n        }\\n        if (block.timestamp > updatedAt + Constant.STALE_PRICE_DELAY) {\\n            revert StaleTimestamp(block.timestamp, updatedAt);\\n        }\\n        price = scalePrice(\\n            price,\\n            priceDecimals,\\n            18 /* ETH decimals */\\n        );\\n        if (price > 0) {\\n            return\\n                (ethAmount * (10**IERC20Metadata(asset).decimals())) /\\n                uint256(price);\\n        }\\n\\n        return 0;\\n    }\\n\\n    function derivedAssetPrice(\\n        address asset,\\n        address base,\\n        uint256 amount\\n    ) public view virtual returns (uint256) {\\n        int256 rate = getDerivedPrice(\\n            asset,\\n            base,\\n            18 /* ETH decimals */\\n        );\\n\\n        if (rate > 0) {\\n            return\\n                uint256(\\n                    scalePrice(\\n                        int256(rate) * int256(amount),\\n                        18 + assetDecimals(asset),\\n                        assetDecimals(base)\\n                    )\\n                );\\n        }\\n        return 0;\\n    }\\n\\n    function getDerivedPrice(\\n        address _base,\\n        address _quote,\\n        uint8 _decimals\\n    ) internal view virtual returns (int256) {\\n        if (_decimals <= uint8(0) || _decimals > uint8(18)) {\\n            revert InvaildDecimal(_decimals);\\n        }\\n        int256 decimals = int256(10**uint256(_decimals));\\n        (\\n            uint80 _baseRoundID,\\n            int256 basePrice,\\n            ,\\n            uint256 _baseUpdatedAt,\\n            uint80 _baseAnsweredInRound\\n        ) = FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(\\n                _base,\\n                Denominations.ETH\\n            );\\n\\n        if (_baseAnsweredInRound < _baseRoundID) {\\n            revert StaleRoundId(_baseRoundID, _baseAnsweredInRound);\\n        }\\n        if (block.timestamp > _baseUpdatedAt + Constant.STALE_PRICE_DELAY) {\\n            revert StaleTimestamp(block.timestamp, _baseUpdatedAt);\\n        }\\n\\n        uint8 baseDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY)\\n            .decimals(_base, Denominations.ETH);\\n        basePrice = scalePrice(basePrice, baseDecimals, _decimals);\\n        (\\n            uint80 _quoteRoundID,\\n            int256 quotePrice,\\n            ,\\n            uint256 _quoteUpdatedAt,\\n            uint80 _quoteAnsweredInRound\\n        ) = FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(\\n                _quote,\\n                Denominations.ETH\\n            );\\n        if (_quoteAnsweredInRound < _quoteRoundID) {\\n            revert StaleRoundId(_quoteRoundID, _quoteAnsweredInRound);\\n        }\\n        if (block.timestamp > _quoteUpdatedAt + Constant.STALE_PRICE_DELAY) {\\n            revert StaleTimestamp(block.timestamp, _quoteUpdatedAt);\\n        }\\n\\n        uint8 quoteDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY)\\n            .decimals(_quote, Denominations.ETH);\\n        quotePrice = scalePrice(quotePrice, quoteDecimals, _decimals);\\n\\n        return (basePrice * decimals) / quotePrice;\\n    }\\n    function scalePrice(\\n        int256 _price,\\n        uint8 _priceDecimals,\\n        uint8 _decimals\\n    ) internal pure virtual returns (int256) {\\n        if (_priceDecimals < _decimals) {\\n            return _price * int256(10**uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / int256(10**uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n    function canResolvePrice(address asset) internal view returns (bool) {\\n        if (asset == Denominations.ETH || asset == _WETH9()) return true;\\n        try\\n            FeedRegistryInterface(Constant.FEED_REGISTRY).getFeed(\\n                asset,\\n                Denominations.ETH\\n            )\\n        {\\n            return true;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    function assetDecimals(address asset) public view virtual returns (uint8) {\\n        if (asset == Denominations.ETH) return 18;\\n        try IERC20Metadata(asset).decimals() returns (uint8 _decimals) {\\n            return _decimals;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function _WETH9() internal pure returns (address) {\\n        return Constant.WETH_ADDRESS;\\n    }\\n}\",\"keccak256\":\"0xff3589bfa4ac849de7b1826775891377698b2581d81eaa2dbf7cd340d5652698\",\"license\":\"GPL-3.0\"},\"contracts/base/PriceGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nabstract contract PriceGateway {\\n    function isSupportedPair(address asset, address base)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {}\\n\\n    function assetPrice(\\n        address asset,\\n        address base,\\n        uint256 amount\\n    ) public view virtual returns (uint256) {}\\n\\n    function name() external virtual returns (string memory);\\n}\",\"keccak256\":\"0x3bc67e27d76e4ca7cef44c22bc05fd9b6579bffe8dd365496f1dba49931028b1\",\"license\":\"GPL-3.0\"},\"contracts/lib/Constant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Constant {\\n    bytes32 public constant BEACON_NAME_DAO = bytes32(keccak256(\\\"adam.dao\\\"));\\n    bytes32 public constant BEACON_NAME_MEMBERSHIP = bytes32(keccak256(\\\"adam.dao.membership\\\"));\\n    bytes32 public constant BEACON_NAME_MEMBER_TOKEN = bytes32(keccak256(\\\"adam.dao.member_token\\\"));\\n    bytes32 public constant BEACON_NAME_LIQUID_POOL = bytes32(keccak256(\\\"adam.dao.liquid_pool\\\"));\\n    bytes32 public constant BEACON_NAME_GOVERN = bytes32(keccak256(\\\"adam.dao.govern\\\"));\\n    bytes32 public constant BEACON_NAME_TEAM = bytes32(keccak256(\\\"adam.dao.team\\\"));\\n    bytes32 public constant BEACON_NAME_ACCOUNTING_SYSTEM = bytes32(keccak256(\\\"adam.dao.accounting_system\\\"));\\n\\n    address public constant WETH_ADDRESS = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6;\\n    address public constant UNISWAP_ROUTER = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n    address public constant FEED_REGISTRY = 0xaBC30D61D30f19de38897EBA18252868B3459664;\\n    address public constant BRIDGE_CURRENCY = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint public constant STALE_PRICE_DELAY = 86400;\\n}\\n\",\"keccak256\":\"0x09ebd8c64dc4142424b90cc41e536ffe457b082258a30722ee6106b076aa9427\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b49612ba1161005b578063b49612ba14610108578063ce58da331461011b578063e019c23c1461013e578063e366da2c1461015157600080fd5b806306fdde03146100825780632851e17d146100d45780635aaaefad146100f5575b600080fd5b6100be6040518060400160405280602081526020017f457468657265756d20436861696e6c696e6b205072696365204761746577617981525081565b6040516100cb9190611042565b60405180910390f35b6100e76100e2366004610f2b565b610176565b6040519081526020016100cb565b6100e7610103366004610f6c565b6101d4565b6100e7610116366004610f6c565b6104b9565b61012e610129366004610ef2565b610774565b60405190151581526020016100cb565b6100e761014c366004610f2b565b61078f565b61016461015f366004610ed5565b61086c565b60405160ff90911681526020016100cb565b6000806101858585601261090f565b905060008113156101c7576101bf61019d8483611211565b6101a68761086c565b6101b19060126110af565b6101ba8761086c565b610d2f565b9150506101cd565b60009150505b9392505050565b60006001600160a01b03831660008051602061131d833981519152148061021757506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b156102235750806104b3565b60008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8860008051602061131d8339815191526040518363ffffffff1660e01b8152600401610279929190611028565b60a06040518083038186803b15801561029157600080fd5b505afa1580156102a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c99190610fb5565b945094505093509350600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a88960008051602061131d8339815191526040518363ffffffff1660e01b8152600401610324929190611028565b60206040518083038186803b15801561033c57600080fd5b505afa158015610350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103749190611005565b9050846001600160501b0316826001600160501b031610156103c057604051623a0beb60e31b81526001600160501b038087166004830152831660248201526044015b60405180910390fd5b6103cd6201518084611097565b4211156103f65760405163e80214f160e01b8152426004820152602481018490526044016103b7565b61040284826012610d2f565b935060008413156104a957876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190611005565b61048990600a611165565b6104938886611296565b61049d9190611102565b955050505050506104b3565b6000955050505050505b92915050565b60006001600160a01b03831660008051602061131d83398151915214806104fc57506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b156105085750806104b3565b60008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8860008051602061131d8339815191526040518363ffffffff1660e01b815260040161055e929190611028565b60a06040518083038186803b15801561057657600080fd5b505afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190610fb5565b945094505093509350600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a88960008051602061131d8339815191526040518363ffffffff1660e01b8152600401610609929190611028565b60206040518083038186803b15801561062157600080fd5b505afa158015610635573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106599190611005565b9050846001600160501b0316826001600160501b031610156106a057604051623a0beb60e31b81526001600160501b038087166004830152831660248201526044016103b7565b6106ad6201518084611097565b4211156106d65760405163e80214f160e01b8152426004820152602481018490526044016103b7565b6106e284826012610d2f565b935060008413156104a95783886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561072757600080fd5b505afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f9190611005565b61076a90600a611165565b6104939089611296565b600061077f83610d99565b80156101cd57506101cd82610d99565b6000826001600160a01b0316846001600160a01b031614156107b25750806101cd565b6001600160a01b03831660008051602061131d83398151915214806107f357506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b156108095761080284836101d4565b90506101cd565b6001600160a01b03841660008051602061131d833981519152148061084a57506001600160a01b03841673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b156108595761080283836104b9565b610864848484610176565b949350505050565b60006001600160a01b03821660008051602061131d833981519152141561089557506012919050565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ce57600080fd5b505afa9250505080156108fe575060408051601f3d908101601f191682019092526108fb91810190611005565b60015b6104b357506000919050565b919050565b600060ff821615806109245750601260ff8316115b1561094757604051631e19a7dd60e31b815260ff831660048201526024016103b7565b600061095760ff8416600a611159565b905060008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8a60008051602061131d8339815191526040518363ffffffff1660e01b81526004016109af929190611028565b60a06040518083038186803b1580156109c757600080fd5b505afa1580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190610fb5565b945094505093509350836001600160501b0316816001600160501b03161015610a4d57604051623a0beb60e31b81526001600160501b038086166004830152821660248201526044016103b7565b610a5a6201518083611097565b421115610a835760405163e80214f160e01b8152426004820152602481018390526044016103b7565b604051630b1c5a7560e31b815260009073abc30d61d30f19de38897eba18252868b3459664906358e2d3a890610acd908d9060008051602061131d83398151915290600401611028565b60206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190611005565b9050610b2a84828a610d2f565b935060008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8e60008051602061131d8339815191526040518363ffffffff1660e01b8152600401610b82929190611028565b60a06040518083038186803b158015610b9a57600080fd5b505afa158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd29190610fb5565b945094505093509350836001600160501b0316816001600160501b03161015610c2057604051623a0beb60e31b81526001600160501b038086166004830152821660248201526044016103b7565b610c2d6201518083611097565b421115610c565760405163e80214f160e01b8152426004820152602481018390526044016103b7565b600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a88f60008051602061131d8339815191526040518363ffffffff1660e01b8152600401610ca8929190611028565b60206040518083038186803b158015610cc057600080fd5b505afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf89190611005565b9050610d0584828f610d2f565b935083610d128c8b611211565b610d1c91906110d4565b9f9e505050505050505050505050505050565b60008160ff168360ff161015610d6157610d4983836112b5565b610d579060ff16600a611159565b6108029085611211565b8160ff168360ff161115610d9157610d7982846112b5565b610d879060ff16600a611159565b61080290856110d4565b509192915050565b60006001600160a01b03821660008051602061131d8339815191521480610ddc57506001600160a01b03821673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15610de957506001919050565b60405163d2edb6dd60e01b815273abc30d61d30f19de38897eba18252868b34596649063d2edb6dd90610e3090859060008051602061131d83398151915290600401611028565b60206040518083038186803b158015610e4857600080fd5b505afa925050508015610e78575060408051601f3d908101601f19168201909252610e7591810190610f98565b60015b610eb5573d808015610ea6576040519150601f19603f3d011682016040523d82523d6000602084013e610eab565b606091505b5060009392505050565b50600192915050565b80516001600160501b038116811461090a57600080fd5b600060208284031215610ee757600080fd5b81356101cd81611304565b60008060408385031215610f0557600080fd5b8235610f1081611304565b91506020830135610f2081611304565b809150509250929050565b600080600060608486031215610f4057600080fd5b8335610f4b81611304565b92506020840135610f5b81611304565b929592945050506040919091013590565b60008060408385031215610f7f57600080fd5b8235610f8a81611304565b946020939093013593505050565b600060208284031215610faa57600080fd5b81516101cd81611304565b600080600080600060a08688031215610fcd57600080fd5b610fd686610ebe565b9450602086015193506040860151925060608601519150610ff960808701610ebe565b90509295509295909350565b60006020828403121561101757600080fd5b815160ff811681146101cd57600080fd5b6001600160a01b0392831681529116602082015260400190565b600060208083528351808285015260005b8181101561106f57858101830151858201604001528201611053565b81811115611081576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156110aa576110aa6112d8565b500190565b600060ff821660ff84168060ff038211156110cc576110cc6112d8565b019392505050565b6000826110e3576110e36112ee565b600160ff1b8214600019841416156110fd576110fd6112d8565b500590565b600082611111576111116112ee565b500490565b600181815b80851115611151578160001904821115611137576111376112d8565b8085161561114457918102915b93841c939080029061111b565b509250929050565b60006101cd8383611170565b60006101cd60ff8416835b60008261117f575060016104b3565b8161118c575060006104b3565b81600181146111a257600281146111ac576111c8565b60019150506104b3565b60ff8411156111bd576111bd6112d8565b50506001821b6104b3565b5060208310610133831016604e8410600b84101617156111eb575081810a6104b3565b6111f58383611116565b8060001904821115611209576112096112d8565b029392505050565b60006001600160ff1b0381841382841380821686840486111615611237576112376112d8565b600160ff1b6000871282811687830589121615611256576112566112d8565b60008712925087820587128484161615611272576112726112d8565b87850587128184161615611288576112886112d8565b505050929093029392505050565b60008160001904831182151516156112b0576112b06112d8565b500290565b600060ff821660ff8416808210156112cf576112cf6112d8565b90039392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461131957600080fd5b5056fe000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea26469706673582212206d83bf0dc286ed7e19fddbe1ddb5b1646bf195901627e06275c8ba421af147b464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "assetPrice(address,address,uint256)": {
        "details": "For those outside contract , Please used this as the entry pointthis Function will help to route the calculate to other cal function,Please do not directly call the below cal function",
        "params": {
          "amount": "the amount of asset, in asset decimal",
          "asset": "the asset token address, support ETH , WETH and other ERC20",
          "base": "the base token address, support ETH , WETH and other ERC20"
        },
        "returns": {
          "_0": "uint256 the Asset Price in term of base token in base token decimal"
        }
      },
      "isSupportedPair(address,address)": {
        "details": "Custom price gateway is allowed, but need to implement priceGateway.sol and set by govern",
        "params": {
          "asset": "the asset token address, support ETH , WETH and other ERC20",
          "base": "the base token address, support ETH , WETH and other ERC20"
        },
        "returns": {
          "_0": "boolean Is support or not"
        }
      }
    },
    "stateVariables": {
      "name": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetPrice(address,address,uint256)": {
        "notice": "inherited from PriceGateway, to cal the asset price base on different token"
      },
      "isSupportedPair(address,address)": {
        "notice": "inherited from PriceGateway, help to check the imported pair support or not"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}