{
  "address": "0xC63F08844C2791D41193FC59b376165f2f15dD18",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        }
      ],
      "name": "AddMembers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "AddTeam",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EditInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        }
      ],
      "name": "RemoveMembers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "SetMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "addMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "addTeam",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "descriptionOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "minterOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nameOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x53de1469078ac2e54e6dc3e886c88d8dca21fd4c37b5c31e5956ad88b9955f0a",
  "receipt": {
    "to": null,
    "from": "0xc5A00702Bb8ddB2214b87F04813dF658F07f81D9",
    "contractAddress": "0xC63F08844C2791D41193FC59b376165f2f15dD18",
    "transactionIndex": 41,
    "gasUsed": "2429060",
    "logsBloom": "0x
    "blockHash": "0x5e4be49c2ed907420a39cec1aa2b82dd02c53537ab5c6427e2ea38e30ff4ff6b",
    "transactionHash": "0x53de1469078ac2e54e6dc3e886c88d8dca21fd4c37b5c31e5956ad88b9955f0a",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 43049688,
        "transactionHash": "0x53de1469078ac2e54e6dc3e886c88d8dca21fd4c37b5c31e5956ad88b9955f0a",
        "address": "0xC63F08844C2791D41193FC59b376165f2f15dD18",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 203,
        "blockHash": "0x5e4be49c2ed907420a39cec1aa2b82dd02c53537ab5c6427e2ea38e30ff4ff6b"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 43049688,
        "transactionHash": "0x53de1469078ac2e54e6dc3e886c88d8dca21fd4c37b5c31e5956ad88b9955f0a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c5a00702bb8ddb2214b87f04813df658f07f81d9",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000132c32498fe36300000000000000000000000000000000000000000000000038f0bcf1f7109ce070000000000000000000000000000000000000000000215ec68f67650e6404dbe0000000000000000000000000000000000000000000000038dd90bfad80b97d70000000000000000000000000000000000000000000215ec6a2939757f3e83ee",
        "logIndex": 204,
        "blockHash": "0x5e4be49c2ed907420a39cec1aa2b82dd02c53537ab5c6427e2ea38e30ff4ff6b"
      }
    ],
    "blockNumber": 43049688,
    "cumulativeGasUsed": "10332794",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "620a3fefea25e6b6df861fc5d6b8881e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"AddMembers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"AddTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EditInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"RemoveMembers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"addTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"descriptionOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minterOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nameOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Team.sol\":\"Team\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Team.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./lib/ToString.sol\\\";\\nimport \\\"./lib/Base64.sol\\\";\\n\\ncontract Team is Initializable, ERC1155Upgradeable, OwnableUpgradeable {\\n\\tusing Counters for Counters.Counter;\\n\\tusing ToString for address;\\n\\tusing Base64 for bytes;\\n\\n\\tevent EditInfo(string name, string description, uint256 tokenId);\\n\\tevent AddTeam(uint256 tokenId, address minter, string name, string description);\\n\\tevent AddMembers(uint256 tokenId, address[] members);\\n\\tevent RemoveMembers(uint256 tokenId, address[] members);\\n\\tevent SetMinter(uint256 tokenId, address minter);\\n\\n\\terror Unauthorized();\\n\\terror TransferNotAllowed();\\n\\terror InvalidAddress(address addr);\\n\\terror MemberExists(uint256 tokenId, address member);\\n\\terror MemberNotFound(uint256 tokenId, address member);\\n\\n\\tmapping(uint256 => address) public minterOf;\\n\\tmapping(uint256 => string) public nameOf;\\n\\tmapping(uint256 => string) public descriptionOf;\\n\\n\\tCounters.Counter private _tokenIds;\\n\\n\\tmodifier onlyTeamMinter(uint256 id) {\\n\\t\\tif (minterOf[id] != msg.sender) {\\n\\t\\t\\trevert Unauthorized();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize() external initializer {\\n\\t__Ownable_init();\\n    __ERC1155_init(\\\"\\\");\\n  }\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory,\\n\\t\\tbytes memory\\n\\t) internal view override {\\n\\t\\tif (from == address(0)) { // mint\\n\\t\\t\\tfor(uint i = 0; i < ids.length; i++) {\\n\\t\\t\\t\\tif (balanceOf(to, ids[i]) > 0) {\\n\\t\\t\\t\\t\\trevert MemberExists(ids[i], to);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (to == address(0)) { // burn\\n\\t\\t\\tfor(uint i = 0; i < ids.length; i++) {\\n\\t\\t\\t\\tif (balanceOf(from, ids[i]) == 0) {\\n\\t\\t\\t\\t\\trevert MemberNotFound( ids[i], from);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (from != address(0) && to != address(0)) {\\n\\t\\t\\trevert TransferNotAllowed();\\n\\t\\t} \\n\\t}\\n\\n\\tfunction _mintTokens(address[] memory members, uint256 tokenId) private {\\n\\t\\tfor(uint i = 0; i < members.length ; i++) {\\n\\t\\t\\t_mint(\\n\\t\\t\\t\\tmembers[i],\\n\\t\\t\\t\\ttokenId,\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _burnTokens(address[] memory members, uint256 tokenId) private {\\n\\t\\tfor(uint i = 0; i < members.length; i++) {\\n\\t\\t\\t_burn(members[i], tokenId, balanceOf(members[i], tokenId));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addTeam(string memory name, address minter, address[] memory members, string memory description) external onlyOwner returns (uint256) {\\n\\t\\tif (minter == address(0)) {\\n\\t\\t\\trevert InvalidAddress(minter);\\n\\t\\t}\\n\\t\\t_tokenIds.increment();\\n\\t\\tuint256 _tokenId = _tokenIds.current();\\n\\n\\t\\tminterOf[_tokenId] = minter;\\n\\t\\tnameOf[_tokenId] = name;\\n\\t\\tdescriptionOf[_tokenId] = description;\\n\\t\\t_mintTokens(members, _tokenId);\\n\\n\\t\\temit AddTeam(_tokenId, minter, name, description);\\n\\n\\t\\treturn _tokenId;\\n\\t}\\n\\n\\tfunction addMembers(address[] memory members, uint256 tokenId) external onlyTeamMinter(tokenId) {\\n\\t\\t_mintTokens(members, tokenId);\\n\\t\\temit AddMembers(tokenId, members);\\n\\t}\\n\\n\\tfunction removeMembers(address[] memory members, uint256 tokenId) external onlyTeamMinter(tokenId) {\\n\\t\\t_burnTokens(members, tokenId);\\n\\t\\temit RemoveMembers(tokenId, members);\\n\\t}\\n\\n\\tfunction setMinter(address minter, uint256 tokenId) external onlyOwner {\\n\\t\\tif (minter == address(0)) {\\n\\t\\t\\trevert InvalidAddress(minter);\\n\\t\\t}\\n\\t\\tminterOf[tokenId] = minter;\\n\\t\\temit SetMinter(tokenId, minter);\\n\\t}\\n\\n\\tfunction setInfo(string memory name, string memory description, uint256 tokenId) external onlyTeamMinter(tokenId) {\\n    \\tnameOf[tokenId] = name;\\n\\t\\tdescriptionOf[tokenId] = description;\\n\\n\\t\\temit EditInfo(name, description, tokenId);\\n\\t}\\n \\n \\tfunction uri(uint256 _id) public view override returns (string memory) {\\n\\t\\tstring memory metadata = string(abi.encodePacked(\\n\\t\\t\\t\\\"{\\\\\\\"name\\\\\\\": \\\\\\\"\\\",\\n\\t\\t\\tnameOf[_id],\\n\\t\\t\\t\\\"\\\\\\\", \\\\\\\"creator\\\\\\\": \\\\\\\"\\\",\\n\\t\\t\\towner().toString(),\\n\\t\\t\\t\\\"\\\\\\\", \\\\\\\"minter\\\\\\\": \\\\\\\"\\\",\\n\\t\\t\\tminterOf[_id].toString(),\\n\\t\\t\\t\\\"\\\\\\\", \\\\\\\"description\\\\\\\": \\\\\\\"\\\",\\n\\t\\t\\tdescriptionOf[_id], \\\"\\\\\\\"\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t));\\n\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\tbytes(metadata).base64()\\n\\t\\t));\\n\\t}\\n\\n  \\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa49e2f351a1a7723fa67cc01357cf9ad07710f7e5133dc1117fc3394d4fbfb44\",\"license\":\"GPL-3.0\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nlibrary Base64 {\\n\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function base64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                dataPtr := add(dataPtr, 3)\\n                \\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n                \\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\",\"keccak256\":\"0x0da4b2c5103bf19d27675b32566a3e2c36726e9c2934b68bd77db913ce6d1e29\",\"license\":\"MIT\"},\"contracts/lib/ToString.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary ToString {\\n    function toString(address account) internal pure returns(string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n    function toString(uint256 value) internal pure returns(string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n    function toString(bytes32 value) internal pure returns(string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n    function toString(bytes memory data) internal pure returns(string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint i = 0; i < data.length; i++) {\\n            str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\\n            str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x89fe190c95528cfa5383a199992b087951ae7f8aadeb9433956105b3d38bbaa1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612a7c80620000f46000396000f3fe608060405234801561001057600080fd5b506004361061012a5760003560e01c80638129fc1c116100ad578063a22cb46511610071578063a22cb4651461029d578063b9e2b544146102b0578063e985e9c5146102c3578063f242432a146102ff578063f2fde38b1461031257600080fd5b80638129fc1c146102215780638304fc25146102295780638da5cb5b1461023c5780639ce38998146102615780639e942ace1461027457600080fd5b80632eb2c2d6116100f45780632eb2c2d6146101be5780633e0fb267146101d35780634e1273f4146101e65780636c2d185214610206578063715018a61461021957600080fd5b806253153b1461012f578062fdd58e1461015557806301ffc9a714610168578063051a26641461018b5780630e89341c146101ab575b600080fd5b61014261013d366004612191565b610325565b6040519081526020015b60405180910390f35b610142610163366004612086565b610434565b61017b610176366004612157565b6104c7565b604051901515815260200161014c565b61019e610199366004612295565b610519565b60405161014c919061259b565b61019e6101b9366004612295565b6105b3565b6101d16101cc366004611f3d565b61066c565b005b61019e6101e1366004612295565b6106b8565b6101f96101f43660046120b0565b6106d1565b60405161014c919061255a565b6101d1610214366004612113565b6107fa565b6101d161087a565b6101d161088e565b6101d1610237366004612113565b6109b7565b6097546001600160a01b03165b6040516001600160a01b03909116815260200161014c565b6101d161026f366004612086565b610a2a565b610249610282366004612295565b60c9602052600090815260409020546001600160a01b031681565b6101d16102ab36600461204a565b610aca565b6101d16102be366004612229565b610ad9565b61017b6102d1366004611f0a565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6101d161030d366004611fe6565b610b92565b6101d1610320366004611ee8565b610bd7565b600061032f610c4d565b6001600160a01b03841661036657604051634726455360e11b81526001600160a01b03851660048201526024015b60405180910390fd5b61037460cc80546001019055565b600061037f60cc5490565b600081815260c96020908152604080832080546001600160a01b0319166001600160a01b038b1617905560ca825290912088519293506103c3929091890190611cd8565b50600081815260cb6020908152604090912084516103e392860190611cd8565b506103ee8482610ca7565b7f11ebcfa4d6f58fc5729334680932554fc784d6eebd0218d2b9ae507ff0285451818688866040516104239493929190612755565b60405180910390a195945050505050565b60006001600160a01b03831661049f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b606482015260840161035d565b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806104f857506001600160e01b031982166303a24d0760e21b145b8061051357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60ca602052600090815260409020805461053290612887565b80601f016020809104026020016040519081016040528092919081815260200182805461055e90612887565b80156105ab5780601f10610580576101008083540402835291602001916105ab565b820191906000526020600020905b81548152906001019060200180831161058e57829003601f168201915b505050505081565b600081815260ca60205260408120606091906105e86105da6097546001600160a01b031690565b6001600160a01b0316610cff565b600085815260c96020526040902054610609906001600160a01b0316610cff565b600086815260cb6020908152604091829020915161062b9594939291016123af565b604051602081830303815290604052905061064581610d37565b6040516020016106559190612472565b604051602081830303815290604052915050919050565b6001600160a01b038516331480610688575061068885336102d1565b6106a45760405162461bcd60e51b815260040161035d906125e4565b6106b18585858585610e9e565b5050505050565b60cb602052600090815260409020805461053290612887565b606081518351146107365760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161035d565b600083516001600160401b0381111561075157610751612935565b60405190808252806020026020018201604052801561077a578160200160208202803683370190505b50905060005b84518110156107f2576107c585828151811061079e5761079e61291f565b60200260200101518583815181106107b8576107b861291f565b6020026020010151610434565b8282815181106107d7576107d761291f565b60209081029190910101526107eb816128ee565b9050610780565b509392505050565b600081815260c9602052604090205481906001600160a01b03163314610832576040516282b42960e81b815260040160405180910390fd5b61083c838361108c565b7f54eaa0bdcd636dd6b6c138e7c324ab68ebb60622f8cc13d20d31eeb757e7bfec828460405161086d929190612791565b60405180910390a1505050565b610882610c4d565b61088c60006110f0565b565b600054610100900460ff16158080156108ae5750600054600160ff909116105b806108c85750303b1580156108c8575060005460ff166001145b61092b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161035d565b6000805460ff19166001179055801561094e576000805461ff0019166101001790555b610956611142565b61096e60405180602001604052806000815250611171565b80156109b4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600081815260c9602052604090205481906001600160a01b031633146109ef576040516282b42960e81b815260040160405180910390fd5b6109f98383610ca7565b7ff5bb0cafb1d317496246986216c7574b6b7185f34694344f31c88a3dea072ff8828460405161086d929190612791565b610a32610c4d565b6001600160a01b038216610a6457604051634726455360e11b81526001600160a01b038316600482015260240161035d565b600081815260c9602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251848152918201527f154933cf3e220494f8a0abb0ebf8ec33fcba21e15da759d777aa8418cfd7ff18910160405180910390a15050565b610ad53383836111a1565b5050565b600081815260c9602052604090205481906001600160a01b03163314610b11576040516282b42960e81b815260040160405180910390fd5b600082815260ca602090815260409091208551610b3092870190611cd8565b50600082815260cb602090815260409091208451610b5092860190611cd8565b507f9a9f1e87acdbebd6a43613eb3302ce8597ca8fd373aaf822705b2d7771f96cc1848484604051610b84939291906125ae565b60405180910390a150505050565b6001600160a01b038516331480610bae5750610bae85336102d1565b610bca5760405162461bcd60e51b815260040161035d906125e4565b6106b18585858585611282565b610bdf610c4d565b6001600160a01b038116610c445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035d565b6109b4816110f0565b6097546001600160a01b0316331461088c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035d565b60005b8251811015610cfa57610ce8838281518110610cc857610cc861291f565b6020026020010151836001604051806020016040528060008152506113be565b80610cf2816128ee565b915050610caa565b505050565b604051606082811b6bffffffffffffffffffffffff1916602083015290610513906034016040516020818303038152906040526114e3565b6060815160001415610d5757505060408051602081019091526000815290565b6000604051806060016040528060408152602001612a076040913990506000600384516002610d8691906127fe565b610d909190612816565b610d9b906004612838565b90506000610daa8260206127fe565b6001600160401b03811115610dc157610dc1612935565b6040519080825280601f01601f191660200182016040528015610deb576020820181803683370190505b509050818152600183018586518101602084015b81831015610e595760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610dff565b600389510660018114610e735760028114610e8457610e90565b613d3d60f01b600119830152610e90565b603d60f81b6000198301525b509398975050505050505050565b8151835114610f005760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161035d565b6001600160a01b038416610f265760405162461bcd60e51b815260040161035d9061267b565b33610f358187878787876116f3565b60005b845181101561101e576000858281518110610f5557610f5561291f565b602002602001015190506000858381518110610f7357610f7361291f565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015610fc45760405162461bcd60e51b815260040161035d906126c0565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906110039084906127fe565b9250508190555050505080611017906128ee565b9050610f38565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161106e92919061256d565b60405180910390a4611084818787878787611855565b505050505050565b60005b8251811015610cfa576110de8382815181106110ad576110ad61291f565b6020026020010151836110d98685815181106110cb576110cb61291f565b602002602001015186610434565b6119c0565b806110e8816128ee565b91505061108f565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166111695760405162461bcd60e51b815260040161035d9061270a565b61088c611b54565b600054610100900460ff166111985760405162461bcd60e51b815260040161035d9061270a565b6109b481611b84565b816001600160a01b0316836001600160a01b031614156112155760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161035d565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166112a85760405162461bcd60e51b815260040161035d9061267b565b3360006112b485611bb4565b905060006112c185611bb4565b90506112d18389898585896116f3565b60008681526065602090815260408083206001600160a01b038c168452909152902054858110156113145760405162461bcd60e51b815260040161035d906126c0565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906113539084906127fe565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46113b3848a8a8a8a8a611bff565b505050505050505050565b6001600160a01b03841661141e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161035d565b33600061142a85611bb4565b9050600061143785611bb4565b9050611448836000898585896116f3565b60008681526065602090815260408083206001600160a01b038b1684529091528120805487929061147a9084906127fe565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46114da83600089898989611bff565b50505050505050565b60408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015281516060919060009061151e906002612838565b6115299060026127fe565b6001600160401b0381111561154057611540612935565b6040519080825280601f01601f19166020018201604052801561156a576020820181803683370190505b509050600360fc1b816000815181106115855761158561291f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106115b4576115b461291f565b60200101906001600160f81b031916908160001a90535060005b84518110156107f2578260048683815181106115ec576115ec61291f565b016020015182516001600160f81b031990911690911c60f81c9081106116145761161461291f565b01602001516001600160f81b0319168261162f836002612838565b61163a9060026127fe565b8151811061164a5761164a61291f565b60200101906001600160f81b031916908160001a905350828582815181106116745761167461291f565b602091010151815160f89190911c600f169081106116945761169461291f565b01602001516001600160f81b031916826116af836002612838565b6116ba9060036127fe565b815181106116ca576116ca61291f565b60200101906001600160f81b031916908160001a905350806116eb816128ee565b9150506115ce565b6001600160a01b0385166117875760005b8351811015611785576000611725868684815181106107b8576107b861291f565b11156117735783818151811061173d5761173d61291f565b602002602001015185604051630f419f7760e11b815260040161035d9291909182526001600160a01b0316602082015260400190565b8061177d816128ee565b915050611704565b505b6001600160a01b0384166118175760005b8351811015611815576117b7868583815181106107b8576107b861291f565b611803578381815181106117cd576117cd61291f565b6020026020010151866040516303e73bfd60e41b815260040161035d9291909182526001600160a01b0316602082015260400190565b8061180d816128ee565b915050611798565b505b6001600160a01b0385161580159061183757506001600160a01b03841615155b1561108457604051638cd22d1960e01b815260040160405180910390fd5b6001600160a01b0384163b156110845760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061189990899089908890889088906004016124b7565b602060405180830381600087803b1580156118b357600080fd5b505af19250505080156118e3575060408051601f3d908101601f191682019092526118e091810190612174565b60015b611990576118ef61294b565b806308c379a014156119295750611904612967565b8061190f575061192b565b8060405162461bcd60e51b815260040161035d919061259b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161035d565b6001600160e01b0319811663bc197c8160e01b146114da5760405162461bcd60e51b815260040161035d90612633565b6001600160a01b038316611a225760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161035d565b336000611a2e84611bb4565b90506000611a3b84611bb4565b9050611a5b838760008585604051806020016040528060008152506116f3565b60008581526065602090815260408083206001600160a01b038a16845290915290205484811015611ada5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161035d565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526114da565b600054610100900460ff16611b7b5760405162461bcd60e51b815260040161035d9061270a565b61088c336110f0565b600054610100900460ff16611bab5760405162461bcd60e51b815260040161035d9061270a565b6109b481611cc9565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611bee57611bee61291f565b602090810291909101015292915050565b6001600160a01b0384163b156110845760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611c439089908990889088908890600401612515565b602060405180830381600087803b158015611c5d57600080fd5b505af1925050508015611c8d575060408051601f3d908101601f19168201909252611c8a91810190612174565b60015b611c99576118ef61294b565b6001600160e01b0319811663f23a6e6160e01b146114da5760405162461bcd60e51b815260040161035d90612633565b8051610ad59060679060208401905b828054611ce490612887565b90600052602060002090601f016020900481019282611d065760008555611d4c565b82601f10611d1f57805160ff1916838001178555611d4c565b82800160010185558215611d4c579182015b82811115611d4c578251825591602001919060010190611d31565b50611d58929150611d5c565b5090565b5b80821115611d585760008155600101611d5d565b80356001600160a01b0381168114611d8857600080fd5b919050565b600082601f830112611d9e57600080fd5b81356020611dab826127db565b604051611db882826128c2565b8381528281019150858301600585901b87018401881015611dd857600080fd5b60005b85811015611dfe57611dec82611d71565b84529284019290840190600101611ddb565b5090979650505050505050565b600082601f830112611e1c57600080fd5b81356020611e29826127db565b604051611e3682826128c2565b8381528281019150858301600585901b87018401881015611e5657600080fd5b60005b85811015611dfe57813584529284019290840190600101611e59565b600082601f830112611e8657600080fd5b81356001600160401b03811115611e9f57611e9f612935565b604051611eb6601f8301601f1916602001826128c2565b818152846020838601011115611ecb57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611efa57600080fd5b611f0382611d71565b9392505050565b60008060408385031215611f1d57600080fd5b611f2683611d71565b9150611f3460208401611d71565b90509250929050565b600080600080600060a08688031215611f5557600080fd5b611f5e86611d71565b9450611f6c60208701611d71565b935060408601356001600160401b0380821115611f8857600080fd5b611f9489838a01611e0b565b94506060880135915080821115611faa57600080fd5b611fb689838a01611e0b565b93506080880135915080821115611fcc57600080fd5b50611fd988828901611e75565b9150509295509295909350565b600080600080600060a08688031215611ffe57600080fd5b61200786611d71565b945061201560208701611d71565b9350604086013592506060860135915060808601356001600160401b0381111561203e57600080fd5b611fd988828901611e75565b6000806040838503121561205d57600080fd5b61206683611d71565b91506020830135801515811461207b57600080fd5b809150509250929050565b6000806040838503121561209957600080fd5b6120a283611d71565b946020939093013593505050565b600080604083850312156120c357600080fd5b82356001600160401b03808211156120da57600080fd5b6120e686838701611d8d565b935060208501359150808211156120fc57600080fd5b5061210985828601611e0b565b9150509250929050565b6000806040838503121561212657600080fd5b82356001600160401b0381111561213c57600080fd5b61214885828601611d8d565b95602094909401359450505050565b60006020828403121561216957600080fd5b8135611f03816129f0565b60006020828403121561218657600080fd5b8151611f03816129f0565b600080600080608085870312156121a757600080fd5b84356001600160401b03808211156121be57600080fd5b6121ca88838901611e75565b95506121d860208801611d71565b945060408701359150808211156121ee57600080fd5b6121fa88838901611d8d565b9350606087013591508082111561221057600080fd5b5061221d87828801611e75565b91505092959194509250565b60008060006060848603121561223e57600080fd5b83356001600160401b038082111561225557600080fd5b61226187838801611e75565b9450602086013591508082111561227757600080fd5b5061228486828701611e75565b925050604084013590509250925092565b6000602082840312156122a757600080fd5b5035919050565b600081518084526020808501945080840160005b838110156122de578151875295820195908201906001016122c2565b509495945050505050565b60008151808452612301816020860160208601612857565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061232f57607f831692505b602080841082141561235157634e487b7160e01b600052602260045260246000fd5b8180156123655760018114612376576123a3565b60ff198616895284890196506123a3565b60008881526020902060005b8681101561239b5781548b820152908501908301612382565b505084890196505b50505050505092915050565b693d913730b6b2911d101160b11b815260006123ce600a830187612315565b6e1116101131b932b0ba37b9111d101160891b815285516123f681600f840160208a01612857565b6d1116101136b4b73a32b9111d101160911b600f9290910191820152845161242581601d840160208901612857565b72111610113232b9b1b934b83a34b7b7111d101160691b601d92909101918201526124536030820185612315565b601160f91b8152607d60f81b6001820152600201979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516124aa81601d850160208701612857565b91909101601d0192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906124e3908301866122ae565b82810360608401526124f581866122ae565b9050828103608084015261250981856122e9565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061254f908301846122e9565b979650505050505050565b602081526000611f0360208301846122ae565b60408152600061258060408301856122ae565b828103602084015261259281856122ae565b95945050505050565b602081526000611f0360208301846122e9565b6060815260006125c160608301866122e9565b82810360208401526125d381866122e9565b915050826040830152949350505050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8481526001600160a01b038416602082015260806040820181905260009061277f908301856122e9565b828103606084015261254f81856122e9565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015611dfe5784516001600160a01b0316835293830193918301916001016127b6565b60006001600160401b038211156127f4576127f4612935565b5060051b60200190565b6000821982111561281157612811612909565b500190565b60008261283357634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561285257612852612909565b500290565b60005b8381101561287257818101518382015260200161285a565b83811115612881576000848401525b50505050565b600181811c9082168061289b57607f821691505b602082108114156128bc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b03811182821017156128e7576128e7612935565b6040525050565b600060001982141561290257612902612909565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156129645760046000803e5060005160e01c5b90565b600060443d10156129755790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156129a457505050505090565b82850191508151818111156129bc5750505050505090565b843d87010160208285010111156129d65750505050505090565b6129e5602082860101876128c2565b509095945050505050565b6001600160e01b0319811681146109b457600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220efb698e89500fbdf31957245e0f652b7c2cfc3e14952deac367591c6e55eefc864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012a5760003560e01c80638129fc1c116100ad578063a22cb46511610071578063a22cb4651461029d578063b9e2b544146102b0578063e985e9c5146102c3578063f242432a146102ff578063f2fde38b1461031257600080fd5b80638129fc1c146102215780638304fc25146102295780638da5cb5b1461023c5780639ce38998146102615780639e942ace1461027457600080fd5b80632eb2c2d6116100f45780632eb2c2d6146101be5780633e0fb267146101d35780634e1273f4146101e65780636c2d185214610206578063715018a61461021957600080fd5b806253153b1461012f578062fdd58e1461015557806301ffc9a714610168578063051a26641461018b5780630e89341c146101ab575b600080fd5b61014261013d366004612191565b610325565b6040519081526020015b60405180910390f35b610142610163366004612086565b610434565b61017b610176366004612157565b6104c7565b604051901515815260200161014c565b61019e610199366004612295565b610519565b60405161014c919061259b565b61019e6101b9366004612295565b6105b3565b6101d16101cc366004611f3d565b61066c565b005b61019e6101e1366004612295565b6106b8565b6101f96101f43660046120b0565b6106d1565b60405161014c919061255a565b6101d1610214366004612113565b6107fa565b6101d161087a565b6101d161088e565b6101d1610237366004612113565b6109b7565b6097546001600160a01b03165b6040516001600160a01b03909116815260200161014c565b6101d161026f366004612086565b610a2a565b610249610282366004612295565b60c9602052600090815260409020546001600160a01b031681565b6101d16102ab36600461204a565b610aca565b6101d16102be366004612229565b610ad9565b61017b6102d1366004611f0a565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6101d161030d366004611fe6565b610b92565b6101d1610320366004611ee8565b610bd7565b600061032f610c4d565b6001600160a01b03841661036657604051634726455360e11b81526001600160a01b03851660048201526024015b60405180910390fd5b61037460cc80546001019055565b600061037f60cc5490565b600081815260c96020908152604080832080546001600160a01b0319166001600160a01b038b1617905560ca825290912088519293506103c3929091890190611cd8565b50600081815260cb6020908152604090912084516103e392860190611cd8565b506103ee8482610ca7565b7f11ebcfa4d6f58fc5729334680932554fc784d6eebd0218d2b9ae507ff0285451818688866040516104239493929190612755565b60405180910390a195945050505050565b60006001600160a01b03831661049f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b606482015260840161035d565b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806104f857506001600160e01b031982166303a24d0760e21b145b8061051357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60ca602052600090815260409020805461053290612887565b80601f016020809104026020016040519081016040528092919081815260200182805461055e90612887565b80156105ab5780601f10610580576101008083540402835291602001916105ab565b820191906000526020600020905b81548152906001019060200180831161058e57829003601f168201915b505050505081565b600081815260ca60205260408120606091906105e86105da6097546001600160a01b031690565b6001600160a01b0316610cff565b600085815260c96020526040902054610609906001600160a01b0316610cff565b600086815260cb6020908152604091829020915161062b9594939291016123af565b604051602081830303815290604052905061064581610d37565b6040516020016106559190612472565b604051602081830303815290604052915050919050565b6001600160a01b038516331480610688575061068885336102d1565b6106a45760405162461bcd60e51b815260040161035d906125e4565b6106b18585858585610e9e565b5050505050565b60cb602052600090815260409020805461053290612887565b606081518351146107365760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161035d565b600083516001600160401b0381111561075157610751612935565b60405190808252806020026020018201604052801561077a578160200160208202803683370190505b50905060005b84518110156107f2576107c585828151811061079e5761079e61291f565b60200260200101518583815181106107b8576107b861291f565b6020026020010151610434565b8282815181106107d7576107d761291f565b60209081029190910101526107eb816128ee565b9050610780565b509392505050565b600081815260c9602052604090205481906001600160a01b03163314610832576040516282b42960e81b815260040160405180910390fd5b61083c838361108c565b7f54eaa0bdcd636dd6b6c138e7c324ab68ebb60622f8cc13d20d31eeb757e7bfec828460405161086d929190612791565b60405180910390a1505050565b610882610c4d565b61088c60006110f0565b565b600054610100900460ff16158080156108ae5750600054600160ff909116105b806108c85750303b1580156108c8575060005460ff166001145b61092b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161035d565b6000805460ff19166001179055801561094e576000805461ff0019166101001790555b610956611142565b61096e60405180602001604052806000815250611171565b80156109b4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600081815260c9602052604090205481906001600160a01b031633146109ef576040516282b42960e81b815260040160405180910390fd5b6109f98383610ca7565b7ff5bb0cafb1d317496246986216c7574b6b7185f34694344f31c88a3dea072ff8828460405161086d929190612791565b610a32610c4d565b6001600160a01b038216610a6457604051634726455360e11b81526001600160a01b038316600482015260240161035d565b600081815260c9602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251848152918201527f154933cf3e220494f8a0abb0ebf8ec33fcba21e15da759d777aa8418cfd7ff18910160405180910390a15050565b610ad53383836111a1565b5050565b600081815260c9602052604090205481906001600160a01b03163314610b11576040516282b42960e81b815260040160405180910390fd5b600082815260ca602090815260409091208551610b3092870190611cd8565b50600082815260cb602090815260409091208451610b5092860190611cd8565b507f9a9f1e87acdbebd6a43613eb3302ce8597ca8fd373aaf822705b2d7771f96cc1848484604051610b84939291906125ae565b60405180910390a150505050565b6001600160a01b038516331480610bae5750610bae85336102d1565b610bca5760405162461bcd60e51b815260040161035d906125e4565b6106b18585858585611282565b610bdf610c4d565b6001600160a01b038116610c445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035d565b6109b4816110f0565b6097546001600160a01b0316331461088c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035d565b60005b8251811015610cfa57610ce8838281518110610cc857610cc861291f565b6020026020010151836001604051806020016040528060008152506113be565b80610cf2816128ee565b915050610caa565b505050565b604051606082811b6bffffffffffffffffffffffff1916602083015290610513906034016040516020818303038152906040526114e3565b6060815160001415610d5757505060408051602081019091526000815290565b6000604051806060016040528060408152602001612a076040913990506000600384516002610d8691906127fe565b610d909190612816565b610d9b906004612838565b90506000610daa8260206127fe565b6001600160401b03811115610dc157610dc1612935565b6040519080825280601f01601f191660200182016040528015610deb576020820181803683370190505b509050818152600183018586518101602084015b81831015610e595760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610dff565b600389510660018114610e735760028114610e8457610e90565b613d3d60f01b600119830152610e90565b603d60f81b6000198301525b509398975050505050505050565b8151835114610f005760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161035d565b6001600160a01b038416610f265760405162461bcd60e51b815260040161035d9061267b565b33610f358187878787876116f3565b60005b845181101561101e576000858281518110610f5557610f5561291f565b602002602001015190506000858381518110610f7357610f7361291f565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015610fc45760405162461bcd60e51b815260040161035d906126c0565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906110039084906127fe565b9250508190555050505080611017906128ee565b9050610f38565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161106e92919061256d565b60405180910390a4611084818787878787611855565b505050505050565b60005b8251811015610cfa576110de8382815181106110ad576110ad61291f565b6020026020010151836110d98685815181106110cb576110cb61291f565b602002602001015186610434565b6119c0565b806110e8816128ee565b91505061108f565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166111695760405162461bcd60e51b815260040161035d9061270a565b61088c611b54565b600054610100900460ff166111985760405162461bcd60e51b815260040161035d9061270a565b6109b481611b84565b816001600160a01b0316836001600160a01b031614156112155760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161035d565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166112a85760405162461bcd60e51b815260040161035d9061267b565b3360006112b485611bb4565b905060006112c185611bb4565b90506112d18389898585896116f3565b60008681526065602090815260408083206001600160a01b038c168452909152902054858110156113145760405162461bcd60e51b815260040161035d906126c0565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906113539084906127fe565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46113b3848a8a8a8a8a611bff565b505050505050505050565b6001600160a01b03841661141e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161035d565b33600061142a85611bb4565b9050600061143785611bb4565b9050611448836000898585896116f3565b60008681526065602090815260408083206001600160a01b038b1684529091528120805487929061147a9084906127fe565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46114da83600089898989611bff565b50505050505050565b60408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015281516060919060009061151e906002612838565b6115299060026127fe565b6001600160401b0381111561154057611540612935565b6040519080825280601f01601f19166020018201604052801561156a576020820181803683370190505b509050600360fc1b816000815181106115855761158561291f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106115b4576115b461291f565b60200101906001600160f81b031916908160001a90535060005b84518110156107f2578260048683815181106115ec576115ec61291f565b016020015182516001600160f81b031990911690911c60f81c9081106116145761161461291f565b01602001516001600160f81b0319168261162f836002612838565b61163a9060026127fe565b8151811061164a5761164a61291f565b60200101906001600160f81b031916908160001a905350828582815181106116745761167461291f565b602091010151815160f89190911c600f169081106116945761169461291f565b01602001516001600160f81b031916826116af836002612838565b6116ba9060036127fe565b815181106116ca576116ca61291f565b60200101906001600160f81b031916908160001a905350806116eb816128ee565b9150506115ce565b6001600160a01b0385166117875760005b8351811015611785576000611725868684815181106107b8576107b861291f565b11156117735783818151811061173d5761173d61291f565b602002602001015185604051630f419f7760e11b815260040161035d9291909182526001600160a01b0316602082015260400190565b8061177d816128ee565b915050611704565b505b6001600160a01b0384166118175760005b8351811015611815576117b7868583815181106107b8576107b861291f565b611803578381815181106117cd576117cd61291f565b6020026020010151866040516303e73bfd60e41b815260040161035d9291909182526001600160a01b0316602082015260400190565b8061180d816128ee565b915050611798565b505b6001600160a01b0385161580159061183757506001600160a01b03841615155b1561108457604051638cd22d1960e01b815260040160405180910390fd5b6001600160a01b0384163b156110845760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061189990899089908890889088906004016124b7565b602060405180830381600087803b1580156118b357600080fd5b505af19250505080156118e3575060408051601f3d908101601f191682019092526118e091810190612174565b60015b611990576118ef61294b565b806308c379a014156119295750611904612967565b8061190f575061192b565b8060405162461bcd60e51b815260040161035d919061259b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161035d565b6001600160e01b0319811663bc197c8160e01b146114da5760405162461bcd60e51b815260040161035d90612633565b6001600160a01b038316611a225760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161035d565b336000611a2e84611bb4565b90506000611a3b84611bb4565b9050611a5b838760008585604051806020016040528060008152506116f3565b60008581526065602090815260408083206001600160a01b038a16845290915290205484811015611ada5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161035d565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526114da565b600054610100900460ff16611b7b5760405162461bcd60e51b815260040161035d9061270a565b61088c336110f0565b600054610100900460ff16611bab5760405162461bcd60e51b815260040161035d9061270a565b6109b481611cc9565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611bee57611bee61291f565b602090810291909101015292915050565b6001600160a01b0384163b156110845760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611c439089908990889088908890600401612515565b602060405180830381600087803b158015611c5d57600080fd5b505af1925050508015611c8d575060408051601f3d908101601f19168201909252611c8a91810190612174565b60015b611c99576118ef61294b565b6001600160e01b0319811663f23a6e6160e01b146114da5760405162461bcd60e51b815260040161035d90612633565b8051610ad59060679060208401905b828054611ce490612887565b90600052602060002090601f016020900481019282611d065760008555611d4c565b82601f10611d1f57805160ff1916838001178555611d4c565b82800160010185558215611d4c579182015b82811115611d4c578251825591602001919060010190611d31565b50611d58929150611d5c565b5090565b5b80821115611d585760008155600101611d5d565b80356001600160a01b0381168114611d8857600080fd5b919050565b600082601f830112611d9e57600080fd5b81356020611dab826127db565b604051611db882826128c2565b8381528281019150858301600585901b87018401881015611dd857600080fd5b60005b85811015611dfe57611dec82611d71565b84529284019290840190600101611ddb565b5090979650505050505050565b600082601f830112611e1c57600080fd5b81356020611e29826127db565b604051611e3682826128c2565b8381528281019150858301600585901b87018401881015611e5657600080fd5b60005b85811015611dfe57813584529284019290840190600101611e59565b600082601f830112611e8657600080fd5b81356001600160401b03811115611e9f57611e9f612935565b604051611eb6601f8301601f1916602001826128c2565b818152846020838601011115611ecb57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611efa57600080fd5b611f0382611d71565b9392505050565b60008060408385031215611f1d57600080fd5b611f2683611d71565b9150611f3460208401611d71565b90509250929050565b600080600080600060a08688031215611f5557600080fd5b611f5e86611d71565b9450611f6c60208701611d71565b935060408601356001600160401b0380821115611f8857600080fd5b611f9489838a01611e0b565b94506060880135915080821115611faa57600080fd5b611fb689838a01611e0b565b93506080880135915080821115611fcc57600080fd5b50611fd988828901611e75565b9150509295509295909350565b600080600080600060a08688031215611ffe57600080fd5b61200786611d71565b945061201560208701611d71565b9350604086013592506060860135915060808601356001600160401b0381111561203e57600080fd5b611fd988828901611e75565b6000806040838503121561205d57600080fd5b61206683611d71565b91506020830135801515811461207b57600080fd5b809150509250929050565b6000806040838503121561209957600080fd5b6120a283611d71565b946020939093013593505050565b600080604083850312156120c357600080fd5b82356001600160401b03808211156120da57600080fd5b6120e686838701611d8d565b935060208501359150808211156120fc57600080fd5b5061210985828601611e0b565b9150509250929050565b6000806040838503121561212657600080fd5b82356001600160401b0381111561213c57600080fd5b61214885828601611d8d565b95602094909401359450505050565b60006020828403121561216957600080fd5b8135611f03816129f0565b60006020828403121561218657600080fd5b8151611f03816129f0565b600080600080608085870312156121a757600080fd5b84356001600160401b03808211156121be57600080fd5b6121ca88838901611e75565b95506121d860208801611d71565b945060408701359150808211156121ee57600080fd5b6121fa88838901611d8d565b9350606087013591508082111561221057600080fd5b5061221d87828801611e75565b91505092959194509250565b60008060006060848603121561223e57600080fd5b83356001600160401b038082111561225557600080fd5b61226187838801611e75565b9450602086013591508082111561227757600080fd5b5061228486828701611e75565b925050604084013590509250925092565b6000602082840312156122a757600080fd5b5035919050565b600081518084526020808501945080840160005b838110156122de578151875295820195908201906001016122c2565b509495945050505050565b60008151808452612301816020860160208601612857565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061232f57607f831692505b602080841082141561235157634e487b7160e01b600052602260045260246000fd5b8180156123655760018114612376576123a3565b60ff198616895284890196506123a3565b60008881526020902060005b8681101561239b5781548b820152908501908301612382565b505084890196505b50505050505092915050565b693d913730b6b2911d101160b11b815260006123ce600a830187612315565b6e1116101131b932b0ba37b9111d101160891b815285516123f681600f840160208a01612857565b6d1116101136b4b73a32b9111d101160911b600f9290910191820152845161242581601d840160208901612857565b72111610113232b9b1b934b83a34b7b7111d101160691b601d92909101918201526124536030820185612315565b601160f91b8152607d60f81b6001820152600201979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516124aa81601d850160208701612857565b91909101601d0192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906124e3908301866122ae565b82810360608401526124f581866122ae565b9050828103608084015261250981856122e9565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061254f908301846122e9565b979650505050505050565b602081526000611f0360208301846122ae565b60408152600061258060408301856122ae565b828103602084015261259281856122ae565b95945050505050565b602081526000611f0360208301846122e9565b6060815260006125c160608301866122e9565b82810360208401526125d381866122e9565b915050826040830152949350505050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8481526001600160a01b038416602082015260806040820181905260009061277f908301856122e9565b828103606084015261254f81856122e9565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015611dfe5784516001600160a01b0316835293830193918301916001016127b6565b60006001600160401b038211156127f4576127f4612935565b5060051b60200190565b6000821982111561281157612811612909565b500190565b60008261283357634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561285257612852612909565b500290565b60005b8381101561287257818101518382015260200161285a565b83811115612881576000848401525b50505050565b600181811c9082168061289b57607f821691505b602082108114156128bc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b03811182821017156128e7576128e7612935565b6040525050565b600060001982141561290257612902612909565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156129645760046000803e5060005160e01c5b90565b600060443d10156129755790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156129a457505050505090565b82850191508151818111156129bc5750505050505090565b843d87010160208285010111156129d65750505050505090565b6129e5602082860101876128c2565b509095945050505050565b6001600160e01b0319811681146109b457600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220efb698e89500fbdf31957245e0f652b7c2cfc3e14952deac367591c6e55eefc864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3247,
        "contract": "contracts/Team.sol:Team",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3250,
        "contract": "contracts/Team.sol:Team",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8642,
        "contract": "contracts/Team.sol:Team",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9798,
        "contract": "contracts/Team.sol:Team",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3556,
        "contract": "contracts/Team.sol:Team",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3562,
        "contract": "contracts/Team.sol:Team",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3564,
        "contract": "contracts/Team.sol:Team",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 4771,
        "contract": "contracts/Team.sol:Team",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 541,
        "contract": "contracts/Team.sol:Team",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 661,
        "contract": "contracts/Team.sol:Team",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 28595,
        "contract": "contracts/Team.sol:Team",
        "label": "minterOf",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 28599,
        "contract": "contracts/Team.sol:Team",
        "label": "nameOf",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 28603,
        "contract": "contracts/Team.sol:Team",
        "label": "descriptionOf",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 28606,
        "contract": "contracts/Team.sol:Team",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(Counter)17376_storage"
      },
      {
        "astId": 29060,
        "contract": "contracts/Team.sol:Team",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)17376_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 17375,
            "contract": "contracts/Team.sol:Team",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}