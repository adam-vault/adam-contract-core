{
  "address": "0x8fAf485d23E400755Da2E8b1c00701B098964982",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AllowAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AllowAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "AllowTeam",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AllowToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "ApproveTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum CommonBudgetApproval.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreateTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "ExecuteTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecuteTransferLiquidERC20Transaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RevokeTransaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "SetApprover",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressesMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "afterInitialized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowAllAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowAnyAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowUnlimitedUsageCount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "approveTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approverTeamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        }
      ],
      "name": "approversMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetBaseCurrencyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "assetEthPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrencyDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "canResolvePrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        },
        {
          "internalType": "uint32",
          "name": "_deadline",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_isExecute",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "createTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "ethAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeParams",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executorTeamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executorTeamId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "approvers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "approverTeamId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minApproval",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "text",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "transactionType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "allowUnlimitedUsageCount",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "usageCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "team",
              "type": "address"
            }
          ],
          "internalType": "struct CommonBudgetApproval.InitializeParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_allowAllAddresses",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_toAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_allowAnyAmount",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_baseCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_toTeamIds",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minApproval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "revokeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "team",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "toTeamIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "toTeamIdsMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toTeamsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum CommonBudgetApproval.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "deadline",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "approvedCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usageCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd84b69fb23ab0864ecd54cc3f312f349351df490d03ab42c65a862d15d84c024",
  "receipt": {
    "to": null,
    "from": "0x2d61d2ea8c296305C4AF461f12a172cF1d0af599",
    "contractAddress": "0x8fAf485d23E400755Da2E8b1c00701B098964982",
    "transactionIndex": 81,
    "gasUsed": "3613447",
    "logsBloom": "0x
    "blockHash": "0xbaed3bab0fe4b4c1d4eb07f6ba6134ecc0855b5c70bb2d74cf852e0a5d0f0388",
    "transactionHash": "0xd84b69fb23ab0864ecd54cc3f312f349351df490d03ab42c65a862d15d84c024",
    "logs": [
      {
        "transactionIndex": 81,
        "blockNumber": 7913395,
        "transactionHash": "0xd84b69fb23ab0864ecd54cc3f312f349351df490d03ab42c65a862d15d84c024",
        "address": "0x8fAf485d23E400755Da2E8b1c00701B098964982",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 89,
        "blockHash": "0xbaed3bab0fe4b4c1d4eb07f6ba6134ecc0855b5c70bb2d74cf852e0a5d0f0388"
      }
    ],
    "blockNumber": 7913395,
    "cumulativeGasUsed": "12341547",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9b8d9175cff16c608ccf8de8d16b3fd5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AllowAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AllowAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"AllowTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AllowToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"ApproveTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CommonBudgetApproval.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransferLiquidERC20Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RevokeTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"SetApprover\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAllAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAnyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowUnlimitedUsageCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"approveTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approverTeamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"}],\"name\":\"approversMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetBaseCurrencyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrencyDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"canResolvePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint32\",\"name\":\"_deadline\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_isExecute\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"createTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ethAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeParams\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorTeamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executorTeamId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"approvers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"approverTeamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minApproval\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transactionType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowUnlimitedUsageCount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"usageCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"internalType\":\"struct CommonBudgetApproval.InitializeParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_allowAllAddresses\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowAnyAmount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_baseCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_toTeamIds\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"revokeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toTeamIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toTeamIdsMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTeamsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum CommonBudgetApproval.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"approvedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetBaseCurrencyPrice(address,uint256)\":{\"notice\":\"This function is imported by other contract, thus cannot be external\"},\"canResolvePrice(address)\":{\"notice\":\"This function is imported by other contract, thus cannot be external\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransferLiquidERC20BudgetApproval.sol\":\"TransferLiquidERC20BudgetApproval\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(address base, address quote) external view returns (uint8);\\n\\n  function description(address base, address quote) external view returns (string memory);\\n\\n  function version(address base, address quote) external view returns (uint256);\\n\\n  function latestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (int256 answer);\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (uint256 timestamp);\\n\\n  // Registry getters\\n\\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (Phase memory phase);\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 previousRoundId);\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 nextRoundId);\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(address base, address quote)\\n    external\\n    view\\n    returns (AggregatorV2V3Interface proposedAggregator);\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\",\"keccak256\":\"0xa783cf3434bd5b5153fe876c37d5d5cb78d4e198f01f184b60ed3392401ddc0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/TransferLiquidERC20BudgetApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./base/CommonBudgetApproval.sol\\\";\\nimport \\\"./lib/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./base/PriceResolver.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\n\\nimport \\\"./interface/IBudgetApprovalExecutee.sol\\\";\\n\\ncontract TransferLiquidERC20BudgetApproval is\\n    CommonBudgetApproval,\\n    PriceResolver\\n{\\n    using BytesLib for bytes;\\n\\n    string public constant override name =\\n        \\\"Transfer Liquid ERC20 Budget Approval\\\";\\n\\n    bool public allowAllAddresses;\\n    mapping(address => bool) public addressesMapping;\\n    address[] public tokens;\\n    mapping(address => bool) public tokensMapping;\\n    bool public allowAnyAmount;\\n    uint256 public totalAmount;\\n\\n    // v2\\n    uint256[] public toTeamIds;\\n    mapping(uint256 => bool) public toTeamIdsMapping;\\n\\n    event AllowTeam(uint256 indexed teamId);\\n    event ExecuteTransferLiquidERC20Transaction(\\n        uint256 indexed id,\\n        address indexed executor,\\n        address indexed toAddress,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        InitializeParams calldata params,\\n        bool _allowAllAddresses,\\n        address[] memory _toAddresses,\\n        address[] memory _tokens,\\n        bool _allowAnyAmount,\\n        uint256 _totalAmount,\\n        address _baseCurrency,\\n        // v2\\n        uint256[] memory _toTeamIds\\n    ) external initializer {\\n        __BudgetApproval_init(params);\\n\\n        allowAllAddresses = _allowAllAddresses;\\n        for (uint256 i = 0; i < _toAddresses.length; i++) {\\n            _addToAddress(_toAddresses[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _addToken(_tokens[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _toTeamIds.length; i++) {\\n            _addToTeam(_toTeamIds[i]);\\n        }\\n\\n        allowAnyAmount = _allowAnyAmount;\\n        totalAmount = _totalAmount;\\n        __PriceResolver_init(_baseCurrency);\\n    }\\n\\n    function executeParams() external pure override returns (string[] memory) {\\n        string[] memory arr = new string[](3);\\n        arr[0] = \\\"address token\\\";\\n        arr[1] = \\\"address to\\\";\\n        arr[2] = \\\"uint256 value\\\";\\n        return arr;\\n    }\\n\\n    function _execute(uint256 transactionId, bytes memory data)\\n        internal\\n        override\\n    {\\n        (address token, address to, uint256 value) = abi.decode(\\n            data,\\n            (address, address, uint256)\\n        );\\n        uint256 amountInBaseCurrency;\\n        uint256 _totalAmount = totalAmount;\\n        bool _allowAnyAmount = allowAnyAmount;\\n\\n        if (token == Denominations.ETH) {\\n            IBudgetApprovalExecutee(executee()).executeByBudgetApproval(\\n                to,\\n                \\\"\\\",\\n                value\\n            );\\n        } else {\\n            bytes memory executeData = abi.encodeWithSelector(\\n                IERC20.transfer.selector,\\n                to,\\n                value\\n            );\\n            IBudgetApprovalExecutee(executee()).executeByBudgetApproval(\\n                token,\\n                executeData,\\n                0\\n            );\\n        }\\n\\n        amountInBaseCurrency = assetBaseCurrencyPrice(token, value);\\n        require(\\n            allowAllAddresses ||\\n                addressesMapping[to] ||\\n                _checkIsToTeamsMember(to),\\n            \\\"Recipient not whitelisted in budget\\\"\\n        );\\n        require(tokensMapping[token], \\\"Token not whitelisted in budget\\\");\\n        require(amountInBaseCurrency > 0, \\\"Transfer amount should not be zero\\\");\\n        require(\\n            _allowAnyAmount || amountInBaseCurrency <= _totalAmount,\\n            \\\"Exceeded max budget transferable amount\\\"\\n        );\\n\\n        if (!_allowAnyAmount) {\\n            totalAmount = _totalAmount - amountInBaseCurrency;\\n        }\\n        emit ExecuteTransferLiquidERC20Transaction(\\n            transactionId,\\n            msg.sender,\\n            to,\\n            token,\\n            value\\n        );\\n    }\\n\\n    function _addToken(address token) internal {\\n        require(!tokensMapping[token], \\\"Duplicated Item in source token list.\\\");\\n        require(\\n            canResolvePrice(token),\\n            \\\"Unresolvable token in target token list.\\\"\\n        );\\n\\n        tokens.push(token);\\n        tokensMapping[token] = true;\\n        emit AllowToken(token);\\n    }\\n\\n    function _addToAddress(address to) internal {\\n        require(\\n            !addressesMapping[to],\\n            \\\"Duplicated address in target address list\\\"\\n        );\\n        addressesMapping[to] = true;\\n        emit AllowAddress(to);\\n    }\\n\\n    function tokensLength() public view returns (uint256) {\\n        return tokens.length;\\n    }\\n\\n    function _checkIsToTeamsMember(address to) internal view returns (bool) {\\n        uint256 _toTeamIdsLength = toTeamIds.length;\\n        address[] memory toArray = new address[](_toTeamIdsLength);\\n        for (uint256 i = 0; i < _toTeamIdsLength; i++) {\\n            toArray[i] = to;\\n        }\\n\\n        uint256[] memory balances = ITeam(team()).balanceOfBatch(\\n            toArray,\\n            toTeamIds\\n        );\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            if (balances[i] > 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _addToTeam(uint256 teamId) internal {\\n        require(\\n            !toTeamIdsMapping[teamId],\\n            \\\"Duplicated team in target team list\\\"\\n        );\\n        toTeamIdsMapping[teamId] = true;\\n        toTeamIds.push(teamId);\\n        emit AllowTeam(teamId);\\n    }\\n\\n    function toTeamsLength() public view returns (uint256) {\\n        return toTeamIds.length;\\n    }\\n}\\n\",\"keccak256\":\"0x5f393113b3ab345c4c695031506215b16e8e44674d1cdb938b0676562f369efb\",\"license\":\"GPL-3.0\"},\"contracts/base/CommonBudgetApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"../lib/BytesLib.sol\\\";\\n\\nimport \\\"../interface/ITeam.sol\\\";\\nimport \\\"../interface/IBudgetApprovalExecutee.sol\\\";\\n\\nabstract contract CommonBudgetApproval is Initializable {\\n\\n    using Counters for Counters.Counter;\\n    using BytesLib for bytes;\\n\\n    enum Status {\\n        Pending,\\n        Approved,\\n        Completed,\\n        Cancelled\\n    }\\n\\n    struct Transaction {\\n        uint256 id;\\n        bytes[] data;\\n        Status status;\\n        uint32 deadline;\\n        bool isExist;\\n        uint256 approvedCount;\\n        mapping(address => bool) approved;\\n    }\\n\\n    event CreateTransaction(\\n        uint256 indexed id,\\n        bytes[] data,\\n        uint256 deadline,\\n        Status status,\\n        string comment,\\n        address creator\\n    );\\n    event ApproveTransaction(\\n        uint256 indexed id,\\n        address approver,\\n        string comment\\n    );\\n    event ExecuteTransaction(\\n        uint256 indexed id,\\n        bytes[] data,\\n        address _executor\\n    );\\n    event RevokeTransaction(uint256 indexed id);\\n    event AllowAddress(address target);\\n    event AllowToken(address token);\\n    event AllowAmount(uint256 amount);\\n    event SetApprover(address approver);\\n\\n    Counters.Counter private _transactionIds;\\n\\n    mapping(uint256 => Transaction) public transactions;\\n\\n    address private _executor;\\n    uint256 private _executorTeamId;\\n    address private _executee; // Must be BudgetApprovalExecutee\\n\\n    mapping(address => bool) private _approversMapping;\\n    uint256 private _approverTeamId;\\n    uint256 private _minApproval;\\n\\n    string private _text;\\n    string private _transactionType;\\n\\n    bool private _allowUnlimitedUsageCount;\\n    uint256 private _usageCount;\\n\\n    uint256 private _startTime;\\n    uint256 private _endTime;\\n\\n    address private _team;\\n\\n    struct InitializeParams {\\n        address executor;\\n        uint256 executorTeamId;\\n        address[] approvers;\\n        uint256 approverTeamId;\\n        uint256 minApproval;\\n        string text;\\n        string transactionType;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool allowUnlimitedUsageCount;\\n        uint256 usageCount;\\n        address team; // TODO: Get team from IBudgetApprovalExecutee\\n    }\\n\\n    modifier onlyExecutee() {\\n        require(msg.sender == executee(), \\\"Executee not whitelisted in budget\\\");\\n        _;\\n    }\\n\\n    modifier matchStatus(uint256 id, Status status) {\\n        require(\\n            transactions[id].status == status,\\n            \\\"Transaction status invalid\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier checkTime(uint256 id) {\\n        require(\\n            block.timestamp <= transactions[id].deadline,\\n            \\\"Transaction expired\\\"\\n        );\\n        require(\\n            block.timestamp >= startTime(),\\n            \\\"Budget usage period not started\\\"\\n        );\\n\\n        uint256 __endtime = endTime();\\n        if (__endtime != 0) {\\n            require(\\n                block.timestamp < __endtime,\\n                \\\"Budget usage period has ended\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier onlyApprover() {\\n        require(\\n            approversMapping(msg.sender) ||\\n                ITeam(team()).balanceOf(msg.sender, approverTeamId()) > 0,\\n            \\\"Approver not whitelisted in budget\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(\\n            msg.sender == executor() ||\\n                ITeam(team()).balanceOf(msg.sender, executorTeamId()) > 0,\\n            \\\"Executor not whitelisted in budget\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function executor() public view returns (address) {\\n        return _executor;\\n    }\\n\\n    function executorTeamId() public view returns (uint256) {\\n        return _executorTeamId;\\n    }\\n\\n    function executee() public view returns (address) {\\n        return _executee;\\n    }\\n\\n    function approversMapping(address eoa) public view returns (bool) {\\n        return _approversMapping[eoa];\\n    }\\n\\n    function approverTeamId() public view returns (uint256) {\\n        return _approverTeamId;\\n    }\\n\\n    function minApproval() public view returns (uint256) {\\n        return _minApproval;\\n    }\\n\\n    function text() public view returns (string memory) {\\n        return _text;\\n    }\\n\\n    function transactionType() public view returns (string memory) {\\n        return _transactionType;\\n    }\\n\\n    function allowUnlimitedUsageCount() public view returns (bool) {\\n        return _allowUnlimitedUsageCount;\\n    }\\n\\n    function usageCount() public view returns (uint256) {\\n        return _usageCount;\\n    }\\n\\n    function startTime() public view returns (uint256) {\\n        return _startTime;\\n    }\\n\\n    function endTime() public view returns (uint256) {\\n        return _endTime;\\n    }\\n\\n    function team() public view returns (address) {\\n        return _team;\\n    }\\n\\n    function __BudgetApproval_init(InitializeParams calldata params)\\n        internal\\n        onlyInitializing\\n    {\\n        require(\\n            params.approverTeamId > 0 ||\\n                (params.minApproval <= params.approvers.length),\\n            \\\"Invalid approver list\\\"\\n        );\\n\\n        _executee = msg.sender;\\n        _executor = params.executor;\\n        _text = params.text;\\n        _transactionType = params.transactionType;\\n\\n        _minApproval = params.minApproval;\\n        _startTime = params.startTime;\\n        _endTime = params.endTime;\\n\\n        _allowUnlimitedUsageCount = params.allowUnlimitedUsageCount;\\n        _usageCount = params.usageCount;\\n\\n        _team = params.team;\\n        _executorTeamId = params.executorTeamId;\\n        _approverTeamId = params.approverTeamId;\\n\\n        for (uint256 i = 0; i < params.approvers.length; i++) {\\n            _approversMapping[params.approvers[i]] = true;\\n            emit SetApprover(params.approvers[i]);\\n        }\\n    }\\n\\n    function afterInitialized() external virtual onlyExecutee {}\\n\\n    function executeTransaction(uint256 id)\\n        public\\n        matchStatus(id, Status.Approved)\\n        checkTime(id)\\n        onlyExecutor\\n    {\\n        bool unlimited = allowUnlimitedUsageCount();\\n        uint256 count = usageCount();\\n        bytes[] memory data = transactions[id].data;\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            require(unlimited || count > 0, \\\"Exceeded budget usage limit\\\");\\n            if (!unlimited) {\\n                count--;\\n            }\\n            _execute(id, data[i]);\\n        }\\n\\n        _usageCount = count;\\n        transactions[id].status = Status.Completed;\\n        emit ExecuteTransaction(id, data, msg.sender);\\n    }\\n\\n    function createTransaction(\\n        bytes[] memory _data,\\n        uint32 _deadline,\\n        bool _isExecute,\\n        string calldata comment\\n    ) external onlyExecutor returns (uint256) {\\n        _transactionIds.increment();\\n        uint256 id = _transactionIds.current();\\n\\n        // workaround when have mapping in Struct\\n        Transaction storage newTransaction = transactions[id];\\n        newTransaction.id = id;\\n        newTransaction.data = _data;\\n        newTransaction.deadline = _deadline;\\n        newTransaction.isExist = true;\\n\\n        if (minApproval() == 0) {\\n            transactions[id].status = Status.Approved;\\n        } else {\\n            transactions[id].status = Status.Pending;\\n        }\\n\\n        emit CreateTransaction(\\n            id,\\n            _data,\\n            _deadline,\\n            newTransaction.status,\\n            comment,\\n            msg.sender\\n        );\\n\\n        if (_isExecute) {\\n            executeTransaction(id);\\n        }\\n        return id;\\n    }\\n\\n    function approveTransaction(uint256 id, string calldata comment)\\n        external\\n        onlyApprover\\n    {\\n        require(_transactionIds.current() >= id, \\\"Invaild TransactionId\\\");\\n\\n        Status _transactionStatus = transactions[id].status;\\n        uint256 _transactionApprovedCount = transactions[id].approvedCount + 1;\\n\\n        require(\\n            _transactionStatus == Status.Pending ||\\n                _transactionStatus == Status.Approved,\\n            \\\"Unexpected transaction status\\\"\\n        );\\n        require(\\n            !transactions[id].approved[msg.sender],\\n            \\\"Transaction has been approved before\\\"\\n        );\\n\\n        transactions[id].approved[msg.sender] = true;\\n        transactions[id].approvedCount = _transactionApprovedCount;\\n\\n        if (_transactionApprovedCount >= minApproval()) {\\n            transactions[id].status = Status.Approved;\\n        }\\n\\n        emit ApproveTransaction(id, msg.sender, comment);\\n    }\\n\\n    function revokeTransaction(uint256 id) external onlyExecutor {\\n        require(_transactionIds.current() >= id, \\\"Invaild TransactionId\\\");\\n        require(\\n            transactions[id].status != Status.Completed,\\n            \\\"Transaction has been completed before\\\"\\n        );\\n        transactions[id].status = Status.Cancelled;\\n\\n        emit RevokeTransaction(id);\\n    }\\n\\n    function _execute(uint256, bytes memory) internal virtual;\\n\\n    function executeParams() external pure virtual returns (string[] memory);\\n\\n    function name() external virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x5a55f9be767b2238d5cdbc25b8b4957ed008ad206d138f544585bda78d0fbaf2\",\"license\":\"GPL-3.0\"},\"contracts/base/PriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../lib/Constant.sol\\\";\\n\\ncontract PriceResolver is Initializable {\\n    address private _baseCurrency;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n      _disableInitializers();\\n    }\\n\\n    function __PriceResolver_init(address __baseCurrency) internal onlyInitializing {\\n        _baseCurrency = __baseCurrency;\\n    }\\n\\n    function baseCurrency() public view virtual returns (address) {\\n        return _baseCurrency;\\n    }\\n    function _WETH9() internal pure returns (address) {\\n        return Constant.WETH_ADDRESS;\\n    }\\n\\n    /// @notice This function is imported by other contract, thus cannot be external\\n    function assetBaseCurrencyPrice(address asset, uint256 amount) public view virtual returns (uint256) {\\n        address __baseCurrency = baseCurrency();\\n        if (asset == __baseCurrency)\\n            return amount;\\n        \\n        if(__baseCurrency == Denominations.ETH || __baseCurrency == _WETH9()) {\\n            return assetEthPrice(asset, amount);\\n        }\\n\\n        if(asset == Denominations.ETH || asset == _WETH9()) {\\n            return ethAssetPrice(__baseCurrency, amount);\\n        }\\n\\n        uint8 baseDecimals = baseCurrencyDecimals();\\n        int price = getDerivedPrice(asset, __baseCurrency, 18 /* ETH decimals */);\\n\\n        if (price > 0) {\\n            return uint256(scalePrice(int256(price) * int256(amount), 18 + IERC20Metadata(asset).decimals(), baseDecimals));\\n        }\\n        return 0;\\n    }\\n\\n    function ethAssetPrice(address asset, uint256 ethAmount) public view virtual returns (uint256) {\\n        if (asset == Denominations.ETH || asset == _WETH9())\\n            return ethAmount;\\n\\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = \\n        FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(asset, Denominations.ETH);\\n        uint8 priceDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY).decimals(asset, Denominations.ETH);\\n\\n        require(answeredInRound >= roundID, \\\"Stale price in Chainlink\\\");\\n        require(block.timestamp <= updatedAt + Constant.STALE_PRICE_DELAY, \\\"Stale price in Chainlink\\\");\\n\\n        price = scalePrice(price, priceDecimals, 18 /* ETH decimals */);\\n        if (price > 0) {\\n            return ethAmount * (10 ** IERC20Metadata(asset).decimals()) / uint256(price);\\n        }\\n\\n        return 0;\\n    }\\n\\n    function assetEthPrice(address asset, uint256 amount) public view virtual returns (uint256) {\\n        if (asset == Denominations.ETH || asset == _WETH9())\\n            return amount;\\n\\n        (uint80 roundID, int price, , uint256 updatedAt, uint80 answeredInRound) = \\n        FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(asset, Denominations.ETH);\\n        uint8 priceDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY).decimals(asset, Denominations.ETH);\\n        \\n        require(answeredInRound >= roundID, \\\"Stale price in Chainlink\\\");\\n        require(block.timestamp <= updatedAt + Constant.STALE_PRICE_DELAY, \\\"Stale price in Chainlink\\\");\\n\\n        price = scalePrice(price, priceDecimals, 18 /* ETH decimals */);\\n\\n        if (price > 0) {\\n            return uint256(price) * amount / 10 ** IERC20Metadata(asset).decimals();\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getDerivedPrice(address _base, address _quote, uint8 _decimals)\\n        internal\\n        view\\n        virtual\\n        returns (int256)\\n    {\\n        require(_decimals > uint8(0) && _decimals <= uint8(18), \\\"Invalid _decimals\\\");\\n        int256 decimals = int256(10 ** uint256(_decimals));\\n        (uint80 _baseRoundID, int basePrice, , uint256 _baseUpdatedAt, uint80 _baseAnsweredInRound) = \\n            FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(_base, Denominations.ETH);\\n\\n        require(_baseAnsweredInRound >= _baseRoundID, \\\"Stale price in Chainlink 104\\\");\\n        require(block.timestamp <= _baseUpdatedAt + Constant.STALE_PRICE_DELAY, \\\"Stale price in Chainlink 105\\\");\\n\\n        uint8 baseDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY).decimals(_base, Denominations.ETH);\\n        basePrice = scalePrice(basePrice, baseDecimals, _decimals);\\n        (uint80 _quoteRoundID, int quotePrice, , uint256 _quoteUpdatedAt, uint80 _quoteAnsweredInRound) = \\n            FeedRegistryInterface(Constant.FEED_REGISTRY).latestRoundData(_quote, Denominations.ETH);\\n        require(_quoteAnsweredInRound >= _quoteRoundID, \\\"Stale price in Chainlink 112\\\");\\n        require(block.timestamp <= _quoteUpdatedAt + Constant.STALE_PRICE_DELAY, \\\"Stale price in Chainlink 113\\\");\\n\\n        uint8 quoteDecimals = FeedRegistryInterface(Constant.FEED_REGISTRY).decimals(_quote, Denominations.ETH);\\n        quotePrice = scalePrice(quotePrice, quoteDecimals, _decimals);\\n\\n        return basePrice * decimals / quotePrice;\\n    }\\n\\n    function scalePrice(int256 _price, uint8 _priceDecimals, uint8 _decimals)\\n        internal\\n        pure\\n        virtual\\n        returns (int256)\\n    {\\n        if (_priceDecimals < _decimals) {\\n            return _price * int256(10 ** uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / int256(10 ** uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n    function baseCurrencyDecimals() public view virtual returns (uint8) {\\n        if (baseCurrency() == Denominations.ETH) return 18;\\n        try IERC20Metadata(baseCurrency()).decimals() returns (uint8 _decimals) {\\n            return _decimals;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is imported by other contract, thus cannot be external\\n    function canResolvePrice(address asset) public view virtual returns (bool) {\\n        if (asset == Denominations.ETH || asset == _WETH9())\\n            return true;\\n        try FeedRegistryInterface(Constant.FEED_REGISTRY).getFeed(asset, Denominations.ETH) {\\n            return true;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x74bb282c21803d8da5d9d3213f7fe08223548aebd61f577c9ba7a70b8268b6c6\",\"license\":\"GPL-3.0\"},\"contracts/interface/IBudgetApprovalExecutee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\ninterface IBudgetApprovalExecutee {\\n    function executeByBudgetApproval(address, bytes memory, uint256) external returns (bytes memory);\\n    function createBudgetApprovals(address[] calldata, bytes[] calldata) external;\\n    function team() external view returns (address);\\n}\",\"keccak256\":\"0xb8787fc908a922f0053195024ebfae3c447d6c09a30f13fb2c221c5bb9f3034d\",\"license\":\"GPL-3.0\"},\"contracts/interface/ITeam.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity 0.8.7;\\n\\ninterface ITeam {\\n    event AddMembers(uint256 tokenId, address[] members);\\n    event AddTeam(\\n        uint256 tokenId,\\n        address creator,\\n        address minter,\\n        string name,\\n        string description\\n    );\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n    event BeaconUpgraded(address indexed beacon);\\n    event EditInfo(string name, string description, uint256 tokenId);\\n    event Initialized(uint8 version);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event RemoveMembers(uint256 tokenId, address[] members);\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n    event URI(string value, uint256 indexed id);\\n    event Upgraded(address indexed implementation);\\n\\n    function addMembers(address[] memory members, uint256 tokenId) external;\\n\\n    function addTeam(\\n        string memory name,\\n        address minter,\\n        address[] memory members,\\n        string memory description\\n    ) external returns (uint256);\\n\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function creatorOf(uint256) external view returns (address);\\n\\n    function descriptionOf(uint256) external view returns (string memory);\\n\\n    function initialize() external;\\n\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function minterOf(uint256) external view returns (address);\\n\\n    function nameOf(uint256) external view returns (string memory);\\n\\n    function owner() external view returns (address);\\n\\n    function proxiableUUID() external view returns (bytes32);\\n\\n    function removeMembers(address[] memory members, uint256 tokenId) external;\\n\\n    function renounceOwnership() external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function setInfo(\\n        string memory name,\\n        string memory description,\\n        uint256 tokenId\\n    ) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function upgradeTo(address newImplementation) external;\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data)\\n        external\\n        payable;\\n\\n    function uri(uint256 _id) external view returns (string memory);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"AddMembers\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"creator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"minter\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"AddTeam\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousAdmin\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newAdmin\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AdminChanged\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"ApprovalForAll\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"beacon\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"BeaconUpgraded\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"EditInfo\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnershipTransferred\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"RemoveMembers\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"values\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"TransferBatch\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"TransferSingle\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"URI\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"implementation\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"Upgraded\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"addMembers\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"minter\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"addTeam\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"accounts\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"balanceOfBatch\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"creatorOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"descriptionOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"isApprovedForAll\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"minterOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"nameOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"owner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"proxiableUUID\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"members\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"removeMembers\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"renounceOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"ids\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"safeBatchTransferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"safeTransferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setApprovalForAll\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"description\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInfo\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes4\\\",\\\"name\\\":\\\"interfaceId\\\",\\\"type\\\":\\\"bytes4\\\"}],\\\"name\\\":\\\"supportsInterface\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"transferOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newImplementation\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"upgradeTo\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newImplementation\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"upgradeToAndCall\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"uri\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\\n*/\\n\",\"keccak256\":\"0x0ad2d745782bfc7d9f072dccba01e0942607684232f3f4b3f5e81eb53624ddeb\",\"license\":\"GPL-3.0\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity 0.8.7;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes4(bytes memory _bytes, uint256 _start) internal pure returns (bytes4) {\\n        require(_bytes.length >= _start + 4, \\\"toBytes4_outOfBounds\\\");\\n        bytes4 tempBytes4;\\n\\n        assembly {\\n            tempBytes4 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes4;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\",\"keccak256\":\"0x2a8c053fd6fdc1a23ef9a50614500aa9b2438719725e6bd224d2fa090ecbea60\",\"license\":\"Unlicense\"},\"contracts/lib/Constant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Constant {\\n    address public constant WETH_ADDRESS = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6;\\n    address public constant UNISWAP_ROUTER = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n    address public constant FEED_REGISTRY = 0xaBC30D61D30f19de38897EBA18252868B3459664;\\n    uint public constant BLOCK_NUMBER_IN_SECOND = 13;\\n    uint public constant STALE_PRICE_DELAY = 86400;\\n}\\n\",\"keccak256\":\"0x7b3499ca0f09160aa429c1bd2285b0c253414dfcd8666ada7c021b1b921935b1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000036565b6200002662000036565b6200003062000036565b620000f8565b600054610100900460ff1615620000a35760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000f6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b613fea80620001086000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638501543711610130578063c34c08e5116100b8578063dd7a07041161007c578063dd7a0704146104ec578063de755e2f146104f4578063e52b4ab2146104fc578063ee22610b1461051f578063f5c038521461053257600080fd5b8063c34c08e5146104b0578063c7ee6712146104c1578063cf26fec6146104d4578063d92fc67b146104dc578063d96c9196146104e457600080fd5b806397c85a61116100ff57806397c85a611461040b5780639ace38c21461041e578063b49612ba1461047d578063b617b3ee14610490578063bc9c5e901461049d57600080fd5b806385015437146103b957806385f2aef2146103c65780638d1c5c29146103d757806392a85fde146103fa57600080fd5b806350bd881f116101be5780636bdebe5e116101825780636bdebe5e14610355578063735631ad1461038157806378e97925146103965780637cd47d931461039e5780637cddb6c3146103a657600080fd5b806350bd881f146103025780635aaaefad1461030a5780635ad325021461031d57806360d8bb221461032857806363d727dc1461033b57600080fd5b80631f1bd692116102055780631f1bd6921461027f5780633197cbb61461028757806331a7bdd91461028f5780633d70015a146102a45780634f64b2be146102d757600080fd5b806303ff90f61461023757806306fdde031461024e57806314b893f9146102635780631a39d8ef14610276575b600080fd5b6008545b6040519081526020015b60405180910390f35b610256610543565b60405161024591906139e2565b61023b6102713660046132db565b61055f565b61023b60485481565b61025661077a565b600e5461023b565b61029761080c565b6040516102459190613980565b6102c76102b236600461324f565b60466020526000908152604090205460ff1681565b6040519015158152602001610245565b6102ea6102e5366004613650565b61090d565b6040516001600160a01b039091168152602001610245565b600c5461023b565b61023b6103183660046132af565b610937565b600b5460ff166102c7565b61023b6103363660046132af565b610bfa565b610343610da6565b60405160ff9091168152602001610245565b6102c761036336600461324f565b6001600160a01b031660009081526006602052604090205460ff1690565b61039461038f366004613650565b610e61565b005b600d5461023b565b610256611057565b61023b6103b4366004613650565b611066565b6047546102c79060ff1681565b600f546001600160a01b03166102ea565b6102c76103e536600461324f565b60446020526000908152604090205460ff1681565b6010546001600160a01b03166102ea565b610394610419366004613682565b611087565b61046c61042c366004613650565b600260208190526000918252604090912080549181015460039091015460ff8083169263ffffffff61010082041692650100000000009091049091169085565b604051610245959493929190613ab9565b61023b61048b3660046132af565b6113b7565b6043546102c79060ff1681565b6102c76104ab36600461324f565b611655565b6003546001600160a01b03166102ea565b6103946104cf366004613567565b61177a565b610394611981565b60455461023b565b60075461023b565b60495461023b565b60045461023b565b6102c761050a366004613650565b604a6020526000908152604090205460ff1681565b61039461052d366004613650565b6119e8565b6005546001600160a01b03166102ea565b604051806060016040528060258152602001613f706025913981565b60006105736003546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610636575060006105a1600f546001600160a01b031690565b6001600160a01b031662fdd58e336105b860045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b1580156105fc57600080fd5b505afa158015610610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106349190613669565b115b61065b5760405162461bcd60e51b815260040161065290613a77565b60405180910390fd5b610669600180546001019055565b600061067460015490565b60008181526002602090815260409091208281558951929350916106a0916001840191908b0190612f0c565b506002810180546501000000000065ffffffffff001990911661010063ffffffff8b160265ff00000000001916171790556008546106fa57600082815260026020819052604090912001805460ff19166001179055610715565b600082815260026020819052604090912001805460ff191690555b600281015460405183917f8a5186dbaf6f344b2837e11834be94edebb633f05034f422c6b1fe1595b4d0cc91610758918c918c9160ff16908b908b903390613925565b60405180910390a2851561076f5761076f826119e8565b509695505050505050565b60606009805461078990613e9c565b80601f01602080910402602001604051908101604052809291908181526020018280546107b590613e9c565b80156108025780601f106107d757610100808354040283529160200191610802565b820191906000526020600020905b8154815290600101906020018083116107e557829003601f168201915b5050505050905090565b6040805160038082526080820190925260609160009190816020015b60608152602001906001900390816108285790505090506040518060400160405280600d81526020016c30b2323932b9b9903a37b5b2b760991b8152508160008151811061087857610878613f2e565b60200260200101819052506040518060400160405280600a8152602001696164647265737320746f60b01b815250816001815181106108b9576108b9613f2e565b60200260200101819052506040518060400160405280600d81526020016c75696e743235362076616c756560981b815250816002815181106108fd576108fd613f2e565b6020908102919091010152919050565b6045818154811061091d57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006001600160a01b038316600080516020613f95833981519152148061097a57506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15610986575080610bf4565b60008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d88600080516020613f958339815191526040518363ffffffff1660e01b81526004016109dc92919061380d565b60a06040518083038186803b1580156109f457600080fd5b505afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c91906136ce565b945094505093509350600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a889600080516020613f958339815191526040518363ffffffff1660e01b8152600401610a8792919061380d565b60206040518083038186803b158015610a9f57600080fd5b505afa158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad7919061371e565b9050846001600160501b0316826001600160501b03161015610b0b5760405162461bcd60e51b8152600401610652906139f5565b610b186201518084613bfd565b421115610b375760405162461bcd60e51b8152600401610652906139f5565b610b4384826012611e70565b93506000841315610bea57876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8757600080fd5b505afa158015610b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbf919061371e565b610bca90600a613ccb565b610bd48886613dfc565b610bde9190613c68565b95505050505050610bf4565b6000955050505050505b92915050565b600080610c0f6010546001600160a01b031690565b9050806001600160a01b0316846001600160a01b03161415610c345782915050610bf4565b6001600160a01b038116600080516020613f958339815191521480610c7557506001600160a01b03811673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15610c8c57610c848484610937565b915050610bf4565b6001600160a01b038416600080516020613f958339815191521480610ccd57506001600160a01b03841673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15610cdc57610c8481846113b7565b6000610ce6610da6565b90506000610cf686846012611ee3565b90506000811315610d9a57610d90610d0e8683613d77565b876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f919061371e565b610d8a906012613c15565b84611e70565b9350505050610bf4565b50600095945050505050565b6000600080516020613f95833981519152610dc96010546001600160a01b031690565b6001600160a01b03161415610dde5750601290565b6010546001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2257600080fd5b505afa925050508015610e52575060408051601f3d908101601f19168201909252610e4f9181019061371e565b60015b610e5c5750600090565b919050565b6003546001600160a01b0316331480610f1e57506000610e89600f546001600160a01b031690565b6001600160a01b031662fdd58e33610ea060045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610ee457600080fd5b505afa158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c9190613669565b115b610f3a5760405162461bcd60e51b815260040161065290613a77565b80610f4460015490565b1015610f8a5760405162461bcd60e51b8152602060048201526015602482015274125b9d985a5b1908151c985b9cd858dd1a5bdb9259605a1b6044820152606401610652565b60026000828152600260208190526040909120015460ff166003811115610fb357610fb3613f18565b141561100f5760405162461bcd60e51b815260206004820152602560248201527f5472616e73616374696f6e20686173206265656e20636f6d706c65746564206260448201526465666f726560d81b6064820152608401610652565b6000818152600260208190526040808320909101805460ff191660031790555182917f92a917be073b79ab50f9d997e9514a5d101e052ce04228014947e7883a7c034691a250565b6060600a805461078990613e9c565b6049818154811061107657600080fd5b600091825260209091200154905081565b3360009081526006602052604090205460ff1680611149575060006110b4600f546001600160a01b031690565b6001600160a01b031662fdd58e336110cb60075490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561110f57600080fd5b505afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190613669565b115b6111a05760405162461bcd60e51b815260206004820152602260248201527f417070726f766572206e6f742077686974656c697374656420696e2062756467604482015261195d60f21b6064820152608401610652565b826111aa60015490565b10156111f05760405162461bcd60e51b8152602060048201526015602482015274125b9d985a5b1908151c985b9cd858dd1a5bdb9259605a1b6044820152606401610652565b600083815260026020819052604082209081015460039091015460ff909116919061121c906001613bfd565b9050600082600381111561123257611232613f18565b148061124f5750600182600381111561124d5761124d613f18565b145b61129b5760405162461bcd60e51b815260206004820152601d60248201527f556e6578706563746564207472616e73616374696f6e207374617475730000006044820152606401610652565b600085815260026020908152604080832033845260040190915290205460ff16156113145760405162461bcd60e51b8152602060048201526024808201527f5472616e73616374696f6e20686173206265656e20617070726f766564206265604482015263666f726560e01b6064820152608401610652565b6000858152600260208181526040808420338552600481018352908420805460ff19166001179055928890525260030181905561135060085490565b811061137457600085815260026020819052604090912001805460ff191660011790555b847f3399030f87676a97e30e211a48f9c46e2ff806d0b4cedf7100782f08c52902c93386866040516113a89392919061385b565b60405180910390a25050505050565b60006001600160a01b038316600080516020613f9583398151915214806113fa57506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15611406575080610bf4565b60008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d88600080516020613f958339815191526040518363ffffffff1660e01b815260040161145c92919061380d565b60a06040518083038186803b15801561147457600080fd5b505afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac91906136ce565b945094505093509350600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a889600080516020613f958339815191526040518363ffffffff1660e01b815260040161150792919061380d565b60206040518083038186803b15801561151f57600080fd5b505afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611557919061371e565b9050846001600160501b0316826001600160501b0316101561158b5760405162461bcd60e51b8152600401610652906139f5565b6115986201518084613bfd565b4211156115b75760405162461bcd60e51b8152600401610652906139f5565b6115c384826012611e70565b93506000841315610bea5783886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561160857600080fd5b505afa15801561161c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611640919061371e565b61164b90600a613ccb565b610bd49089613dfc565b60006001600160a01b038216600080516020613f95833981519152148061169857506001600160a01b03821673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b156116a557506001919050565b60405163d2edb6dd60e01b815273abc30d61d30f19de38897eba18252868b34596649063d2edb6dd906116ec908590600080516020613f958339815191529060040161380d565b60206040518083038186803b15801561170457600080fd5b505afa925050508015611734575060408051601f3d908101601f191682019092526117319181019061354a565b60015b611771573d808015611762576040519150601f19603f3d011682016040523d82523d6000602084013e611767565b606091505b5060009392505050565b50600192915050565b600054610100900460ff161580801561179a5750600054600160ff909116105b806117b45750303b1580156117b4575060005460ff166001145b6118175760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610652565b6000805460ff19166001179055801561183a576000805461ff0019166101001790555b611843896123a9565b6043805460ff191689151517905560005b87518110156118915761187f88828151811061187257611872613f2e565b6020026020010151612633565b8061188981613ed1565b915050611854565b5060005b86518110156118d2576118c08782815181106118b3576118b3613f2e565b6020026020010151612709565b806118ca81613ed1565b915050611895565b5060005b8251811015611913576119018382815181106118f4576118f4613f2e565b602002602001015161287a565b8061190b81613ed1565b9150506118d6565b506047805460ff191686151517905560488490556119308361295b565b8015611976576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6005546001600160a01b031633146119e65760405162461bcd60e51b815260206004820152602260248201527f4578656375746565206e6f742077686974656c697374656420696e2062756467604482015261195d60f21b6064820152608401610652565b565b806001806000838152600260208190526040909120015460ff166003811115611a1357611a13613f18565b14611a605760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e2073746174757320696e76616c69640000000000006044820152606401610652565b600083815260026020819052604090912001548390610100900463ffffffff16421115611ac55760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb88195e1c1a5c9959606a1b6044820152606401610652565b600d54421015611b175760405162461bcd60e51b815260206004820152601f60248201527f42756467657420757361676520706572696f64206e6f742073746172746564006044820152606401610652565b6000611b22600e5490565b90508015611b7957804210611b795760405162461bcd60e51b815260206004820152601d60248201527f42756467657420757361676520706572696f642068617320656e6465640000006044820152606401610652565b6003546001600160a01b0316331480611c3657506000611ba1600f546001600160a01b031690565b6001600160a01b031662fdd58e33611bb860045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015611bfc57600080fd5b505afa158015611c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c349190613669565b115b611c525760405162461bcd60e51b815260040161065290613a77565b6000611c60600b5460ff1690565b90506000611c6d600c5490565b9050600060026000898152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015611d53578382906000526020600020018054611cc690613e9c565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf290613e9c565b8015611d3f5780601f10611d1457610100808354040283529160200191611d3f565b820191906000526020600020905b815481529060010190602001808311611d2257829003601f168201915b505050505081526020019060010190611ca7565b50505050905060005b8151811015611e05578380611d715750600083115b611dbd5760405162461bcd60e51b815260206004820152601b60248201527f457863656564656420627564676574207573616765206c696d697400000000006044820152606401610652565b83611dd05782611dcc81613e85565b9350505b611df389838381518110611de657611de6613f2e565b60200260200101516129a4565b80611dfd81613ed1565b915050611d5c565b50600c82905560008881526002602081905260409091208101805460ff19166001830217905550877f9060adf413860c5ab6e376e0aa4269e49a13f0853edb1583fce8129d4c756d798233604051611e5e9291906138fb565b60405180910390a25050505050505050565b60008160ff168360ff161015611ea957611e8a8383613e32565b611e989060ff16600a613cbf565b611ea29085613d77565b9050611edc565b8160ff168360ff161115611ed957611ec18284613e32565b611ecf9060ff16600a613cbf565b611ea29085613c3a565b50825b9392505050565b600060ff821615801590611efb5750601260ff831611155b611f3b5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964205f646563696d616c7360781b6044820152606401610652565b6000611f4b60ff8416600a613cbf565b905060008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8a600080516020613f958339815191526040518363ffffffff1660e01b8152600401611fa392919061380d565b60a06040518083038186803b158015611fbb57600080fd5b505afa158015611fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff391906136ce565b945094505093509350836001600160501b0316816001600160501b0316101561205e5760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b20313034000000006044820152606401610652565b61206b6201518083613bfd565b4211156120ba5760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b20313035000000006044820152606401610652565b604051630b1c5a7560e31b815260009073abc30d61d30f19de38897eba18252868b3459664906358e2d3a890612104908d90600080516020613f958339815191529060040161380d565b60206040518083038186803b15801561211c57600080fd5b505afa158015612130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612154919061371e565b905061216184828a611e70565b935060008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8e600080516020613f958339815191526040518363ffffffff1660e01b81526004016121b992919061380d565b60a06040518083038186803b1580156121d157600080fd5b505afa1580156121e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220991906136ce565b945094505093509350836001600160501b0316816001600160501b031610156122745760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b20313132000000006044820152606401610652565b6122816201518083613bfd565b4211156122d05760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b20313133000000006044820152606401610652565b600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a88f600080516020613f958339815191526040518363ffffffff1660e01b815260040161232292919061380d565b60206040518083038186803b15801561233a57600080fd5b505afa15801561234e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612372919061371e565b905061237f84828f611e70565b93508361238c8c8b613d77565b6123969190613c3a565b9f9e505050505050505050505050505050565b600054610100900460ff166123d05760405162461bcd60e51b815260040161065290613a2c565b6000816060013511806123f557506123eb6040820182613aef565b9050816080013511155b6124395760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908185c1c1c9bdd995c881b1a5cdd605a1b6044820152606401610652565b600580546001600160a01b03191633179055612458602082018261324f565b600380546001600160a01b0319166001600160a01b039290921691909117905561248560a0820182613b39565b61249191600991612f69565b5061249f60c0820182613b39565b6124ab91600a91612f69565b50608081013560085560e0810135600d55610100810135600e556124d7610140820161012083016134b8565b600b805460ff1916911515919091179055610140810135600c556125036101808201610160830161324f565b600f80546001600160a01b0319166001600160a01b03929092169190911790556020810135600455606081013560075560005b6125436040830183613aef565b905081101561262f5760016006600061255f6040860186613aef565b8581811061256f5761256f613f2e565b9050602002016020810190612584919061324f565b6001600160a01b0316815260208101919091526040908101600020805460ff1916921515929092179091557f4664777dbfbcb27de0f602e1da5d5a259992cd7edf5b29192929c96e8fd50def906125dd90840184613aef565b838181106125ed576125ed613f2e565b9050602002016020810190612602919061324f565b6040516001600160a01b03909116815260200160405180910390a18061262781613ed1565b915050612536565b5050565b6001600160a01b03811660009081526044602052604090205460ff16156126ae5760405162461bcd60e51b815260206004820152602960248201527f4475706c696361746564206164647265737320696e20746172676574206164646044820152681c995cdcc81b1a5cdd60ba1b6064820152608401610652565b6001600160a01b038116600081815260446020908152604091829020805460ff1916600117905590519182527ff11283a265d7a5f95fbc149dc65464f1f5be0151aac387fd76a938e1e558460491015b60405180910390a150565b6001600160a01b03811660009081526046602052604090205460ff16156127805760405162461bcd60e51b815260206004820152602560248201527f4475706c696361746564204974656d20696e20736f7572636520746f6b656e206044820152643634b9ba1760d91b6064820152608401610652565b61278981611655565b6127e65760405162461bcd60e51b815260206004820152602860248201527f556e7265736f6c7661626c6520746f6b656e20696e2074617267657420746f6b60448201526732b7103634b9ba1760c11b6064820152608401610652565b6045805460018082019092557fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0b0180546001600160a01b0319166001600160a01b038416908117909155600081815260466020908152604091829020805460ff1916909417909355519081527f14009112f2dcb15cad32dab6bf972d6d85286e4ae1178f27323ffe25359459e691016126fe565b6000818152604a602052604090205460ff16156128e55760405162461bcd60e51b815260206004820152602360248201527f4475706c696361746564207465616d20696e20746172676574207465616d206c6044820152621a5cdd60ea1b6064820152608401610652565b6000818152604a6020526040808220805460ff1916600190811790915560498054918201815583527f37e472f504e93744df80d87316862f9a8fd41a7bc266c723bf77df7866d75f55018390555182917f97f63d9e58eec1949a905544927de4308825003ab1dd2aa1b699921c3ca31f9591a250565b600054610100900460ff166129825760405162461bcd60e51b815260040161065290613a2c565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000838060200190518101906129bd919061326c565b604854604754939650919450925060009160ff166001600160a01b038616600080516020613f958339815191521415612a98576005546001600160a01b031660405163d3abc28b60e01b81526001600160a01b038781166004830152606060248301526000606483015260448201879052919091169063d3abc28b90608401600060405180830381600087803b158015612a5657600080fd5b505af1158015612a6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a9291908101906134d3565b50612b64565b604080516001600160a01b038781166024830152604480830188905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052600554925163d3abc28b60e01b81529192169063d3abc28b90612b0b908a908590600090600401613827565b600060405180830381600087803b158015612b2557600080fd5b505af1158015612b39573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b6191908101906134d3565b50505b612b6e8685610bfa565b60435490935060ff1680612b9a57506001600160a01b03851660009081526044602052604090205460ff165b80612ba95750612ba985612d93565b612c015760405162461bcd60e51b815260206004820152602360248201527f526563697069656e74206e6f742077686974656c697374656420696e2062756460448201526219d95d60ea1b6064820152608401610652565b6001600160a01b03861660009081526046602052604090205460ff16612c695760405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206e6f742077686974656c697374656420696e20627564676574006044820152606401610652565b60008311612cc45760405162461bcd60e51b815260206004820152602260248201527f5472616e7366657220616d6f756e742073686f756c64206e6f74206265207a65604482015261726f60f01b6064820152608401610652565b8080612cd05750818311155b612d2c5760405162461bcd60e51b815260206004820152602760248201527f4578636565646564206d617820627564676574207472616e7366657261626c6560448201526608185b5bdd5b9d60ca1b6064820152608401610652565b80612d3f57612d3b8383613e1b565b6048555b604080516001600160a01b0388811682526020820187905287169133918b917f7bd766f3afc51ba3017c95a3a83ebdafe5e32cf39497f7efc628b13715da4289910160405180910390a45050505050505050565b604954600090818167ffffffffffffffff811115612db357612db3613f44565b604051908082528060200260200182016040528015612ddc578160200160208202803683370190505b50905060005b82811015612e275784828281518110612dfd57612dfd613f2e565b6001600160a01b039092166020928302919091019091015280612e1f81613ed1565b915050612de2565b506000612e3c600f546001600160a01b031690565b6001600160a01b0316634e1273f48360496040518363ffffffff1660e01b8152600401612e6a929190613880565b60006040518083038186803b158015612e8257600080fd5b505afa158015612e96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ebe9190810190613420565b905060005b8151811015610d9a576000828281518110612ee057612ee0613f2e565b60200260200101511115612efa5750600195945050505050565b80612f0481613ed1565b915050612ec3565b828054828255906000526020600020908101928215612f59579160200282015b82811115612f595782518051612f49918491602090910190612fe9565b5091602001919060010190612f2c565b50612f6592915061305d565b5090565b828054612f7590613e9c565b90600052602060002090601f016020900481019282612f975760008555612fdd565b82601f10612fb05782800160ff19823516178555612fdd565b82800160010185558215612fdd579182015b82811115612fdd578235825591602001919060010190612fc2565b50612f6592915061307a565b828054612ff590613e9c565b90600052602060002090601f0160209004810192826130175760008555612fdd565b82601f1061303057805160ff1916838001178555612fdd565b82800160010185558215612fdd579182015b82811115612fdd578251825591602001919060010190613042565b80821115612f65576000613071828261308f565b5060010161305d565b5b80821115612f65576000815560010161307b565b50805461309b90613e9c565b6000825580601f106130ab575050565b601f0160209004906000526020600020908101906130c9919061307a565b50565b8035610e5c81613f5a565b600082601f8301126130e857600080fd5b813560206130fd6130f883613bb1565b613b80565b80838252828201915082860187848660051b890101111561311d57600080fd5b60005b8581101561314557813561313381613f5a565b84529284019290840190600101613120565b5090979650505050505050565b600082601f83011261316357600080fd5b813560206131736130f883613bb1565b80838252828201915082860187848660051b890101111561319357600080fd5b60005b8581101561314557813584529284019290840190600101613196565b80358015158114610e5c57600080fd5b60008083601f8401126131d457600080fd5b50813567ffffffffffffffff8111156131ec57600080fd5b60208301915083602082850101111561320457600080fd5b9250929050565b6000610180828403121561321e57600080fd5b50919050565b803563ffffffff81168114610e5c57600080fd5b80516001600160501b0381168114610e5c57600080fd5b60006020828403121561326157600080fd5b8135611edc81613f5a565b60008060006060848603121561328157600080fd5b835161328c81613f5a565b602085015190935061329d81613f5a565b80925050604084015190509250925092565b600080604083850312156132c257600080fd5b82356132cd81613f5a565b946020939093013593505050565b6000806000806000608086880312156132f357600080fd5b67ffffffffffffffff808735111561330a57600080fd5b8635870188601f82011261331d57600080fd5b61332a6130f88235613bb1565b8082358252602082019150602083018b6020853560051b860101111561334f57600080fd5b60005b84358110156133ca57858235111561336957600080fd5b813585018d603f82011261337c57600080fd5b602081013561338d6130f882613bd5565b8181528f60408385010111156133a257600080fd5b8160408401602083013760006020928201830152865294850194929092019150600101613352565b50508098505050506133de60208801613224565b94506133ec604088016131b2565b935080606088013511156133ff57600080fd5b5061341087606088013588016131c2565b9598949750929550919392915050565b6000602080838503121561343357600080fd5b825167ffffffffffffffff81111561344a57600080fd5b8301601f8101851361345b57600080fd5b80516134696130f882613bb1565b80828252848201915084840188868560051b870101111561348957600080fd5b600094505b838510156134ac57805183526001949094019391850191850161348e565b50979650505050505050565b6000602082840312156134ca57600080fd5b611edc826131b2565b6000602082840312156134e557600080fd5b815167ffffffffffffffff8111156134fc57600080fd5b8201601f8101841361350d57600080fd5b805161351b6130f882613bd5565b81815285602083850101111561353057600080fd5b613541826020830160208601613e55565b95945050505050565b60006020828403121561355c57600080fd5b8151611edc81613f5a565b600080600080600080600080610100898b03121561358457600080fd5b883567ffffffffffffffff8082111561359c57600080fd5b6135a88c838d0161320b565b99506135b660208c016131b2565b985060408b01359150808211156135cc57600080fd5b6135d88c838d016130d7565b975060608b01359150808211156135ee57600080fd5b6135fa8c838d016130d7565b965061360860808c016131b2565b955060a08b0135945061361d60c08c016130cc565b935060e08b013591508082111561363357600080fd5b506136408b828c01613152565b9150509295985092959890939650565b60006020828403121561366257600080fd5b5035919050565b60006020828403121561367b57600080fd5b5051919050565b60008060006040848603121561369757600080fd5b83359250602084013567ffffffffffffffff8111156136b557600080fd5b6136c1868287016131c2565b9497909650939450505050565b600080600080600060a086880312156136e657600080fd5b6136ef86613238565b945060208601519350604086015192506060860151915061371260808701613238565b90509295509295909350565b60006020828403121561373057600080fd5b815160ff81168114611edc57600080fd5b600081518084526020808501808196508360051b8101915082860160005b85811015613789578284038952613777848351613796565b9885019893509084019060010161375f565b5091979650505050505050565b600081518084526137ae816020860160208601613e55565b601f01601f19169290920160200192915050565b600481106137e057634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b038416815260606020820181905260009061384b90830185613796565b9050826040830152949350505050565b6001600160a01b038416815260406020820181905260009061354190830184866137e4565b604080825283519082018190526000906020906060840190828701845b828110156138c25781516001600160a01b03168452928401929084019060010161389d565b505050838103828501528454808252600086815283812092840191905b81811015613145578354835260019384019392850192016138df565b60408152600061390e6040830185613741565b905060018060a01b03831660208301529392505050565b60a08152600061393860a0830189613741565b63ffffffff8816602084015261395160408401886137c2565b82810360608401526139648186886137e4565b91505060018060a01b0383166080830152979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156139d557603f198886030184526139c3858351613796565b945092850192908501906001016139a7565b5092979650505050505050565b602081526000611edc6020830184613796565b60208082526018908201527f5374616c6520707269636520696e20436861696e6c696e6b0000000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526022908201527f4578656375746f72206e6f742077686974656c697374656420696e2062756467604082015261195d60f21b606082015260800190565b85815260a08101613acd60208301876137c2565b63ffffffff949094166040820152911515606083015260809091015292915050565b6000808335601e19843603018112613b0657600080fd5b83018035915067ffffffffffffffff821115613b2157600080fd5b6020019150600581901b360382131561320457600080fd5b6000808335601e19843603018112613b5057600080fd5b83018035915067ffffffffffffffff821115613b6b57600080fd5b60200191503681900382131561320457600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613ba957613ba9613f44565b604052919050565b600067ffffffffffffffff821115613bcb57613bcb613f44565b5060051b60200190565b600067ffffffffffffffff821115613bef57613bef613f44565b50601f01601f191660200190565b60008219821115613c1057613c10613eec565b500190565b600060ff821660ff84168060ff03821115613c3257613c32613eec565b019392505050565b600082613c4957613c49613f02565b600160ff1b821460001984141615613c6357613c63613eec565b500590565b600082613c7757613c77613f02565b500490565b600181815b80851115613cb7578160001904821115613c9d57613c9d613eec565b80851615613caa57918102915b93841c9390800290613c81565b509250929050565b6000611edc8383613cd6565b6000611edc60ff8416835b600082613ce557506001610bf4565b81613cf257506000610bf4565b8160018114613d085760028114613d1257613d2e565b6001915050610bf4565b60ff841115613d2357613d23613eec565b50506001821b610bf4565b5060208310610133831016604e8410600b8410161715613d51575081810a610bf4565b613d5b8383613c7c565b8060001904821115613d6f57613d6f613eec565b029392505050565b60006001600160ff1b0381841382841380821686840486111615613d9d57613d9d613eec565b600160ff1b6000871282811687830589121615613dbc57613dbc613eec565b60008712925087820587128484161615613dd857613dd8613eec565b87850587128184161615613dee57613dee613eec565b505050929093029392505050565b6000816000190483118215151615613e1657613e16613eec565b500290565b600082821015613e2d57613e2d613eec565b500390565b600060ff821660ff841680821015613e4c57613e4c613eec565b90039392505050565b60005b83811015613e70578181015183820152602001613e58565b83811115613e7f576000848401525b50505050565b600081613e9457613e94613eec565b506000190190565b600181811c90821680613eb057607f821691505b6020821081141561321e57634e487b7160e01b600052602260045260246000fd5b6000600019821415613ee557613ee5613eec565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146130c957600080fdfe5472616e73666572204c69717569642045524332302042756467657420417070726f76616c000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea2646970667358221220407bb9ce4698001b8927ebcc35b4c8a76026d6b94dc35ae24212c0ba69b1869464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638501543711610130578063c34c08e5116100b8578063dd7a07041161007c578063dd7a0704146104ec578063de755e2f146104f4578063e52b4ab2146104fc578063ee22610b1461051f578063f5c038521461053257600080fd5b8063c34c08e5146104b0578063c7ee6712146104c1578063cf26fec6146104d4578063d92fc67b146104dc578063d96c9196146104e457600080fd5b806397c85a61116100ff57806397c85a611461040b5780639ace38c21461041e578063b49612ba1461047d578063b617b3ee14610490578063bc9c5e901461049d57600080fd5b806385015437146103b957806385f2aef2146103c65780638d1c5c29146103d757806392a85fde146103fa57600080fd5b806350bd881f116101be5780636bdebe5e116101825780636bdebe5e14610355578063735631ad1461038157806378e97925146103965780637cd47d931461039e5780637cddb6c3146103a657600080fd5b806350bd881f146103025780635aaaefad1461030a5780635ad325021461031d57806360d8bb221461032857806363d727dc1461033b57600080fd5b80631f1bd692116102055780631f1bd6921461027f5780633197cbb61461028757806331a7bdd91461028f5780633d70015a146102a45780634f64b2be146102d757600080fd5b806303ff90f61461023757806306fdde031461024e57806314b893f9146102635780631a39d8ef14610276575b600080fd5b6008545b6040519081526020015b60405180910390f35b610256610543565b60405161024591906139e2565b61023b6102713660046132db565b61055f565b61023b60485481565b61025661077a565b600e5461023b565b61029761080c565b6040516102459190613980565b6102c76102b236600461324f565b60466020526000908152604090205460ff1681565b6040519015158152602001610245565b6102ea6102e5366004613650565b61090d565b6040516001600160a01b039091168152602001610245565b600c5461023b565b61023b6103183660046132af565b610937565b600b5460ff166102c7565b61023b6103363660046132af565b610bfa565b610343610da6565b60405160ff9091168152602001610245565b6102c761036336600461324f565b6001600160a01b031660009081526006602052604090205460ff1690565b61039461038f366004613650565b610e61565b005b600d5461023b565b610256611057565b61023b6103b4366004613650565b611066565b6047546102c79060ff1681565b600f546001600160a01b03166102ea565b6102c76103e536600461324f565b60446020526000908152604090205460ff1681565b6010546001600160a01b03166102ea565b610394610419366004613682565b611087565b61046c61042c366004613650565b600260208190526000918252604090912080549181015460039091015460ff8083169263ffffffff61010082041692650100000000009091049091169085565b604051610245959493929190613ab9565b61023b61048b3660046132af565b6113b7565b6043546102c79060ff1681565b6102c76104ab36600461324f565b611655565b6003546001600160a01b03166102ea565b6103946104cf366004613567565b61177a565b610394611981565b60455461023b565b60075461023b565b60495461023b565b60045461023b565b6102c761050a366004613650565b604a6020526000908152604090205460ff1681565b61039461052d366004613650565b6119e8565b6005546001600160a01b03166102ea565b604051806060016040528060258152602001613f706025913981565b60006105736003546001600160a01b031690565b6001600160a01b0316336001600160a01b03161480610636575060006105a1600f546001600160a01b031690565b6001600160a01b031662fdd58e336105b860045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b1580156105fc57600080fd5b505afa158015610610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106349190613669565b115b61065b5760405162461bcd60e51b815260040161065290613a77565b60405180910390fd5b610669600180546001019055565b600061067460015490565b60008181526002602090815260409091208281558951929350916106a0916001840191908b0190612f0c565b506002810180546501000000000065ffffffffff001990911661010063ffffffff8b160265ff00000000001916171790556008546106fa57600082815260026020819052604090912001805460ff19166001179055610715565b600082815260026020819052604090912001805460ff191690555b600281015460405183917f8a5186dbaf6f344b2837e11834be94edebb633f05034f422c6b1fe1595b4d0cc91610758918c918c9160ff16908b908b903390613925565b60405180910390a2851561076f5761076f826119e8565b509695505050505050565b60606009805461078990613e9c565b80601f01602080910402602001604051908101604052809291908181526020018280546107b590613e9c565b80156108025780601f106107d757610100808354040283529160200191610802565b820191906000526020600020905b8154815290600101906020018083116107e557829003601f168201915b5050505050905090565b6040805160038082526080820190925260609160009190816020015b60608152602001906001900390816108285790505090506040518060400160405280600d81526020016c30b2323932b9b9903a37b5b2b760991b8152508160008151811061087857610878613f2e565b60200260200101819052506040518060400160405280600a8152602001696164647265737320746f60b01b815250816001815181106108b9576108b9613f2e565b60200260200101819052506040518060400160405280600d81526020016c75696e743235362076616c756560981b815250816002815181106108fd576108fd613f2e565b6020908102919091010152919050565b6045818154811061091d57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006001600160a01b038316600080516020613f95833981519152148061097a57506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15610986575080610bf4565b60008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d88600080516020613f958339815191526040518363ffffffff1660e01b81526004016109dc92919061380d565b60a06040518083038186803b1580156109f457600080fd5b505afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c91906136ce565b945094505093509350600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a889600080516020613f958339815191526040518363ffffffff1660e01b8152600401610a8792919061380d565b60206040518083038186803b158015610a9f57600080fd5b505afa158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad7919061371e565b9050846001600160501b0316826001600160501b03161015610b0b5760405162461bcd60e51b8152600401610652906139f5565b610b186201518084613bfd565b421115610b375760405162461bcd60e51b8152600401610652906139f5565b610b4384826012611e70565b93506000841315610bea57876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8757600080fd5b505afa158015610b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbf919061371e565b610bca90600a613ccb565b610bd48886613dfc565b610bde9190613c68565b95505050505050610bf4565b6000955050505050505b92915050565b600080610c0f6010546001600160a01b031690565b9050806001600160a01b0316846001600160a01b03161415610c345782915050610bf4565b6001600160a01b038116600080516020613f958339815191521480610c7557506001600160a01b03811673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15610c8c57610c848484610937565b915050610bf4565b6001600160a01b038416600080516020613f958339815191521480610ccd57506001600160a01b03841673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15610cdc57610c8481846113b7565b6000610ce6610da6565b90506000610cf686846012611ee3565b90506000811315610d9a57610d90610d0e8683613d77565b876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f919061371e565b610d8a906012613c15565b84611e70565b9350505050610bf4565b50600095945050505050565b6000600080516020613f95833981519152610dc96010546001600160a01b031690565b6001600160a01b03161415610dde5750601290565b6010546001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2257600080fd5b505afa925050508015610e52575060408051601f3d908101601f19168201909252610e4f9181019061371e565b60015b610e5c5750600090565b919050565b6003546001600160a01b0316331480610f1e57506000610e89600f546001600160a01b031690565b6001600160a01b031662fdd58e33610ea060045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610ee457600080fd5b505afa158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c9190613669565b115b610f3a5760405162461bcd60e51b815260040161065290613a77565b80610f4460015490565b1015610f8a5760405162461bcd60e51b8152602060048201526015602482015274125b9d985a5b1908151c985b9cd858dd1a5bdb9259605a1b6044820152606401610652565b60026000828152600260208190526040909120015460ff166003811115610fb357610fb3613f18565b141561100f5760405162461bcd60e51b815260206004820152602560248201527f5472616e73616374696f6e20686173206265656e20636f6d706c65746564206260448201526465666f726560d81b6064820152608401610652565b6000818152600260208190526040808320909101805460ff191660031790555182917f92a917be073b79ab50f9d997e9514a5d101e052ce04228014947e7883a7c034691a250565b6060600a805461078990613e9c565b6049818154811061107657600080fd5b600091825260209091200154905081565b3360009081526006602052604090205460ff1680611149575060006110b4600f546001600160a01b031690565b6001600160a01b031662fdd58e336110cb60075490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561110f57600080fd5b505afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190613669565b115b6111a05760405162461bcd60e51b815260206004820152602260248201527f417070726f766572206e6f742077686974656c697374656420696e2062756467604482015261195d60f21b6064820152608401610652565b826111aa60015490565b10156111f05760405162461bcd60e51b8152602060048201526015602482015274125b9d985a5b1908151c985b9cd858dd1a5bdb9259605a1b6044820152606401610652565b600083815260026020819052604082209081015460039091015460ff909116919061121c906001613bfd565b9050600082600381111561123257611232613f18565b148061124f5750600182600381111561124d5761124d613f18565b145b61129b5760405162461bcd60e51b815260206004820152601d60248201527f556e6578706563746564207472616e73616374696f6e207374617475730000006044820152606401610652565b600085815260026020908152604080832033845260040190915290205460ff16156113145760405162461bcd60e51b8152602060048201526024808201527f5472616e73616374696f6e20686173206265656e20617070726f766564206265604482015263666f726560e01b6064820152608401610652565b6000858152600260208181526040808420338552600481018352908420805460ff19166001179055928890525260030181905561135060085490565b811061137457600085815260026020819052604090912001805460ff191660011790555b847f3399030f87676a97e30e211a48f9c46e2ff806d0b4cedf7100782f08c52902c93386866040516113a89392919061385b565b60405180910390a25050505050565b60006001600160a01b038316600080516020613f9583398151915214806113fa57506001600160a01b03831673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b15611406575080610bf4565b60008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d88600080516020613f958339815191526040518363ffffffff1660e01b815260040161145c92919061380d565b60a06040518083038186803b15801561147457600080fd5b505afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac91906136ce565b945094505093509350600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a889600080516020613f958339815191526040518363ffffffff1660e01b815260040161150792919061380d565b60206040518083038186803b15801561151f57600080fd5b505afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611557919061371e565b9050846001600160501b0316826001600160501b0316101561158b5760405162461bcd60e51b8152600401610652906139f5565b6115986201518084613bfd565b4211156115b75760405162461bcd60e51b8152600401610652906139f5565b6115c384826012611e70565b93506000841315610bea5783886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561160857600080fd5b505afa15801561161c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611640919061371e565b61164b90600a613ccb565b610bd49089613dfc565b60006001600160a01b038216600080516020613f95833981519152148061169857506001600160a01b03821673b4fbf271143f4fbf7b91a5ded31805e42b2208d6145b156116a557506001919050565b60405163d2edb6dd60e01b815273abc30d61d30f19de38897eba18252868b34596649063d2edb6dd906116ec908590600080516020613f958339815191529060040161380d565b60206040518083038186803b15801561170457600080fd5b505afa925050508015611734575060408051601f3d908101601f191682019092526117319181019061354a565b60015b611771573d808015611762576040519150601f19603f3d011682016040523d82523d6000602084013e611767565b606091505b5060009392505050565b50600192915050565b600054610100900460ff161580801561179a5750600054600160ff909116105b806117b45750303b1580156117b4575060005460ff166001145b6118175760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610652565b6000805460ff19166001179055801561183a576000805461ff0019166101001790555b611843896123a9565b6043805460ff191689151517905560005b87518110156118915761187f88828151811061187257611872613f2e565b6020026020010151612633565b8061188981613ed1565b915050611854565b5060005b86518110156118d2576118c08782815181106118b3576118b3613f2e565b6020026020010151612709565b806118ca81613ed1565b915050611895565b5060005b8251811015611913576119018382815181106118f4576118f4613f2e565b602002602001015161287a565b8061190b81613ed1565b9150506118d6565b506047805460ff191686151517905560488490556119308361295b565b8015611976576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6005546001600160a01b031633146119e65760405162461bcd60e51b815260206004820152602260248201527f4578656375746565206e6f742077686974656c697374656420696e2062756467604482015261195d60f21b6064820152608401610652565b565b806001806000838152600260208190526040909120015460ff166003811115611a1357611a13613f18565b14611a605760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e2073746174757320696e76616c69640000000000006044820152606401610652565b600083815260026020819052604090912001548390610100900463ffffffff16421115611ac55760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb88195e1c1a5c9959606a1b6044820152606401610652565b600d54421015611b175760405162461bcd60e51b815260206004820152601f60248201527f42756467657420757361676520706572696f64206e6f742073746172746564006044820152606401610652565b6000611b22600e5490565b90508015611b7957804210611b795760405162461bcd60e51b815260206004820152601d60248201527f42756467657420757361676520706572696f642068617320656e6465640000006044820152606401610652565b6003546001600160a01b0316331480611c3657506000611ba1600f546001600160a01b031690565b6001600160a01b031662fdd58e33611bb860045490565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015611bfc57600080fd5b505afa158015611c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c349190613669565b115b611c525760405162461bcd60e51b815260040161065290613a77565b6000611c60600b5460ff1690565b90506000611c6d600c5490565b9050600060026000898152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015611d53578382906000526020600020018054611cc690613e9c565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf290613e9c565b8015611d3f5780601f10611d1457610100808354040283529160200191611d3f565b820191906000526020600020905b815481529060010190602001808311611d2257829003601f168201915b505050505081526020019060010190611ca7565b50505050905060005b8151811015611e05578380611d715750600083115b611dbd5760405162461bcd60e51b815260206004820152601b60248201527f457863656564656420627564676574207573616765206c696d697400000000006044820152606401610652565b83611dd05782611dcc81613e85565b9350505b611df389838381518110611de657611de6613f2e565b60200260200101516129a4565b80611dfd81613ed1565b915050611d5c565b50600c82905560008881526002602081905260409091208101805460ff19166001830217905550877f9060adf413860c5ab6e376e0aa4269e49a13f0853edb1583fce8129d4c756d798233604051611e5e9291906138fb565b60405180910390a25050505050505050565b60008160ff168360ff161015611ea957611e8a8383613e32565b611e989060ff16600a613cbf565b611ea29085613d77565b9050611edc565b8160ff168360ff161115611ed957611ec18284613e32565b611ecf9060ff16600a613cbf565b611ea29085613c3a565b50825b9392505050565b600060ff821615801590611efb5750601260ff831611155b611f3b5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964205f646563696d616c7360781b6044820152606401610652565b6000611f4b60ff8416600a613cbf565b905060008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8a600080516020613f958339815191526040518363ffffffff1660e01b8152600401611fa392919061380d565b60a06040518083038186803b158015611fbb57600080fd5b505afa158015611fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff391906136ce565b945094505093509350836001600160501b0316816001600160501b0316101561205e5760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b20313034000000006044820152606401610652565b61206b6201518083613bfd565b4211156120ba5760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b20313035000000006044820152606401610652565b604051630b1c5a7560e31b815260009073abc30d61d30f19de38897eba18252868b3459664906358e2d3a890612104908d90600080516020613f958339815191529060040161380d565b60206040518083038186803b15801561211c57600080fd5b505afa158015612130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612154919061371e565b905061216184828a611e70565b935060008060008073abc30d61d30f19de38897eba18252868b34596646001600160a01b031663bcfd032d8e600080516020613f958339815191526040518363ffffffff1660e01b81526004016121b992919061380d565b60a06040518083038186803b1580156121d157600080fd5b505afa1580156121e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220991906136ce565b945094505093509350836001600160501b0316816001600160501b031610156122745760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b20313132000000006044820152606401610652565b6122816201518083613bfd565b4211156122d05760405162461bcd60e51b815260206004820152601c60248201527f5374616c6520707269636520696e20436861696e6c696e6b20313133000000006044820152606401610652565b600073abc30d61d30f19de38897eba18252868b34596646001600160a01b03166358e2d3a88f600080516020613f958339815191526040518363ffffffff1660e01b815260040161232292919061380d565b60206040518083038186803b15801561233a57600080fd5b505afa15801561234e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612372919061371e565b905061237f84828f611e70565b93508361238c8c8b613d77565b6123969190613c3a565b9f9e505050505050505050505050505050565b600054610100900460ff166123d05760405162461bcd60e51b815260040161065290613a2c565b6000816060013511806123f557506123eb6040820182613aef565b9050816080013511155b6124395760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908185c1c1c9bdd995c881b1a5cdd605a1b6044820152606401610652565b600580546001600160a01b03191633179055612458602082018261324f565b600380546001600160a01b0319166001600160a01b039290921691909117905561248560a0820182613b39565b61249191600991612f69565b5061249f60c0820182613b39565b6124ab91600a91612f69565b50608081013560085560e0810135600d55610100810135600e556124d7610140820161012083016134b8565b600b805460ff1916911515919091179055610140810135600c556125036101808201610160830161324f565b600f80546001600160a01b0319166001600160a01b03929092169190911790556020810135600455606081013560075560005b6125436040830183613aef565b905081101561262f5760016006600061255f6040860186613aef565b8581811061256f5761256f613f2e565b9050602002016020810190612584919061324f565b6001600160a01b0316815260208101919091526040908101600020805460ff1916921515929092179091557f4664777dbfbcb27de0f602e1da5d5a259992cd7edf5b29192929c96e8fd50def906125dd90840184613aef565b838181106125ed576125ed613f2e565b9050602002016020810190612602919061324f565b6040516001600160a01b03909116815260200160405180910390a18061262781613ed1565b915050612536565b5050565b6001600160a01b03811660009081526044602052604090205460ff16156126ae5760405162461bcd60e51b815260206004820152602960248201527f4475706c696361746564206164647265737320696e20746172676574206164646044820152681c995cdcc81b1a5cdd60ba1b6064820152608401610652565b6001600160a01b038116600081815260446020908152604091829020805460ff1916600117905590519182527ff11283a265d7a5f95fbc149dc65464f1f5be0151aac387fd76a938e1e558460491015b60405180910390a150565b6001600160a01b03811660009081526046602052604090205460ff16156127805760405162461bcd60e51b815260206004820152602560248201527f4475706c696361746564204974656d20696e20736f7572636520746f6b656e206044820152643634b9ba1760d91b6064820152608401610652565b61278981611655565b6127e65760405162461bcd60e51b815260206004820152602860248201527f556e7265736f6c7661626c6520746f6b656e20696e2074617267657420746f6b60448201526732b7103634b9ba1760c11b6064820152608401610652565b6045805460018082019092557fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0b0180546001600160a01b0319166001600160a01b038416908117909155600081815260466020908152604091829020805460ff1916909417909355519081527f14009112f2dcb15cad32dab6bf972d6d85286e4ae1178f27323ffe25359459e691016126fe565b6000818152604a602052604090205460ff16156128e55760405162461bcd60e51b815260206004820152602360248201527f4475706c696361746564207465616d20696e20746172676574207465616d206c6044820152621a5cdd60ea1b6064820152608401610652565b6000818152604a6020526040808220805460ff1916600190811790915560498054918201815583527f37e472f504e93744df80d87316862f9a8fd41a7bc266c723bf77df7866d75f55018390555182917f97f63d9e58eec1949a905544927de4308825003ab1dd2aa1b699921c3ca31f9591a250565b600054610100900460ff166129825760405162461bcd60e51b815260040161065290613a2c565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000838060200190518101906129bd919061326c565b604854604754939650919450925060009160ff166001600160a01b038616600080516020613f958339815191521415612a98576005546001600160a01b031660405163d3abc28b60e01b81526001600160a01b038781166004830152606060248301526000606483015260448201879052919091169063d3abc28b90608401600060405180830381600087803b158015612a5657600080fd5b505af1158015612a6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a9291908101906134d3565b50612b64565b604080516001600160a01b038781166024830152604480830188905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052600554925163d3abc28b60e01b81529192169063d3abc28b90612b0b908a908590600090600401613827565b600060405180830381600087803b158015612b2557600080fd5b505af1158015612b39573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b6191908101906134d3565b50505b612b6e8685610bfa565b60435490935060ff1680612b9a57506001600160a01b03851660009081526044602052604090205460ff165b80612ba95750612ba985612d93565b612c015760405162461bcd60e51b815260206004820152602360248201527f526563697069656e74206e6f742077686974656c697374656420696e2062756460448201526219d95d60ea1b6064820152608401610652565b6001600160a01b03861660009081526046602052604090205460ff16612c695760405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206e6f742077686974656c697374656420696e20627564676574006044820152606401610652565b60008311612cc45760405162461bcd60e51b815260206004820152602260248201527f5472616e7366657220616d6f756e742073686f756c64206e6f74206265207a65604482015261726f60f01b6064820152608401610652565b8080612cd05750818311155b612d2c5760405162461bcd60e51b815260206004820152602760248201527f4578636565646564206d617820627564676574207472616e7366657261626c6560448201526608185b5bdd5b9d60ca1b6064820152608401610652565b80612d3f57612d3b8383613e1b565b6048555b604080516001600160a01b0388811682526020820187905287169133918b917f7bd766f3afc51ba3017c95a3a83ebdafe5e32cf39497f7efc628b13715da4289910160405180910390a45050505050505050565b604954600090818167ffffffffffffffff811115612db357612db3613f44565b604051908082528060200260200182016040528015612ddc578160200160208202803683370190505b50905060005b82811015612e275784828281518110612dfd57612dfd613f2e565b6001600160a01b039092166020928302919091019091015280612e1f81613ed1565b915050612de2565b506000612e3c600f546001600160a01b031690565b6001600160a01b0316634e1273f48360496040518363ffffffff1660e01b8152600401612e6a929190613880565b60006040518083038186803b158015612e8257600080fd5b505afa158015612e96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ebe9190810190613420565b905060005b8151811015610d9a576000828281518110612ee057612ee0613f2e565b60200260200101511115612efa5750600195945050505050565b80612f0481613ed1565b915050612ec3565b828054828255906000526020600020908101928215612f59579160200282015b82811115612f595782518051612f49918491602090910190612fe9565b5091602001919060010190612f2c565b50612f6592915061305d565b5090565b828054612f7590613e9c565b90600052602060002090601f016020900481019282612f975760008555612fdd565b82601f10612fb05782800160ff19823516178555612fdd565b82800160010185558215612fdd579182015b82811115612fdd578235825591602001919060010190612fc2565b50612f6592915061307a565b828054612ff590613e9c565b90600052602060002090601f0160209004810192826130175760008555612fdd565b82601f1061303057805160ff1916838001178555612fdd565b82800160010185558215612fdd579182015b82811115612fdd578251825591602001919060010190613042565b80821115612f65576000613071828261308f565b5060010161305d565b5b80821115612f65576000815560010161307b565b50805461309b90613e9c565b6000825580601f106130ab575050565b601f0160209004906000526020600020908101906130c9919061307a565b50565b8035610e5c81613f5a565b600082601f8301126130e857600080fd5b813560206130fd6130f883613bb1565b613b80565b80838252828201915082860187848660051b890101111561311d57600080fd5b60005b8581101561314557813561313381613f5a565b84529284019290840190600101613120565b5090979650505050505050565b600082601f83011261316357600080fd5b813560206131736130f883613bb1565b80838252828201915082860187848660051b890101111561319357600080fd5b60005b8581101561314557813584529284019290840190600101613196565b80358015158114610e5c57600080fd5b60008083601f8401126131d457600080fd5b50813567ffffffffffffffff8111156131ec57600080fd5b60208301915083602082850101111561320457600080fd5b9250929050565b6000610180828403121561321e57600080fd5b50919050565b803563ffffffff81168114610e5c57600080fd5b80516001600160501b0381168114610e5c57600080fd5b60006020828403121561326157600080fd5b8135611edc81613f5a565b60008060006060848603121561328157600080fd5b835161328c81613f5a565b602085015190935061329d81613f5a565b80925050604084015190509250925092565b600080604083850312156132c257600080fd5b82356132cd81613f5a565b946020939093013593505050565b6000806000806000608086880312156132f357600080fd5b67ffffffffffffffff808735111561330a57600080fd5b8635870188601f82011261331d57600080fd5b61332a6130f88235613bb1565b8082358252602082019150602083018b6020853560051b860101111561334f57600080fd5b60005b84358110156133ca57858235111561336957600080fd5b813585018d603f82011261337c57600080fd5b602081013561338d6130f882613bd5565b8181528f60408385010111156133a257600080fd5b8160408401602083013760006020928201830152865294850194929092019150600101613352565b50508098505050506133de60208801613224565b94506133ec604088016131b2565b935080606088013511156133ff57600080fd5b5061341087606088013588016131c2565b9598949750929550919392915050565b6000602080838503121561343357600080fd5b825167ffffffffffffffff81111561344a57600080fd5b8301601f8101851361345b57600080fd5b80516134696130f882613bb1565b80828252848201915084840188868560051b870101111561348957600080fd5b600094505b838510156134ac57805183526001949094019391850191850161348e565b50979650505050505050565b6000602082840312156134ca57600080fd5b611edc826131b2565b6000602082840312156134e557600080fd5b815167ffffffffffffffff8111156134fc57600080fd5b8201601f8101841361350d57600080fd5b805161351b6130f882613bd5565b81815285602083850101111561353057600080fd5b613541826020830160208601613e55565b95945050505050565b60006020828403121561355c57600080fd5b8151611edc81613f5a565b600080600080600080600080610100898b03121561358457600080fd5b883567ffffffffffffffff8082111561359c57600080fd5b6135a88c838d0161320b565b99506135b660208c016131b2565b985060408b01359150808211156135cc57600080fd5b6135d88c838d016130d7565b975060608b01359150808211156135ee57600080fd5b6135fa8c838d016130d7565b965061360860808c016131b2565b955060a08b0135945061361d60c08c016130cc565b935060e08b013591508082111561363357600080fd5b506136408b828c01613152565b9150509295985092959890939650565b60006020828403121561366257600080fd5b5035919050565b60006020828403121561367b57600080fd5b5051919050565b60008060006040848603121561369757600080fd5b83359250602084013567ffffffffffffffff8111156136b557600080fd5b6136c1868287016131c2565b9497909650939450505050565b600080600080600060a086880312156136e657600080fd5b6136ef86613238565b945060208601519350604086015192506060860151915061371260808701613238565b90509295509295909350565b60006020828403121561373057600080fd5b815160ff81168114611edc57600080fd5b600081518084526020808501808196508360051b8101915082860160005b85811015613789578284038952613777848351613796565b9885019893509084019060010161375f565b5091979650505050505050565b600081518084526137ae816020860160208601613e55565b601f01601f19169290920160200192915050565b600481106137e057634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b038416815260606020820181905260009061384b90830185613796565b9050826040830152949350505050565b6001600160a01b038416815260406020820181905260009061354190830184866137e4565b604080825283519082018190526000906020906060840190828701845b828110156138c25781516001600160a01b03168452928401929084019060010161389d565b505050838103828501528454808252600086815283812092840191905b81811015613145578354835260019384019392850192016138df565b60408152600061390e6040830185613741565b905060018060a01b03831660208301529392505050565b60a08152600061393860a0830189613741565b63ffffffff8816602084015261395160408401886137c2565b82810360608401526139648186886137e4565b91505060018060a01b0383166080830152979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156139d557603f198886030184526139c3858351613796565b945092850192908501906001016139a7565b5092979650505050505050565b602081526000611edc6020830184613796565b60208082526018908201527f5374616c6520707269636520696e20436861696e6c696e6b0000000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526022908201527f4578656375746f72206e6f742077686974656c697374656420696e2062756467604082015261195d60f21b606082015260800190565b85815260a08101613acd60208301876137c2565b63ffffffff949094166040820152911515606083015260809091015292915050565b6000808335601e19843603018112613b0657600080fd5b83018035915067ffffffffffffffff821115613b2157600080fd5b6020019150600581901b360382131561320457600080fd5b6000808335601e19843603018112613b5057600080fd5b83018035915067ffffffffffffffff821115613b6b57600080fd5b60200191503681900382131561320457600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613ba957613ba9613f44565b604052919050565b600067ffffffffffffffff821115613bcb57613bcb613f44565b5060051b60200190565b600067ffffffffffffffff821115613bef57613bef613f44565b50601f01601f191660200190565b60008219821115613c1057613c10613eec565b500190565b600060ff821660ff84168060ff03821115613c3257613c32613eec565b019392505050565b600082613c4957613c49613f02565b600160ff1b821460001984141615613c6357613c63613eec565b500590565b600082613c7757613c77613f02565b500490565b600181815b80851115613cb7578160001904821115613c9d57613c9d613eec565b80851615613caa57918102915b93841c9390800290613c81565b509250929050565b6000611edc8383613cd6565b6000611edc60ff8416835b600082613ce557506001610bf4565b81613cf257506000610bf4565b8160018114613d085760028114613d1257613d2e565b6001915050610bf4565b60ff841115613d2357613d23613eec565b50506001821b610bf4565b5060208310610133831016604e8410600b8410161715613d51575081810a610bf4565b613d5b8383613c7c565b8060001904821115613d6f57613d6f613eec565b029392505050565b60006001600160ff1b0381841382841380821686840486111615613d9d57613d9d613eec565b600160ff1b6000871282811687830589121615613dbc57613dbc613eec565b60008712925087820587128484161615613dd857613dd8613eec565b87850587128184161615613dee57613dee613eec565b505050929093029392505050565b6000816000190483118215151615613e1657613e16613eec565b500290565b600082821015613e2d57613e2d613eec565b500390565b600060ff821660ff841680821015613e4c57613e4c613eec565b90039392505050565b60005b83811015613e70578181015183820152602001613e58565b83811115613e7f576000848401525b50505050565b600081613e9457613e94613eec565b506000190190565b600181811c90821680613eb057607f821691505b6020821081141561321e57634e487b7160e01b600052602260045260246000fd5b6000600019821415613ee557613ee5613eec565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146130c957600080fdfe5472616e73666572204c69717569642045524332302042756467657420417070726f76616c000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea2646970667358221220407bb9ce4698001b8927ebcc35b4c8a76026d6b94dc35ae24212c0ba69b1869464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetBaseCurrencyPrice(address,uint256)": {
        "notice": "This function is imported by other contract, thus cannot be external"
      },
      "canResolvePrice(address)": {
        "notice": "This function is imported by other contract, thus cannot be external"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3247,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3250,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 28969,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_transactionIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)17310_storage"
      },
      {
        "astId": 28974,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "transactions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Transaction)28913_storage)"
      },
      {
        "astId": 28976,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_executor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 28978,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_executorTeamId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 28980,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_executee",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 28984,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_approversMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28986,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_approverTeamId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 28988,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_minApproval",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 28990,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_text",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 28992,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_transactionType",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 28994,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_allowUnlimitedUsageCount",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 28996,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_usageCount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 28998,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_startTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 29000,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_endTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 29002,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_team",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 29755,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "_baseCurrency",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 30379,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "__gap",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 26369,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "allowAllAddresses",
        "offset": 0,
        "slot": "67",
        "type": "t_bool"
      },
      {
        "astId": 26373,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "addressesMapping",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 26376,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "tokens",
        "offset": 0,
        "slot": "69",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 26380,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "tokensMapping",
        "offset": 0,
        "slot": "70",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 26382,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "allowAnyAmount",
        "offset": 0,
        "slot": "71",
        "type": "t_bool"
      },
      {
        "astId": 26384,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "totalAmount",
        "offset": 0,
        "slot": "72",
        "type": "t_uint256"
      },
      {
        "astId": 26387,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "toTeamIds",
        "offset": 0,
        "slot": "73",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 26391,
        "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
        "label": "toTeamIdsMapping",
        "offset": 0,
        "slot": "74",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)28894": {
        "encoding": "inplace",
        "label": "enum CommonBudgetApproval.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Transaction)28913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonBudgetApproval.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)28913_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)17310_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 17309,
            "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)28913_storage": {
        "encoding": "inplace",
        "label": "struct CommonBudgetApproval.Transaction",
        "members": [
          {
            "astId": 28896,
            "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28899,
            "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 28902,
            "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Status)28894"
          },
          {
            "astId": 28904,
            "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
            "label": "deadline",
            "offset": 1,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 28906,
            "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
            "label": "isExist",
            "offset": 5,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 28908,
            "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
            "label": "approvedCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 28912,
            "contract": "contracts/TransferLiquidERC20BudgetApproval.sol:TransferLiquidERC20BudgetApproval",
            "label": "approved",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}